/*
 * generated by Xtext 2.19.0
 */
package srclang.com.github.jknack.antlr4ide.formatting2

import antlr4.Grammar
import antlr4.Options
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import srclang.com.github.jknack.antlr4ide.services.Antlr4GrammarAccess

class Antlr4Formatter extends AbstractFormatter2 {
	
	@Inject extension Antlr4GrammarAccess

	def dispatch void format(Grammar grammar, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (prequelConstruct : grammar.prequels) {
			prequelConstruct.format
		}
		for (rule : grammar.rules) {
			rule.format
		}
		for (mode : grammar.modes) {
			mode.format
		}
	}

	def dispatch void format(Options options, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (option : options.options) {
			option.format
		}
	}
	
	// TODO: implement for Option, QualifiedOption, Imports, V4Tokens, V3Tokens, Mode, ParserRule, ExceptionGroup, Exceptions, RuleBlock, RuleAltList, LabeledAlt, Alternative, Element, Ebnf, ActionElement, LabeledElement, Block, AltList, Atom, RuleRef, ElementOptions, Terminal, NotSet, BlockSet, SetElement, Wildcard, ElementOption, LexerRule, LexerRuleBlock, LexerAltList, LexerAlt, LexerElements, LexerElement, LabeledLexerElement, LexerAtom, LexerBlock, LexerCommands, LexerCommand
}
