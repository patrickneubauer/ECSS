// automatically generated by ECSS
grammar trglang.yang.manager.Yang 

import "http://www.xtext.org/editor/yang/Yang"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

YangFile:
	SubModule | Module;

SubModule:
	{SubModule} "SubModule" name=ID? "{" (statements+=SubmoduleStatement ("," statements+=SubmoduleStatement)*)? "}";

Module:
	{Module} "Module" name=ID? "{" (statements+=ModuleStatement ("," statements+=ModuleStatement)*)? "}";

ModuleStatement:
	PrefixStatement | UnknownStatement | TypedefStatement | DeviationStatement | ImportStatement | RpcStatement |
	FeatureStatement | DatadefStatement | IncludeStatement | GroupingStatement | RevisionStatement | ContactStatement |
	NotificationStatement | OrganizationStatement | DescriptionStatement | AugmentStatement | YangVersionStatement |
	NamespaceStatement | IdentityStatement | ExtensionStatement;

SubmoduleStatement:
	UnknownStatement | TypedefStatement | DeviationStatement | ImportStatement | RpcStatement | FeatureStatement |
	DatadefStatement | IncludeStatement | GroupingStatement | RevisionStatement | ContactStatement | NotificationStatement
	| OrganizationStatement | DescriptionStatement | AugmentStatement | YangVersionStatement | BelongsToStatement |
	IdentityStatement | ExtensionStatement;

DatadefStatement:
	ContainerStatement | LeafListStatement | LeafStatement | ListStatement | UsesStatement | ChoiceStatement |
	AnyxmlStatement;

RevisionStatement:
	{RevisionStatement} "RevisionStatement" "{" date=ESTRING? (revisionsubstatements+=RevisionSubstatements (","
	revisionsubstatements+=RevisionSubstatements)*)? "}";

ImportStatement:
	{ImportStatement} "ImportStatement" "{" importURI=ESTRING? (importsubstatements+=ImportSubstatements (","
	importsubstatements+=ImportSubstatements)*)? "}";

GroupingStatement:
	{GroupingStatement} "GroupingStatement" name=ID? "{" (groupingsubstatements+=GroupingSubstatement (","
	groupingsubstatements+=GroupingSubstatement)*)? "}";

DescriptionStatement:
	{DescriptionStatement} "DescriptionStatement" "{" description=ESTRING? (descriptionunknownstatements+=UnknownStatement
	("," descriptionunknownstatements+=UnknownStatement)*)? "}";

TypedefStatement:
	{TypedefStatement} "TypedefStatement" name=ID? "{" (typedefsubstatemnet+=TypedefSubstatement (","
	typedefsubstatemnet+=TypedefSubstatement)*)? "}";

NotificationStatement:
	{NotificationStatement} "NotificationStatement" name=ID? "{" (notificationsubstatements+=NotificationSubstatement (","
	notificationsubstatements+=NotificationSubstatement)*)? "}";

UnknownStatement:
	{UnknownStatement} "UnknownStatement" "{" pref=ESTRING? namestat=ESTRING? argument=ESTRING?
	(unknownsubstatements+=UnknownSubstatements ("," unknownsubstatements+=UnknownSubstatements)*)? "}";

OrganizationStatement:
	{OrganizationStatement} "OrganizationStatement" "{" organization=ESTRING?
	(organizationunknownstatements+=UnknownStatement ("," organizationunknownstatements+=UnknownStatement)*)? "}";

AugmentStatement:
	{AugmentStatement} "AugmentStatement" "{" arg=ESTRING? (augmentsubstatements+=AugmentSubstatement (","
	augmentsubstatements+=AugmentSubstatement)*)? "}";

ExtensionStatement:
	{ExtensionStatement} "ExtensionStatement" "{" arg=ESTRING? (extensionsubstatements+=ExtensionSubstatement (","
	extensionsubstatements+=ExtensionSubstatement)*)? "}";

PrefixStatement:
	{PrefixStatement} "PrefixStatement" name=ID? "{" (prefixunknownstatements+=UnknownStatement (","
	prefixunknownstatements+=UnknownStatement)*)? "}";

FeatureStatement:
	{FeatureStatement} "FeatureStatement" name=ID? "{" (featuresubstatements+=FeatureSubstatement (","
	featuresubstatements+=FeatureSubstatement)*)? "}";

DeviationStatement:
	{DeviationStatement} "DeviationStatement" "{" arg=ESTRING? (deviationsubstatements+=DeviationSubstatement (","
	deviationsubstatements+=DeviationSubstatement)*)? "}";

ContactStatement:
	{ContactStatement} "ContactStatement" "{" contact=ESTRING? (contactunknownstatements+=UnknownStatement (","
	contactunknownstatements+=UnknownStatement)*)? "}";

IdentityStatement:
	{IdentityStatement} "IdentityStatement" name=ID? "{" (identitysubstatements+=IdentitySubstatement (","
	identitysubstatements+=IdentitySubstatement)*)? "}";

RpcStatement:
	{RpcStatement} "RpcStatement" name=ID? "{" (rpcsubstatements+=RpcSubstatement (","
	rpcsubstatements+=RpcSubstatement)*)? "}";

NamespaceStatement:
	{NamespaceStatement} "NamespaceStatement" "{" uri=ESTRING? (namespaceunknownstatements+=UnknownStatement (","
	namespaceunknownstatements+=UnknownStatement)*)? "}";

IncludeStatement:
	{IncludeStatement} "IncludeStatement" "{" importURI=ESTRING? (includesubstatements+=IncludeSubstatements (","
	includesubstatements+=IncludeSubstatements)*)? "}";

YangVersionStatement:
	{YangVersionStatement} "YangVersionStatement" "{" version=ESTRING? (yangversionunknownstatements+=UnknownStatement
	("," yangversionunknownstatements+=UnknownStatement)*)? "}";

BelongsToStatement:
	{BelongsToStatement} "BelongsToStatement" name=ID? "{" (belongstosubstatement+=BelongsToSubstatement (","
	belongstosubstatement+=BelongsToSubstatement)*)? "}";

terminal ESTRING:
	"\"" ("\\" . | !("\\" | "\""))* "\"" | "\'" ("\\" . | !("\\" | "\'"))* "\'";

IncludeSubstatements:
	UnknownStatement | TypeStatement | RevisionDateStatement;

RpcSubstatement:
	UnknownStatement | GroupingStatement | TypedefStatement | IfFeatureStatement | InputStatement | OutputStatement |
	ReferenceStatement | DescriptionStatement | StatusStatement;

IdentitySubstatement:
	UnknownStatement | ReferenceStatement | DescriptionStatement | StatusStatement | BaseStatement;

DeviationSubstatement:
	UnknownStatement | ReferenceStatement | DescriptionStatement | DeviateStatement;

FeatureSubstatement:
	UnknownStatement | IfFeatureStatement | ReferenceStatement | DescriptionStatement | StatusStatement;

ExtensionSubstatement:
	UnknownStatement | ReferenceStatement | ArgumentStatement | DescriptionStatement | StatusStatement;

AugmentSubstatement:
	WhenStatement | DatadefStatement | UnknownStatement | IfFeatureStatement | ReferenceStatement | DescriptionStatement |
	StatusStatement | CaseStatement;

UnknownSubstatements:
	{UnknownSubstatements} "UnknownSubstatements" "{" pref=ESTRING? namestat=ESTRING? argument=ESTRING?
	(unknownsubstatements+=UnknownSubstatements ("," unknownsubstatements+=UnknownSubstatements)*)? "}";

NotificationSubstatement:
	DatadefStatement | UnknownStatement | GroupingStatement | TypedefStatement | IfFeatureStatement | ReferenceStatement |
	DescriptionStatement | StatusStatement;

TypedefSubstatement:
	UnitsStatement | UnknownStatement | TypeStatement | ReferenceStatement | DefaultStatement | DescriptionStatement |
	StatusStatement;

GroupingSubstatement:
	DatadefStatement | UnknownStatement | GroupingStatement | TypedefStatement | ReferenceStatement | DescriptionStatement
	| StatusStatement;

ImportSubstatements:
	PrefixStatement | UnknownStatement | TypeStatement | RevisionDateStatement;

RevisionSubstatements:
	UnknownStatement | ReferenceStatement | DescriptionStatement;

ChoiceStatement:
	{ChoiceStatement} "ChoiceStatement" name=ID? "{" (choicesubstatements+=ChoiceSubstatement (","
	choicesubstatements+=ChoiceSubstatement)*)? "}";

ListStatement:
	{ListStatement} "ListStatement" name=ID? "{" (listsubstatements+=ListSubstatement (","
	listsubstatements+=ListSubstatement)*)? "}";

LeafStatement:
	{LeafStatement} "LeafStatement" name=ID? "{" (leafsubstatements+=LeafSubstatement (","
	leafsubstatements+=LeafSubstatement)*)? "}";

ContainerStatement:
	{ContainerStatement} "ContainerStatement" name=ID? "{" (containersubstatements+=ContainerSubstatement (","
	containersubstatements+=ContainerSubstatement)*)? "}";

AnyxmlStatement:
	{AnyxmlStatement} "AnyxmlStatement" "{" arg=ESTRING? (anyxmlsubstatements+=AnyxmlSubstatement (","
	anyxmlsubstatements+=AnyxmlSubstatement)*)? "}";

UsesStatement:
	{UsesStatement} "UsesStatement" "{" pre=ESTRING? arg=[GroupingStatement]? (usessubstatements+=UsesSubstatement (","
	usessubstatements+=UsesSubstatement)*)? "}";

LeafListStatement:
	{LeafListStatement} "LeafListStatement" "{" arg=ESTRING? (leaflistsubstatements+=LeafListSubstatement (","
	leaflistsubstatements+=LeafListSubstatement)*)? "}";

BelongsToSubstatement:
	PrefixStatement | UnknownStatement;

TypeStatement:
	{TypeStatement} "TypeStatement" "{" type=BuiltInType? pre=ESTRING? importtype=[TypedefStatement]?
	(typesubstatements+=TypeSubStatement ("," typesubstatements+=TypeSubStatement)*)? "}";

RevisionDateStatement:
	{RevisionDateStatement} "RevisionDateStatement" "{" date=ESTRING? (revisiondateunknownstatements+=UnknownStatement
	("," revisiondateunknownstatements+=UnknownStatement)*)? "}";

OutputStatement:
	{OutputStatement} "OutputStatement" "{" (outputsubstatements+=OutputSubstatement (","
	outputsubstatements+=OutputSubstatement)*)? "}";

IfFeatureStatement:
	{IfFeatureStatement} "IfFeatureStatement" "{" pref=ESTRING? ident=[FeatureStatement]?
	(iffeatureunknownstatements+=UnknownStatement ("," iffeatureunknownstatements+=UnknownStatement)*)? "}";

InputStatement:
	{InputStatement} "InputStatement" "{" (inputsubstatements+=InputSubstatement (","
	inputsubstatements+=InputSubstatement)*)? "}";

ReferenceStatement:
	{ReferenceStatement} "ReferenceStatement" "{" reference=ESTRING? (referenceunknownstatements+=UnknownStatement (","
	referenceunknownstatements+=UnknownStatement)*)? "}";

StatusStatement:
	{StatusStatement} "StatusStatement" "{" status=ESTRING? (statusunknownstatements+=UnknownStatement (","
	statusunknownstatements+=UnknownStatement)*)? "}";

BaseStatement:
	{BaseStatement} "BaseStatement" "{" base=ESTRING? (baseunknownstatements+=UnknownStatement (","
	baseunknownstatements+=UnknownStatement)*)? "}";

DeviateStatement:
	{DeviateStatement} "DeviateStatement" "{" arg=ESTRING? (deviatesubstatements+=DeviateSubstatement (","
	deviatesubstatements+=DeviateSubstatement)*)? "}";

ArgumentStatement:
	{ArgumentStatement} "ArgumentStatement" "{" arg=ESTRING? (argumentsubstatements+=ArgumentSubstatement (","
	argumentsubstatements+=ArgumentSubstatement)*)? "}";

CaseStatement:
	{CaseStatement} "CaseStatement" name=ID? "{" (casesubstatements+=CaseSubstatement (","
	casesubstatements+=CaseSubstatement)*)? "}";

WhenStatement:
	{WhenStatement} "WhenStatement" "{" arg=ESTRING? (whensubstatements+=WhenSubstatements (","
	whensubstatements+=WhenSubstatements)*)? "}";

UnitsStatement:
	{UnitsStatement} "UnitsStatement" "{" arg=ESTRING? (unitsunknownstatements+=UnknownStatement (","
	unitsunknownstatements+=UnknownStatement)*)? "}";

DefaultStatement:
	{DefaultStatement} "DefaultStatement" "{" arg=ESTRING? (defaultunknownstatements+=UnknownStatement (","
	defaultunknownstatements+=UnknownStatement)*)? "}";

LeafListSubstatement:
	UnknownStatement | TypeStatement | OrderedbyStatement | DefaultStatement | MustStatement | WhenStatement |
	UnitsStatement | IfFeatureStatement | MaxElementsStatement | ReferenceStatement | DescriptionStatement |
	MinElementsStatement | StatusStatement | ConfigStatement;

UsesSubstatement:
	WhenStatement | UnknownStatement | IfFeatureStatement | ReferenceStatement | DescriptionStatement | StatusStatement |
	AugmentUsesStatement | RefineStatement;

AnyxmlSubstatement:
	MustStatement | WhenStatement | MandatoryStatement | UnknownStatement | IfFeatureStatement | ReferenceStatement |
	DescriptionStatement | StatusStatement | ConfigStatement;

ContainerSubstatement:
	MustStatement | WhenStatement | DatadefStatement | UnknownStatement | GroupingStatement | TypedefStatement |
	IfFeatureStatement | ReferenceStatement | DescriptionStatement | PresenceStatement | StatusStatement |
	ConfigStatement;

LeafSubstatement:
	MustStatement | WhenStatement | MandatoryStatement | UnitsStatement | UnknownStatement | TypeStatement |
	IfFeatureStatement | ReferenceStatement | DefaultStatement | DescriptionStatement | StatusStatement | ConfigStatement;

ListSubstatement:
	UnknownStatement | TypedefStatement | OrderedbyStatement | UniqueStatement | MustStatement | WhenStatement |
	DatadefStatement | KeyStatement | GroupingStatement | IfFeatureStatement | MaxElementsStatement | ReferenceStatement |
	DescriptionStatement | MinElementsStatement | StatusStatement | ConfigStatement;

ChoiceSubstatement:
	MandatoryStatement | UnknownStatement | ContainerStatement | DefaultStatement | ListStatement | CaseStatement |
	WhenStatement | IfFeatureStatement | ReferenceStatement | DescriptionStatement | StatusStatement | LeafListStatement |
	LeafStatement | ConfigStatement | AnyxmlStatement;

BuiltInType:
	{BuiltInType} "BuiltInType" "{" btype=ESTRING? "}";

TypeSubStatement:
	LengthStatement | PatternStatement | UnknownStatement | RangeStatement | TypeStatement | PathStatement |
	DefaultStatement | FractionDigitsStatement | EnumStatement | BaseStatement | BitStatement | RequireInstanceStatement;

InputSubstatement:
	DatadefStatement | UnknownStatement | GroupingStatement | TypedefStatement;

OutputSubstatement:
	DatadefStatement | UnknownStatement | GroupingStatement | TypedefStatement;

DeviateSubstatement:
	MustStatement | MandatoryStatement | UnitsStatement | UnknownStatement | MaxElementsStatement | DefaultStatement |
	MinElementsStatement | ConfigStatement | UniqueStatement;

ArgumentSubstatement:
	UnknownStatement | YinElementStatement;

WhenSubstatements:
	UnknownStatement | ReferenceStatement | DescriptionStatement;

CaseSubstatement:
	WhenStatement | DatadefStatement | UnknownStatement | IfFeatureStatement | ReferenceStatement | DescriptionStatement |
	StatusStatement;

MinElementsStatement:
	{MinElementsStatement} "MinElementsStatement" "{" arg=ESTRING? (minelementsunknownstatements+=UnknownStatement (","
	minelementsunknownstatements+=UnknownStatement)*)? "}";

MustStatement:
	{MustStatement} "MustStatement" "{" arg=ESTRING? (mustsubstatements+=MultipleSubstatement (","
	mustsubstatements+=MultipleSubstatement)*)? "}";

ConfigStatement:
	{ConfigStatement} "ConfigStatement" "{" boolarg=ESTRING? (configunknownstatements+=UnknownStatement (","
	configunknownstatements+=UnknownStatement)*)? "}";

OrderedbyStatement:
	{OrderedbyStatement} "OrderedbyStatement" "{" arg=ESTRING? (orderedbyunknownstatements+=UnknownStatement (","
	orderedbyunknownstatements+=UnknownStatement)*)? "}";

MaxElementsStatement:
	{MaxElementsStatement} "MaxElementsStatement" "{" arg=ESTRING? (maxelementsunknownstatements+=UnknownStatement (","
	maxelementsunknownstatements+=UnknownStatement)*)? "}";

AugmentUsesStatement:
	{AugmentUsesStatement} "AugmentUsesStatement" "{" arg=ESTRING? (augmentsubstatements+=AugmentSubstatement (","
	augmentsubstatements+=AugmentSubstatement)*)? "}";

RefineStatement:
	{RefineStatement} "RefineStatement" "{" arg=ESTRING? (refinesubstatements+=RefineSubstatement (","
	refinesubstatements+=RefineSubstatement)*)? "}";

MandatoryStatement:
	{MandatoryStatement} "MandatoryStatement" "{" boolarg=ESTRING? (mandatoryunknownstatements+=UnknownStatement (","
	mandatoryunknownstatements+=UnknownStatement)*)? "}";

PresenceStatement:
	{PresenceStatement} "PresenceStatement" "{" arg=ESTRING? (presenceunknownstatements+=UnknownStatement (","
	presenceunknownstatements+=UnknownStatement)*)? "}";

KeyStatement:
	{KeyStatement} "KeyStatement" "{" arg=ESTRING? (keyunknownstatements+=UnknownStatement (","
	keyunknownstatements+=UnknownStatement)*)? "}";

UniqueStatement:
	{UniqueStatement} "UniqueStatement" "{" arg=ESTRING? (uniqueunknownstatements+=UnknownStatement (","
	uniqueunknownstatements+=UnknownStatement)*)? "}";

LengthStatement:
	{LengthStatement} "LengthStatement" "{" length=ESTRING? (lengthsubstatements+=MultipleSubstatement (","
	lengthsubstatements+=MultipleSubstatement)*)? "}";

PatternStatement:
	{PatternStatement} "PatternStatement" name=ID? "{" (patternsubstatements+=MultipleSubstatement (","
	patternsubstatements+=MultipleSubstatement)*)? "}";

PathStatement:
	{PathStatement} "PathStatement" "{" path=ESTRING? (pathunknownstatements+=UnknownStatement (","
	pathunknownstatements+=UnknownStatement)*)? "}";

FractionDigitsStatement:
	{FractionDigitsStatement} "FractionDigitsStatement" "{" arg=ESTRING?
	(fractiondigitsunknownstatements+=UnknownStatement ("," fractiondigitsunknownstatements+=UnknownStatement)*)? "}";

RangeStatement:
	{RangeStatement} "RangeStatement" "{" range=ESTRING? (rangesubstatements+=MultipleSubstatement (","
	rangesubstatements+=MultipleSubstatement)*)? "}";

BitStatement:
	{BitStatement} "BitStatement" name=ID? "{" (bitsubstatements+=BitSubstatement (","
	bitsubstatements+=BitSubstatement)*)? "}";

RequireInstanceStatement:
	{RequireInstanceStatement} "RequireInstanceStatement" "{" require=ESTRING? (requireunknownstatements+=UnknownStatement
	("," requireunknownstatements+=UnknownStatement)*)? "}";

EnumStatement:
	{EnumStatement} "EnumStatement" name=ID? "{" (enumsubstatements+=EnumSubstatement (","
	enumsubstatements+=EnumSubstatement)*)? "}";

MultipleSubstatement:
	UnknownStatement | ErrorAppTagStatement | ReferenceStatement | DescriptionStatement | ErrorMessageStatement;

YinElementStatement:
	{YinElementStatement} "YinElementStatement" "{" boolarg=ESTRING? (yinelementunknownstatements+=UnknownStatement (","
	yinelementunknownstatements+=UnknownStatement)*)? "}";

RefineSubstatement:
	MustStatement | MandatoryStatement | UnknownStatement | MaxElementsStatement | ReferenceStatement | DefaultStatement |
	DescriptionStatement | PresenceStatement | MinElementsStatement | ConfigStatement;

EnumSubstatement:
	UnknownStatement | ValueStatement | ReferenceStatement | DescriptionStatement | StatusStatement;

BitSubstatement:
	PositionStatement | UnknownStatement | ReferenceStatement | DescriptionStatement | StatusStatement;

ErrorMessageStatement:
	{ErrorMessageStatement} "ErrorMessageStatement" "{" arg=ESTRING? (errormunknownstatements+=UnknownStatement (","
	errormunknownstatements+=UnknownStatement)*)? "}";

ErrorAppTagStatement:
	{ErrorAppTagStatement} "ErrorAppTagStatement" "{" arg=ESTRING? (erroraunknownstatements+=UnknownStatement (","
	erroraunknownstatements+=UnknownStatement)*)? "}";

ValueStatement:
	{ValueStatement} "ValueStatement" "{" intarg=ESTRING? (valueunknownstatements+=UnknownStatement (","
	valueunknownstatements+=UnknownStatement)*)? "}";

PositionStatement:
	{PositionStatement} "PositionStatement" "{" intarg=ESTRING? (positionunknownstatements+=UnknownStatement (","
	positionunknownstatements+=UnknownStatement)*)? "}";

terminal ID:
	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;