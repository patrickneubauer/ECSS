// automatically generated by ECSS
grammar trglang.com.puppetlabs.geppetto.pp.dsl1.PP

import "http://www.puppetlabs.com/geppetto/1.0.0/PP1"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TextExpression:
	ExpressionTE | VerbatimTE | VariableTE;

VerbatimTE:
	{VerbatimTE} "VerbatimTE" "{" text=ESTRING? "}";

ExpressionTE:
	{ExpressionTE} "ExpressionTE" "{" expression=Expression? "}";

VariableTE:
	{VariableTE} "VariableTE" "{" varName=ESTRING? "}";

terminal ESTRING:
	"\"" ("\\" . | !("\\" | "\""))* "\"" | "\'" ("\\" . | !("\\" | "\'"))* "\'";

Expression:
	InterpolatedVariable | UnlessExpression | UnaryExpression | VariableExpression | BinaryExpression | Definition |
	CollectExpression | ParenthesisedExpression | SeparatorExpression | LiteralExpression | ExpressionBlock |
	ImportExpression | NodeDefinition | ExprList | IfExpression | ResourceExpression | ParameterizedExpression |
	CaseExpression | StringExpression;

CollectExpression:
	{CollectExpression} "CollectExpression" "{" classReference=Expression? query=ICollectQuery?
	attributes=AttributeOperations? "}";

IfExpression:
	ElseIfExpression;

CaseExpression:
	{CaseExpression} "CaseExpression" "{" switchExpr=Expression? (cases+=Case ("," cases+=Case)*)? "}";

InterpolatedVariable:
	{InterpolatedVariable} "InterpolatedVariable" "{" varName=ESTRING? "}";

LiteralExpression:
	LiteralNameOrReference | LiteralName | LiteralUndef | LiteralList | LiteralHash | VirtualNameOrReference |
	LiteralClass | LiteralBoolean | LiteralRegex | LiteralDefault;

ExpressionBlock:
	Lambda | ElseExpression | PuppetManifest;

ExprList:
	{ExprList} "ExprList" "{" (expressions+=Expression ("," expressions+=Expression)*)? "}";

Definition:
	HostClassDefinition;

StringExpression:
	DoubleQuotedString | SingleQuotedString | UnquotedString;

VariableExpression:
	{VariableExpression} "VariableExpression" "{" varName=ESTRING? "}";

ParenthesisedExpression:
	{ParenthesisedExpression} "ParenthesisedExpression" "{" expr=Expression? "}";

ImportExpression:
	{ImportExpression} "ImportExpression" "{" (values+=IQuotedString ("," values+=IQuotedString)*)? "}";

ResourceExpression:
	{ResourceExpression} "ResourceExpression" "{" resourceExpr=Expression? (resourceData+=ResourceBody (","
	resourceData+=ResourceBody)*)? "}";

NodeDefinition:
	{NodeDefinition} "NodeDefinition" "{" (hostNames+=Expression ("," hostNames+=Expression)*)? parentName=Expression?
	(statements+=Expression ("," statements+=Expression)*)? "}";

UnlessExpression:
	{UnlessExpression} "UnlessExpression" "{" condExpr=Expression? (thenStatements+=Expression (","
	thenStatements+=Expression)*)? elseStatement=Expression? "}";

BinaryExpression:
	SelectorEntry | AppendExpression | AndExpression | BinaryOpExpression | OrExpression | AssignmentExpression |
	NamedAccessExpression;

SeparatorExpression:
	{SeparatorExpression} "SeparatorExpression" "{" "}";

UnaryExpression:
	VirtualCollectQuery | ExportedCollectQuery | UnaryMinusExpression | UnaryNotExpression;

ParameterizedExpression:
	SelectorExpression | AtExpression | WithLambdaExpression;

SelectorExpression:
	{SelectorExpression} "SelectorExpression" "{" leftExpr=Expression? (parameters+=Expression (","
	parameters+=Expression)*)? "}";

AtExpression:
	{AtExpression} "AtExpression" "{" leftExpr=Expression? (parameters+=Expression ("," parameters+=Expression)*)? "}";

WithLambdaExpression:
	MethodCall | FunctionCall;

UnaryMinusExpression:
	{UnaryMinusExpression} "UnaryMinusExpression" "{" expr=Expression? "}";

UnaryNotExpression:
	{UnaryNotExpression} "UnaryNotExpression" "{" expr=Expression? "}";

VirtualCollectQuery:
	{VirtualCollectQuery} "VirtualCollectQuery" "{" expr=Expression? "}";

ExportedCollectQuery:
	{ExportedCollectQuery} "ExportedCollectQuery" "{" expr=Expression? "}";

OrExpression:
	{OrExpression} "OrExpression" "{" leftExpr=Expression? rightExpr=Expression? "}";

SelectorEntry:
	{SelectorEntry} "SelectorEntry" "{" leftExpr=Expression? rightExpr=Expression? "}";

NamedAccessExpression:
	{NamedAccessExpression} "NamedAccessExpression" "{" leftExpr=Expression? rightExpr=Expression? "}";

AppendExpression:
	{AppendExpression} "AppendExpression" "{" leftExpr=Expression? rightExpr=Expression? "}";

AndExpression:
	{AndExpression} "AndExpression" "{" leftExpr=Expression? rightExpr=Expression? "}";

AssignmentExpression:
	{AssignmentExpression} "AssignmentExpression" "{" leftExpr=Expression? rightExpr=Expression? "}";

BinaryOpExpression:
	RelationshipExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | MatchingExpression |
	InExpression | RelationalExpression | EqualityExpression;

ResourceBody:
	{ResourceBody} "ResourceBody" "{" attributes=AttributeOperations? nameExpr=Expression? "}";

IQuotedString:
	DoubleQuotedString | SingleQuotedString;

SingleQuotedString:
	{SingleQuotedString} "SingleQuotedString" "{" text=ESTRING? "}";

DoubleQuotedString:
	{DoubleQuotedString} "DoubleQuotedString" "{" (stringPart+=TextExpression ("," stringPart+=TextExpression)*)? "}";

UnquotedString:
	{UnquotedString} "UnquotedString" "{" expression=Expression? "}";

HostClassDefinition:
	{HostClassDefinition} "HostClassDefinition" "{" className=ESTRING? arguments=DefinitionArgumentList?
	(statements+=Expression ("," statements+=Expression)*)? parent=LiteralExpression? "}";

PuppetManifest:
	{PuppetManifest} "PuppetManifest" "{" (statements+=Expression ("," statements+=Expression)*)? "}";

ElseExpression:
	{ElseExpression} "ElseExpression" "{" (statements+=Expression ("," statements+=Expression)*)? "}";

Lambda:
	JavaLambda | RubyLambda;

LiteralDefault:
	{LiteralDefault} "LiteralDefault" "{" "}";

LiteralNameOrReference:
	{LiteralNameOrReference} "LiteralNameOrReference" "{" value=ESTRING? "}";

LiteralList:
	{LiteralList} "LiteralList" "{" (elements+=Expression ("," elements+=Expression)*)? "}";

LiteralRegex:
	{LiteralRegex} "LiteralRegex" "{" value=ESTRING? "}";

LiteralName:
	{LiteralName} "LiteralName" "{" value=ESTRING? "}";

LiteralClass:
	{LiteralClass} "LiteralClass" "{" "}";

LiteralUndef:
	{LiteralUndef} "LiteralUndef" "{" "}";

LiteralHash:
	{LiteralHash} "LiteralHash" "{" (elements+=HashEntry ("," elements+=HashEntry)*)? "}";

VirtualNameOrReference:
	{VirtualNameOrReference} "VirtualNameOrReference" "{" value=ESTRING? exported?=EBOOLEAN? "}";

LiteralBoolean:
	{LiteralBoolean} "LiteralBoolean" "{" value?=EBOOLEAN? "}";

Case:
	{Case} "Case" "{" (statements+=Expression ("," statements+=Expression)*)? (values+=Expression (","
	values+=Expression)*)? "}";

ElseIfExpression:
	{ElseIfExpression} "ElseIfExpression" "{" condExpr=Expression? (thenStatements+=Expression (","
	thenStatements+=Expression)*)? elseStatement=Expression? "}";

AttributeOperations:
	{AttributeOperations} "AttributeOperations" "{" (attributes+=AttributeOperation (","
	attributes+=AttributeOperation)*)? "}";

ICollectQuery:
	VirtualCollectQuery | ExportedCollectQuery;

FunctionCall:
	{FunctionCall} "FunctionCall" "{" leftExpr=Expression? (parameters+=Expression ("," parameters+=Expression)*)?
	lambda=Lambda? "}";

MethodCall:
	{MethodCall} "MethodCall" "{" leftExpr=Expression? (parameters+=Expression ("," parameters+=Expression)*)?
	lambda=Lambda? parenthesized?=EBOOLEAN? methodExpr=Expression "}";

RelationshipExpression:
	{RelationshipExpression} "RelationshipExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

ShiftExpression:
	{ShiftExpression} "ShiftExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

MultiplicativeExpression:
	{MultiplicativeExpression} "MultiplicativeExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING?
	"}";

MatchingExpression:
	{MatchingExpression} "MatchingExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

EqualityExpression:
	{EqualityExpression} "EqualityExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

RelationalExpression:
	{RelationalExpression} "RelationalExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

AdditiveExpression:
	{AdditiveExpression} "AdditiveExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

InExpression:
	{InExpression} "InExpression" "{" leftExpr=Expression? rightExpr=Expression? opName=ESTRING? "}";

AttributeOperation:
	{AttributeOperation} "AttributeOperation" "{" value=Expression? key=ESTRING? op=ESTRING? "}";

DefinitionArgumentList:
	{DefinitionArgumentList} "DefinitionArgumentList" "{" (arguments+=DefinitionArgument (","
	arguments+=DefinitionArgument)*)? "}";

JavaLambda:
	{JavaLambda} "JavaLambda" "{" (statements+=Expression ("," statements+=Expression)*)?
	arguments=DefinitionArgumentList? farrow?=EBOOLEAN? "}";

RubyLambda:
	{RubyLambda} "RubyLambda" "{" (statements+=Expression ("," statements+=Expression)*)?
	arguments=DefinitionArgumentList? "}";

terminal EBOOLEAN returns ecore::EBoolean:
	"true" | "false";

HashEntry:
	{HashEntry} "HashEntry" "{" key=Expression? value=Expression? "}";

DefinitionArgument:
	{DefinitionArgument} "DefinitionArgument" "{" argName=ESTRING? value=Expression? op=ESTRING? "}";

IDDT:
	EBOOLEAN | ID;

terminal ID:
	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
