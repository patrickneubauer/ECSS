// automatically generated by Xtext
grammar deflang.rethink.uml.ClassDiagram with org.eclipse.xtext.common.Terminals

import "http://www.uml.rethink/ClassDiagram" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainModel returns DomainModel:
	{DomainModel}
	'DomainModel'
	'{'
		('file' file=EString)?
		('packages' '{' packages+=CPackage ( "," packages+=CPackage)* '}' )?
	'}';


Element returns Element:
	Element_Impl | Node_Impl | Entity_Impl | CPackage | Relation | Enumer | Clazz | Note;

Node returns Node:
	Node_Impl | Entity_Impl | CPackage | Enumer | Clazz | Note;



Entity returns Entity:
	Entity_Impl | Enumer | Clazz;




EString returns ecore::EString:
	STRING | ID;

CPackage returns CPackage:
	{CPackage}
	'CPackage'
	name=EString
	'{'
		('style' style=PackageStyle)?
		('elements' '{' elements+=Element ( "," elements+=Element)* '}' )?
	'}';

enum PackageStyle returns PackageStyle:
				Node = 'Node' | Rect = 'Rect' | Folder = 'Folder' | Frame = 'Frame' | Cloud = 'Cloud' | Database = 'Database';

Element_Impl returns Element:
	{Element}
	'Element'
	name=EString;

Node_Impl returns Node:
	{Node}
	'Node'
	name=EString;

Entity_Impl returns Entity:
	{Entity}
	'Entity'
	name=EString;

Relation returns Relation:
	{Relation}
	'Relation'
	name=EString
	'{'
		('leftRef' leftRef=[Node|EString])?
		('rightRef' rightRef=[Node|EString])?
		('relType' relType=RelationParse)?
	'}';

Enumer returns Enumer:
	{Enumer}
	'Enumer'
	name=EString
	'{'
		('types' '{' types+=EString ( "," types+=EString)* '}' )?
	'}';

Clazz returns Clazz:
	{Clazz}
	'Clazz'
	name=EString
	'{'
		('stereotype' stereotype=EString)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
	'}';

Note returns Note:
	{Note}
	'Note'
	name=EString
	'{'
		('position' position=NotePosition)?
		('value' value=EString)?
		('of' of=[Entity|EString])?
	'}';

RelationParse returns RelationParse:
	{RelationParse}
	(direct?='direct')?
	(ext?='ext')?
	'RelationParse'
	'{'
		('comp' comp=CompType)?
		('multi' multi=EString)?
		('type' type=RelationType)?
	'}';

enum CompType returns CompType:
				none = 'none' | comp = 'comp' | agre = 'agre';

RelationType returns RelationType:
	{RelationType}
	(strong?='strong')?
	(weak?='weak')?
	'RelationType'
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Property returns Property:
	{Property}
	(optional?='optional')?
	(constant?='constant')?
	'Property'
	name=EString
	'{'
		('value' value=EString)?
		('type' type=DataType)?
		('entityList' entityList=EntityList)?
	'}';

DataType returns DataType:
	{DataType}
	(isArray?='isArray')?
	'DataType'
	'{'
		('native' native=NativeType)?
		('entity' entity=[Entity|EString])?
	'}';

EntityList returns EntityList:
	{EntityList}
	'EntityList'
	'{'
		('refs' '(' refs+=[Entity|EString] ( "," refs+=[Entity|EString])* ')' )?
	'}';

enum NativeType returns NativeType:
				string = 'string' | number = 'number' | integer = 'integer' | boolean = 'boolean' | date = 'date' | object = 'object';

enum NotePosition returns NotePosition:
				top = 'top' | bottom = 'bottom' | left = 'left' | right = 'right';
