// automatically generated by Xtext
grammar deflang.com.puppetlabs.geppetto.pp.dsl1.PP with org.eclipse.xtext.common.Terminals

import "http://www.puppetlabs.com/geppetto/1.0.0/PP1" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

PuppetManifest returns PuppetManifest:
	{PuppetManifest}
	'PuppetManifest'
	'{'
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
	'}';

Expression returns Expression:
	Expression_Impl | PuppetManifest | VirtualCollectQuery | ExportedCollectQuery | HostClassDefinition | Definition_Impl | CaseExpression | IfExpression_Impl | LiteralNameOrReference | ResourceExpression | ImportExpression | LiteralList | LiteralHash | LiteralBoolean | LiteralUndef | LiteralDefault | LiteralRegex | LiteralName | VariableExpression | RelationshipExpression | AssignmentExpression | AppendExpression | OrExpression | AndExpression | RelationalExpression | EqualityExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | MatchingExpression | InExpression | AtExpression | CollectExpression | SelectorExpression | SelectorEntry | FunctionCall | NodeDefinition | UnaryMinusExpression | UnaryNotExpression | ElseExpression | ElseIfExpression | VirtualNameOrReference | ParenthesisedExpression | ExprList | DoubleQuotedString | SingleQuotedString | UnquotedString | InterpolatedVariable | LiteralClass | UnlessExpression | NamedAccessExpression | MethodCall | WithLambdaExpression_Impl | JavaLambda | RubyLambda | SeparatorExpression;


LiteralExpression returns LiteralExpression:
	LiteralNameOrReference | LiteralList | LiteralHash | LiteralBoolean | LiteralUndef | LiteralDefault | LiteralRegex | LiteralName | VirtualNameOrReference | LiteralClass;



IQuotedString returns IQuotedString:
	DoubleQuotedString | SingleQuotedString;


ICollectQuery returns ICollectQuery:
	VirtualCollectQuery | ExportedCollectQuery;


Lambda returns Lambda:
	JavaLambda | RubyLambda;

TextExpression returns TextExpression:
	VerbatimTE | ExpressionTE | VariableTE;



Expression_Impl returns Expression:
	{Expression}
	'Expression'
	;

VirtualCollectQuery returns VirtualCollectQuery:
	{VirtualCollectQuery}
	'VirtualCollectQuery'
	'{'
		('expr' expr=Expression)?
	'}';

ExportedCollectQuery returns ExportedCollectQuery:
	{ExportedCollectQuery}
	'ExportedCollectQuery'
	'{'
		('expr' expr=Expression)?
	'}';

HostClassDefinition returns HostClassDefinition:
	{HostClassDefinition}
	'HostClassDefinition'
	'{'
		('className' className=EString)?
		('arguments' arguments=DefinitionArgumentList)?
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
		('parent' parent=LiteralExpression)?
	'}';

Definition_Impl returns Definition:
	{Definition}
	'Definition'
	'{'
		('className' className=EString)?
		('arguments' arguments=DefinitionArgumentList)?
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
	'}';

CaseExpression returns CaseExpression:
	{CaseExpression}
	'CaseExpression'
	'{'
		('switchExpr' switchExpr=Expression)?
		('cases' '{' cases+=Case ( "," cases+=Case)* '}' )?
	'}';

IfExpression_Impl returns IfExpression:
	{IfExpression}
	'IfExpression'
	'{'
		('condExpr' condExpr=Expression)?
		('thenStatements' '{' thenStatements+=Expression ( "," thenStatements+=Expression)* '}' )?
		('elseStatement' elseStatement=Expression)?
	'}';

LiteralNameOrReference returns LiteralNameOrReference:
	{LiteralNameOrReference}
	'LiteralNameOrReference'
	'{'
		('value' value=EString)?
	'}';

ResourceExpression returns ResourceExpression:
	{ResourceExpression}
	'ResourceExpression'
	'{'
		('resourceExpr' resourceExpr=Expression)?
		('resourceData' '{' resourceData+=ResourceBody ( "," resourceData+=ResourceBody)* '}' )?
	'}';

ImportExpression returns ImportExpression:
	{ImportExpression}
	'ImportExpression'
	'{'
		('values' '{' values+=IQuotedString ( "," values+=IQuotedString)* '}' )?
	'}';

LiteralList returns LiteralList:
	{LiteralList}
	'LiteralList'
	'{'
		('elements' '{' elements+=Expression ( "," elements+=Expression)* '}' )?
	'}';

LiteralHash returns LiteralHash:
	{LiteralHash}
	'LiteralHash'
	'{'
		('elements' '{' elements+=HashEntry ( "," elements+=HashEntry)* '}' )?
	'}';

LiteralBoolean returns LiteralBoolean:
	{LiteralBoolean}
	(value?='value')?
	'LiteralBoolean'
	;

LiteralUndef returns LiteralUndef:
	{LiteralUndef}
	'LiteralUndef'
	;

LiteralDefault returns LiteralDefault:
	{LiteralDefault}
	'LiteralDefault'
	;

LiteralRegex returns LiteralRegex:
	{LiteralRegex}
	'LiteralRegex'
	'{'
		('value' value=EString)?
	'}';

LiteralName returns LiteralName:
	{LiteralName}
	'LiteralName'
	'{'
		('value' value=EString)?
	'}';

VariableExpression returns VariableExpression:
	{VariableExpression}
	'VariableExpression'
	'{'
		('varName' varName=EString)?
	'}';

RelationshipExpression returns RelationshipExpression:
	{RelationshipExpression}
	'RelationshipExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

AssignmentExpression returns AssignmentExpression:
	{AssignmentExpression}
	'AssignmentExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

AppendExpression returns AppendExpression:
	{AppendExpression}
	'AppendExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

OrExpression returns OrExpression:
	{OrExpression}
	'OrExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

AndExpression returns AndExpression:
	{AndExpression}
	'AndExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

RelationalExpression returns RelationalExpression:
	{RelationalExpression}
	'RelationalExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

EqualityExpression returns EqualityExpression:
	{EqualityExpression}
	'EqualityExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

ShiftExpression returns ShiftExpression:
	{ShiftExpression}
	'ShiftExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

AdditiveExpression returns AdditiveExpression:
	{AdditiveExpression}
	'AdditiveExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

MultiplicativeExpression returns MultiplicativeExpression:
	{MultiplicativeExpression}
	'MultiplicativeExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

MatchingExpression returns MatchingExpression:
	{MatchingExpression}
	'MatchingExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

InExpression returns InExpression:
	{InExpression}
	'InExpression'
	'{'
		('opName' opName=EString)?
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

AtExpression returns AtExpression:
	{AtExpression}
	'AtExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

CollectExpression returns CollectExpression:
	{CollectExpression}
	'CollectExpression'
	'{'
		('classReference' classReference=Expression)?
		('query' query=ICollectQuery)?
		('attributes' attributes=AttributeOperations)?
	'}';

SelectorExpression returns SelectorExpression:
	{SelectorExpression}
	'SelectorExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

SelectorEntry returns SelectorEntry:
	{SelectorEntry}
	'SelectorEntry'
	'{'
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

FunctionCall returns FunctionCall:
	{FunctionCall}
	'FunctionCall'
	'{'
		('leftExpr' leftExpr=Expression)?
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
		('lambda' lambda=Lambda)?
	'}';

NodeDefinition returns NodeDefinition:
	{NodeDefinition}
	'NodeDefinition'
	'{'
		('hostNames' '{' hostNames+=Expression ( "," hostNames+=Expression)* '}' )?
		('parentName' parentName=Expression)?
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
	'}';

UnaryMinusExpression returns UnaryMinusExpression:
	{UnaryMinusExpression}
	'UnaryMinusExpression'
	'{'
		('expr' expr=Expression)?
	'}';

UnaryNotExpression returns UnaryNotExpression:
	{UnaryNotExpression}
	'UnaryNotExpression'
	'{'
		('expr' expr=Expression)?
	'}';

ElseExpression returns ElseExpression:
	{ElseExpression}
	'ElseExpression'
	'{'
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
	'}';

ElseIfExpression returns ElseIfExpression:
	{ElseIfExpression}
	'ElseIfExpression'
	'{'
		('condExpr' condExpr=Expression)?
		('thenStatements' '{' thenStatements+=Expression ( "," thenStatements+=Expression)* '}' )?
		('elseStatement' elseStatement=Expression)?
	'}';

VirtualNameOrReference returns VirtualNameOrReference:
	{VirtualNameOrReference}
	(exported?='exported')?
	'VirtualNameOrReference'
	'{'
		('value' value=EString)?
	'}';

ParenthesisedExpression returns ParenthesisedExpression:
	{ParenthesisedExpression}
	'ParenthesisedExpression'
	'{'
		('expr' expr=Expression)?
	'}';

ExprList returns ExprList:
	{ExprList}
	'ExprList'
	'{'
		('expressions' '{' expressions+=Expression ( "," expressions+=Expression)* '}' )?
	'}';

DoubleQuotedString returns DoubleQuotedString:
	{DoubleQuotedString}
	'DoubleQuotedString'
	'{'
		('stringPart' '{' stringPart+=TextExpression ( "," stringPart+=TextExpression)* '}' )?
	'}';

SingleQuotedString returns SingleQuotedString:
	{SingleQuotedString}
	'SingleQuotedString'
	'{'
		('text' text=EString)?
	'}';

UnquotedString returns UnquotedString:
	{UnquotedString}
	'UnquotedString'
	'{'
		('expression' expression=Expression)?
	'}';

InterpolatedVariable returns InterpolatedVariable:
	{InterpolatedVariable}
	'InterpolatedVariable'
	'{'
		('varName' varName=EString)?
	'}';

LiteralClass returns LiteralClass:
	{LiteralClass}
	'LiteralClass'
	;

UnlessExpression returns UnlessExpression:
	{UnlessExpression}
	'UnlessExpression'
	'{'
		('condExpr' condExpr=Expression)?
		('thenStatements' '{' thenStatements+=Expression ( "," thenStatements+=Expression)* '}' )?
		('elseStatement' elseStatement=Expression)?
	'}';

NamedAccessExpression returns NamedAccessExpression:
	{NamedAccessExpression}
	'NamedAccessExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('rightExpr' rightExpr=Expression)?
	'}';

MethodCall returns MethodCall:
	(parenthesized?='parenthesized')?
	'MethodCall'
	'{'
		('leftExpr' leftExpr=Expression)?
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
		('lambda' lambda=Lambda)?
		'methodExpr' methodExpr=Expression
	'}';

WithLambdaExpression_Impl returns WithLambdaExpression:
	{WithLambdaExpression}
	'WithLambdaExpression'
	'{'
		('leftExpr' leftExpr=Expression)?
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
		('lambda' lambda=Lambda)?
	'}';

JavaLambda returns JavaLambda:
	{JavaLambda}
	(farrow?='farrow')?
	'JavaLambda'
	'{'
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
		('arguments' arguments=DefinitionArgumentList)?
	'}';

RubyLambda returns RubyLambda:
	{RubyLambda}
	'RubyLambda'
	'{'
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
		('arguments' arguments=DefinitionArgumentList)?
	'}';

SeparatorExpression returns SeparatorExpression:
	{SeparatorExpression}
	'SeparatorExpression'
	;

EString returns ecore::EString:
	STRING | ID;

DefinitionArgumentList returns DefinitionArgumentList:
	{DefinitionArgumentList}
	'DefinitionArgumentList'
	'{'
		('arguments' '{' arguments+=DefinitionArgument ( "," arguments+=DefinitionArgument)* '}' )?
	'}';

DefinitionArgument returns DefinitionArgument:
	{DefinitionArgument}
	'DefinitionArgument'
	'{'
		('argName' argName=EString)?
		('op' op=EString)?
		('value' value=Expression)?
	'}';

Case returns Case:
	{Case}
	'Case'
	'{'
		('statements' '{' statements+=Expression ( "," statements+=Expression)* '}' )?
		('values' '{' values+=Expression ( "," values+=Expression)* '}' )?
	'}';

ResourceBody returns ResourceBody:
	{ResourceBody}
	'ResourceBody'
	'{'
		('attributes' attributes=AttributeOperations)?
		('nameExpr' nameExpr=Expression)?
	'}';

AttributeOperations returns AttributeOperations:
	{AttributeOperations}
	'AttributeOperations'
	'{'
		('attributes' '{' attributes+=AttributeOperation ( "," attributes+=AttributeOperation)* '}' )?
	'}';

AttributeOperation returns AttributeOperation:
	{AttributeOperation}
	'AttributeOperation'
	'{'
		('key' key=EString)?
		('op' op=EString)?
		('value' value=Expression)?
	'}';

HashEntry returns HashEntry:
	{HashEntry}
	'HashEntry'
	'{'
		('key' key=Expression)?
		('value' value=Expression)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

VerbatimTE returns VerbatimTE:
	{VerbatimTE}
	'VerbatimTE'
	'{'
		('text' text=EString)?
	'}';

ExpressionTE returns ExpressionTE:
	{ExpressionTE}
	'ExpressionTE'
	'{'
		('expression' expression=Expression)?
	'}';

VariableTE returns VariableTE:
	{VariableTE}
	'VariableTE'
	'{'
		('varName' varName=EString)?
	'}';
