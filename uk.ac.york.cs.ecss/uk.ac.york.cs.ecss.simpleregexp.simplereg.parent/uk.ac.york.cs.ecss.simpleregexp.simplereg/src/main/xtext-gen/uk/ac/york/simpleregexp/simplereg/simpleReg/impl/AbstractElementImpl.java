/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.simpleregexp.simplereg.simpleReg.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.york.simpleregexp.simplereg.simpleReg.AbstractElement;
import uk.ac.york.simpleregexp.simplereg.simpleReg.SimpleRegPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Abstract Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.simpleregexp.simplereg.simpleReg.impl.AbstractElementImpl#getCardinality <em>Cardinality</em>}</li>
 *   <li>{@link uk.ac.york.simpleregexp.simplereg.simpleReg.impl.AbstractElementImpl#isHasMinCard <em>Has Min Card</em>}</li>
 *   <li>{@link uk.ac.york.simpleregexp.simplereg.simpleReg.impl.AbstractElementImpl#getMinCardinality <em>Min Cardinality</em>}</li>
 *   <li>{@link uk.ac.york.simpleregexp.simplereg.simpleReg.impl.AbstractElementImpl#isHasMaxCard <em>Has Max Card</em>}</li>
 *   <li>{@link uk.ac.york.simpleregexp.simplereg.simpleReg.impl.AbstractElementImpl#getMaxCardinality <em>Max Cardinality</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbstractElementImpl extends MinimalEObjectImpl.Container implements AbstractElement
{
  /**
   * The default value of the '{@link #getCardinality() <em>Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCardinality()
   * @generated
   * @ordered
   */
  protected static final String CARDINALITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCardinality() <em>Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCardinality()
   * @generated
   * @ordered
   */
  protected String cardinality = CARDINALITY_EDEFAULT;

  /**
   * The default value of the '{@link #isHasMinCard() <em>Has Min Card</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasMinCard()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_MIN_CARD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasMinCard() <em>Has Min Card</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasMinCard()
   * @generated
   * @ordered
   */
  protected boolean hasMinCard = HAS_MIN_CARD_EDEFAULT;

  /**
   * The default value of the '{@link #getMinCardinality() <em>Min Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinCardinality()
   * @generated
   * @ordered
   */
  protected static final int MIN_CARDINALITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMinCardinality() <em>Min Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinCardinality()
   * @generated
   * @ordered
   */
  protected int minCardinality = MIN_CARDINALITY_EDEFAULT;

  /**
   * The default value of the '{@link #isHasMaxCard() <em>Has Max Card</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasMaxCard()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_MAX_CARD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasMaxCard() <em>Has Max Card</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasMaxCard()
   * @generated
   * @ordered
   */
  protected boolean hasMaxCard = HAS_MAX_CARD_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxCardinality() <em>Max Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxCardinality()
   * @generated
   * @ordered
   */
  protected static final int MAX_CARDINALITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaxCardinality() <em>Max Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxCardinality()
   * @generated
   * @ordered
   */
  protected int maxCardinality = MAX_CARDINALITY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbstractElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpleRegPackage.Literals.ABSTRACT_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCardinality()
  {
    return cardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCardinality(String newCardinality)
  {
    String oldCardinality = cardinality;
    cardinality = newCardinality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleRegPackage.ABSTRACT_ELEMENT__CARDINALITY, oldCardinality, cardinality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHasMinCard()
  {
    return hasMinCard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHasMinCard(boolean newHasMinCard)
  {
    boolean oldHasMinCard = hasMinCard;
    hasMinCard = newHasMinCard;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MIN_CARD, oldHasMinCard, hasMinCard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMinCardinality()
  {
    return minCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinCardinality(int newMinCardinality)
  {
    int oldMinCardinality = minCardinality;
    minCardinality = newMinCardinality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleRegPackage.ABSTRACT_ELEMENT__MIN_CARDINALITY, oldMinCardinality, minCardinality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHasMaxCard()
  {
    return hasMaxCard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHasMaxCard(boolean newHasMaxCard)
  {
    boolean oldHasMaxCard = hasMaxCard;
    hasMaxCard = newHasMaxCard;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MAX_CARD, oldHasMaxCard, hasMaxCard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMaxCardinality()
  {
    return maxCardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxCardinality(int newMaxCardinality)
  {
    int oldMaxCardinality = maxCardinality;
    maxCardinality = newMaxCardinality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleRegPackage.ABSTRACT_ELEMENT__MAX_CARDINALITY, oldMaxCardinality, maxCardinality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpleRegPackage.ABSTRACT_ELEMENT__CARDINALITY:
        return getCardinality();
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MIN_CARD:
        return isHasMinCard();
      case SimpleRegPackage.ABSTRACT_ELEMENT__MIN_CARDINALITY:
        return getMinCardinality();
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MAX_CARD:
        return isHasMaxCard();
      case SimpleRegPackage.ABSTRACT_ELEMENT__MAX_CARDINALITY:
        return getMaxCardinality();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpleRegPackage.ABSTRACT_ELEMENT__CARDINALITY:
        setCardinality((String)newValue);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MIN_CARD:
        setHasMinCard((Boolean)newValue);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__MIN_CARDINALITY:
        setMinCardinality((Integer)newValue);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MAX_CARD:
        setHasMaxCard((Boolean)newValue);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__MAX_CARDINALITY:
        setMaxCardinality((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpleRegPackage.ABSTRACT_ELEMENT__CARDINALITY:
        setCardinality(CARDINALITY_EDEFAULT);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MIN_CARD:
        setHasMinCard(HAS_MIN_CARD_EDEFAULT);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__MIN_CARDINALITY:
        setMinCardinality(MIN_CARDINALITY_EDEFAULT);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MAX_CARD:
        setHasMaxCard(HAS_MAX_CARD_EDEFAULT);
        return;
      case SimpleRegPackage.ABSTRACT_ELEMENT__MAX_CARDINALITY:
        setMaxCardinality(MAX_CARDINALITY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpleRegPackage.ABSTRACT_ELEMENT__CARDINALITY:
        return CARDINALITY_EDEFAULT == null ? cardinality != null : !CARDINALITY_EDEFAULT.equals(cardinality);
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MIN_CARD:
        return hasMinCard != HAS_MIN_CARD_EDEFAULT;
      case SimpleRegPackage.ABSTRACT_ELEMENT__MIN_CARDINALITY:
        return minCardinality != MIN_CARDINALITY_EDEFAULT;
      case SimpleRegPackage.ABSTRACT_ELEMENT__HAS_MAX_CARD:
        return hasMaxCard != HAS_MAX_CARD_EDEFAULT;
      case SimpleRegPackage.ABSTRACT_ELEMENT__MAX_CARDINALITY:
        return maxCardinality != MAX_CARDINALITY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cardinality: ");
    result.append(cardinality);
    result.append(", hasMinCard: ");
    result.append(hasMinCard);
    result.append(", minCardinality: ");
    result.append(minCardinality);
    result.append(", hasMaxCard: ");
    result.append(hasMaxCard);
    result.append(", maxCardinality: ");
    result.append(maxCardinality);
    result.append(')');
    return result.toString();
  }

} //AbstractElementImpl
