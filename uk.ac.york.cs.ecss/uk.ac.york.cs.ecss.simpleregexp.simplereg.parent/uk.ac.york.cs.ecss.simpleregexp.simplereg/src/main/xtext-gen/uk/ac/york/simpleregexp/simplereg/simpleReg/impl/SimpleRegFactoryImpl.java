/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.simpleregexp.simplereg.simpleReg.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.york.simpleregexp.simplereg.simpleReg.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleRegFactoryImpl extends EFactoryImpl implements SimpleRegFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SimpleRegFactory init()
  {
    try
    {
      SimpleRegFactory theSimpleRegFactory = (SimpleRegFactory)EPackage.Registry.INSTANCE.getEFactory(SimpleRegPackage.eNS_URI);
      if (theSimpleRegFactory != null)
      {
        return theSimpleRegFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SimpleRegFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleRegFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SimpleRegPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case SimpleRegPackage.SINGLE_CHARS: return createSingleChars();
      case SimpleRegPackage.WILDCARD: return createWildcard();
      case SimpleRegPackage.MULTI_CHARACTERS: return createMultiCharacters();
      case SimpleRegPackage.REGEX_ALTERNATIVES: return createRegexAlternatives();
      case SimpleRegPackage.REGEX_GROUP: return createRegexGroup();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleChars createSingleChars()
  {
    SingleCharsImpl singleChars = new SingleCharsImpl();
    return singleChars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Wildcard createWildcard()
  {
    WildcardImpl wildcard = new WildcardImpl();
    return wildcard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultiCharacters createMultiCharacters()
  {
    MultiCharactersImpl multiCharacters = new MultiCharactersImpl();
    return multiCharacters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegexAlternatives createRegexAlternatives()
  {
    RegexAlternativesImpl regexAlternatives = new RegexAlternativesImpl();
    return regexAlternatives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegexGroup createRegexGroup()
  {
    RegexGroupImpl regexGroup = new RegexGroupImpl();
    return regexGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleRegPackage getSimpleRegPackage()
  {
    return (SimpleRegPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SimpleRegPackage getPackage()
  {
    return SimpleRegPackage.eINSTANCE;
  }

} //SimpleRegFactoryImpl
