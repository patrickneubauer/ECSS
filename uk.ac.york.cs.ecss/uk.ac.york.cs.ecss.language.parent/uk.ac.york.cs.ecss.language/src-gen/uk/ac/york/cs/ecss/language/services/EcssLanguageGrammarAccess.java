/*
 * generated by Xtext 2.14.0
 */
package uk.ac.york.cs.ecss.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EcssLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConfigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConfigConfigParserRuleCall_0_0 = (RuleCall)cConfigAssignment_0.eContents().get(0);
		private final Assignment cImportStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportStatementImportParserRuleCall_1_0 = (RuleCall)cImportStatementAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTemplateDefsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTemplateDefsTemplateDefParserRuleCall_2_0_0 = (RuleCall)cTemplateDefsAssignment_2_0.eContents().get(0);
		private final Assignment cTemplateGenDefsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTemplateGenDefsTemplateGenDefParserRuleCall_2_1_0 = (RuleCall)cTemplateGenDefsAssignment_2_1.eContents().get(0);
		private final Assignment cTemplatesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cTemplatesTemplateRuleParserRuleCall_2_2_0 = (RuleCall)cTemplatesAssignment_2_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cPropertiesPropertyRuleParserRuleCall_2_3_0 = (RuleCall)cPropertiesAssignment_2_3.eContents().get(0);
		
		////import "platform:/resource/uk.ac.york.cs.ecss.language/model/imported/org.eclipse.emf.ecore/Ecore.ecore" as ecore
		////import "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore" as pivot
		////import "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore" as base
		////import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl
		//Model:
		//	config=Config?
		//	importStatement+=Import* (templateDefs+=TemplateDef | templateGenDefs+=TemplateGenDef | templates+=TemplateRule |
		//	properties+=PropertyRule)*;
		@Override public ParserRule getRule() { return rule; }
		
		///*string = TEST1MIDT
		//	string2 = TEST3MID*/ config=Config? importStatement+=Import* (templateDefs+=TemplateDef |
		//templateGenDefs+=TemplateGenDef | templates+=TemplateRule | properties+=PropertyRule)*
		public Group getGroup() { return cGroup; }
		
		///*string = TEST1MIDT
		//	string2 = TEST3MID*/ config=Config?
		public Assignment getConfigAssignment_0() { return cConfigAssignment_0; }
		
		//Config
		public RuleCall getConfigConfigParserRuleCall_0_0() { return cConfigConfigParserRuleCall_0_0; }
		
		//importStatement+=Import*
		public Assignment getImportStatementAssignment_1() { return cImportStatementAssignment_1; }
		
		//Import
		public RuleCall getImportStatementImportParserRuleCall_1_0() { return cImportStatementImportParserRuleCall_1_0; }
		
		//(templateDefs+=TemplateDef | templateGenDefs+=TemplateGenDef | templates+=TemplateRule | properties+=PropertyRule)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//templateDefs+=TemplateDef
		public Assignment getTemplateDefsAssignment_2_0() { return cTemplateDefsAssignment_2_0; }
		
		//TemplateDef
		public RuleCall getTemplateDefsTemplateDefParserRuleCall_2_0_0() { return cTemplateDefsTemplateDefParserRuleCall_2_0_0; }
		
		//templateGenDefs+=TemplateGenDef
		public Assignment getTemplateGenDefsAssignment_2_1() { return cTemplateGenDefsAssignment_2_1; }
		
		//TemplateGenDef
		public RuleCall getTemplateGenDefsTemplateGenDefParserRuleCall_2_1_0() { return cTemplateGenDefsTemplateGenDefParserRuleCall_2_1_0; }
		
		//templates+=TemplateRule
		public Assignment getTemplatesAssignment_2_2() { return cTemplatesAssignment_2_2; }
		
		//TemplateRule
		public RuleCall getTemplatesTemplateRuleParserRuleCall_2_2_0() { return cTemplatesTemplateRuleParserRuleCall_2_2_0; }
		
		//properties+=PropertyRule
		public Assignment getPropertiesAssignment_2_3() { return cPropertiesAssignment_2_3; }
		
		//PropertyRule
		public RuleCall getPropertiesPropertyRuleParserRuleCall_2_3_0() { return cPropertiesPropertyRuleParserRuleCall_2_3_0; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasMinImprovementAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasMinImprovementMinImprovementKeyword_3_0_0 = (Keyword)cHasMinImprovementAssignment_3_0.eContents().get(0);
		private final Assignment cMinImprovementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinImprovementNUMBERTerminalRuleCall_3_1_0 = (RuleCall)cMinImprovementAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cHasMaxDegressionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cHasMaxDegressionMaxDegressionKeyword_4_0_0 = (Keyword)cHasMaxDegressionAssignment_4_0.eContents().get(0);
		private final Assignment cMaxDegressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMaxDegressionNUMBERTerminalRuleCall_4_1_0 = (RuleCall)cMaxDegressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cHaxMaxThingsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cHaxMaxThingsMaxThingsKeyword_5_0_0 = (Keyword)cHaxMaxThingsAssignment_5_0.eContents().get(0);
		private final Assignment cMaxThingsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaxThingsINTTerminalRuleCall_5_1_0 = (RuleCall)cMaxThingsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Config:
		//	{Config}
		//	'Config' '{' (hasMinImprovement?='minImprovement' minImprovement=NUMBER)? (hasMaxDegression?='maxDegression'
		//	maxDegression=NUMBER)? (haxMaxThings?='maxThings' maxThings=INT)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Config} 'Config' '{' (hasMinImprovement?='minImprovement' minImprovement=NUMBER)? (hasMaxDegression?='maxDegression'
		//maxDegression=NUMBER)? (haxMaxThings?='maxThings' maxThings=INT)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Config}
		public Action getConfigAction_0() { return cConfigAction_0; }
		
		//'Config'
		public Keyword getConfigKeyword_1() { return cConfigKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(hasMinImprovement?='minImprovement' minImprovement=NUMBER)?
		public Group getGroup_3() { return cGroup_3; }
		
		//hasMinImprovement?='minImprovement'
		public Assignment getHasMinImprovementAssignment_3_0() { return cHasMinImprovementAssignment_3_0; }
		
		//'minImprovement'
		public Keyword getHasMinImprovementMinImprovementKeyword_3_0_0() { return cHasMinImprovementMinImprovementKeyword_3_0_0; }
		
		//minImprovement=NUMBER
		public Assignment getMinImprovementAssignment_3_1() { return cMinImprovementAssignment_3_1; }
		
		//NUMBER
		public RuleCall getMinImprovementNUMBERTerminalRuleCall_3_1_0() { return cMinImprovementNUMBERTerminalRuleCall_3_1_0; }
		
		//(hasMaxDegression?='maxDegression' maxDegression=NUMBER)?
		public Group getGroup_4() { return cGroup_4; }
		
		//hasMaxDegression?='maxDegression'
		public Assignment getHasMaxDegressionAssignment_4_0() { return cHasMaxDegressionAssignment_4_0; }
		
		//'maxDegression'
		public Keyword getHasMaxDegressionMaxDegressionKeyword_4_0_0() { return cHasMaxDegressionMaxDegressionKeyword_4_0_0; }
		
		//maxDegression=NUMBER
		public Assignment getMaxDegressionAssignment_4_1() { return cMaxDegressionAssignment_4_1; }
		
		//NUMBER
		public RuleCall getMaxDegressionNUMBERTerminalRuleCall_4_1_0() { return cMaxDegressionNUMBERTerminalRuleCall_4_1_0; }
		
		//(haxMaxThings?='maxThings' maxThings=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//haxMaxThings?='maxThings'
		public Assignment getHaxMaxThingsAssignment_5_0() { return cHaxMaxThingsAssignment_5_0; }
		
		//'maxThings'
		public Keyword getHaxMaxThingsMaxThingsKeyword_5_0_0() { return cHaxMaxThingsMaxThingsKeyword_5_0_0; }
		
		//maxThings=INT
		public Assignment getMaxThingsAssignment_5_1() { return cMaxThingsAssignment_5_1; }
		
		//INT
		public RuleCall getMaxThingsINTTerminalRuleCall_5_1_0() { return cMaxThingsINTTerminalRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' name=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TemplateRuleOrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateRuleOrDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemplateDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*Template or template generator class! */ TemplateRuleOrDef:
		//	TemplateDef | TemplateRule;
		@Override public ParserRule getRule() { return rule; }
		
		//TemplateDef | TemplateRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TemplateDef
		public RuleCall getTemplateDefParserRuleCall_0() { return cTemplateDefParserRuleCall_0; }
		
		//TemplateRule
		public RuleCall getTemplateRuleParserRuleCall_1() { return cTemplateRuleParserRuleCall_1; }
	}
	public class TemplateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJavaClassQUALIFIEDNAMETerminalRuleCall_3_0 = (RuleCall)cJavaClassAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TemplateDef:
		//	'template' name=ID ':' javaClass=QUALIFIEDNAME ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'template' name=ID ':' javaClass=QUALIFIEDNAME ';'
		public Group getGroup() { return cGroup; }
		
		//'template'
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//javaClass=QUALIFIEDNAME
		public Assignment getJavaClassAssignment_3() { return cJavaClassAssignment_3; }
		
		//QUALIFIEDNAME
		public RuleCall getJavaClassQUALIFIEDNAMETerminalRuleCall_3_0() { return cJavaClassQUALIFIEDNAMETerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TemplateGenDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateGenDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperRuleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperRuleTemplateRuleOrDefCrossReference_2_1_0 = (CrossReference)cSuperRuleAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperRuleTemplateRuleOrDefIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperRuleTemplateRuleOrDefCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cJavaClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cJavaClassQUALIFIEDNAMETerminalRuleCall_3_1_0 = (RuleCall)cJavaClassAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TemplateGenDef:
		//	'templateGen' name=ID ('extends' superRule=[TemplateRuleOrDef])? (':' javaClass=QUALIFIEDNAME)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'templateGen' name=ID ('extends' superRule=[TemplateRuleOrDef])? (':' javaClass=QUALIFIEDNAME)? ';'
		public Group getGroup() { return cGroup; }
		
		//'templateGen'
		public Keyword getTemplateGenKeyword_0() { return cTemplateGenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superRule=[TemplateRuleOrDef])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superRule=[TemplateRuleOrDef]
		public Assignment getSuperRuleAssignment_2_1() { return cSuperRuleAssignment_2_1; }
		
		//[TemplateRuleOrDef]
		public CrossReference getSuperRuleTemplateRuleOrDefCrossReference_2_1_0() { return cSuperRuleTemplateRuleOrDefCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperRuleTemplateRuleOrDefIDTerminalRuleCall_2_1_0_1() { return cSuperRuleTemplateRuleOrDefIDTerminalRuleCall_2_1_0_1; }
		
		//(':' javaClass=QUALIFIEDNAME)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//javaClass=QUALIFIEDNAME
		public Assignment getJavaClassAssignment_3_1() { return cJavaClassAssignment_3_1; }
		
		//QUALIFIEDNAME
		public RuleCall getJavaClassQUALIFIEDNAMETerminalRuleCall_3_1_0() { return cJavaClassQUALIFIEDNAMETerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TemplateRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTemplateRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateGeneratorRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TemplateRule:
		//	BasicTemplateRule | TemplateGeneratorRule;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicTemplateRule | TemplateGeneratorRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicTemplateRule
		public RuleCall getBasicTemplateRuleParserRuleCall_0() { return cBasicTemplateRuleParserRuleCall_0; }
		
		//TemplateGeneratorRule
		public RuleCall getTemplateGeneratorRuleParserRuleCall_1() { return cTemplateGeneratorRuleParserRuleCall_1; }
	}
	public class BasicTemplateRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.BasicTemplateRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaruleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTemplateDefCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTemplateDefIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTemplateDefCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupsIDTerminalRuleCall_3_1_0 = (RuleCall)cGroupsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BasicTemplateRule:
		//	'javarule' type=[TemplateDef] name=ID ('::' groups+=ID+)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'javarule' type=[TemplateDef] name=ID ('::' groups+=ID+)? ';'
		public Group getGroup() { return cGroup; }
		
		//'javarule'
		public Keyword getJavaruleKeyword_0() { return cJavaruleKeyword_0; }
		
		//type=[TemplateDef]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[TemplateDef]
		public CrossReference getTypeTemplateDefCrossReference_1_0() { return cTypeTemplateDefCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTemplateDefIDTerminalRuleCall_1_0_1() { return cTypeTemplateDefIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('::' groups+=ID+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }
		
		//groups+=ID+
		public Assignment getGroupsAssignment_3_1() { return cGroupsAssignment_3_1; }
		
		//ID
		public RuleCall getGroupsIDTerminalRuleCall_3_1_0() { return cGroupsIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TemplateGeneratorRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateGeneratorRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTemplateGenDefCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTemplateGenDefIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTemplateGenDefCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupsIDTerminalRuleCall_3_1_0 = (RuleCall)cGroupsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cTypeDefAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTypeDefTypeDefParserRuleCall_4_1_0_0 = (RuleCall)cTypeDefAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cTypeDefAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cTypeDefTypeDefParserRuleCall_4_1_1_1_0 = (RuleCall)cTypeDefAssignment_4_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cIdKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cIdPartAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cIdPartTemplateRulePartParserRuleCall_5_0_1_0 = (RuleCall)cIdPartAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cIdPartAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cIdPartTemplateRulePartParserRuleCall_5_1_1_0 = (RuleCall)cIdPartAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTemplateRulePartAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTemplateRulePartTemplateRulePartParserRuleCall_6_1_0 = (RuleCall)cTemplateRulePartAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TemplateGeneratorRule:
		//	'rule' type=[TemplateGenDef] name=ID ('::' groups+=ID+)? ('with' (typeDef+=TypeDef (',' typeDef+=TypeDef)*))? ('id'
		//	idPart+=TemplateRulePart
		//	| '{'
		//	idPart+=TemplateRulePart+
		//	'}')? (':'
		//	templateRulePart+=TemplateRulePart+)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' type=[TemplateGenDef] name=ID ('::' groups+=ID+)? ('with' (typeDef+=TypeDef (',' typeDef+=TypeDef)*))? ('id'
		//idPart+=TemplateRulePart | '{' idPart+=TemplateRulePart+ '}')? (':' templateRulePart+=TemplateRulePart+)? ';'
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//type=[TemplateGenDef]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[TemplateGenDef]
		public CrossReference getTypeTemplateGenDefCrossReference_1_0() { return cTypeTemplateGenDefCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTemplateGenDefIDTerminalRuleCall_1_0_1() { return cTypeTemplateGenDefIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('::' groups+=ID+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }
		
		//groups+=ID+
		public Assignment getGroupsAssignment_3_1() { return cGroupsAssignment_3_1; }
		
		//ID
		public RuleCall getGroupsIDTerminalRuleCall_3_1_0() { return cGroupsIDTerminalRuleCall_3_1_0; }
		
		//('with' (typeDef+=TypeDef (',' typeDef+=TypeDef)*))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//typeDef+=TypeDef (',' typeDef+=TypeDef)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//typeDef+=TypeDef
		public Assignment getTypeDefAssignment_4_1_0() { return cTypeDefAssignment_4_1_0; }
		
		//TypeDef
		public RuleCall getTypeDefTypeDefParserRuleCall_4_1_0_0() { return cTypeDefTypeDefParserRuleCall_4_1_0_0; }
		
		//(',' typeDef+=TypeDef)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//typeDef+=TypeDef
		public Assignment getTypeDefAssignment_4_1_1_1() { return cTypeDefAssignment_4_1_1_1; }
		
		//TypeDef
		public RuleCall getTypeDefTypeDefParserRuleCall_4_1_1_1_0() { return cTypeDefTypeDefParserRuleCall_4_1_1_1_0; }
		
		//('id' idPart+=TemplateRulePart | '{' idPart+=TemplateRulePart+ '}')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'id' idPart+=TemplateRulePart
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'id'
		public Keyword getIdKeyword_5_0_0() { return cIdKeyword_5_0_0; }
		
		//idPart+=TemplateRulePart
		public Assignment getIdPartAssignment_5_0_1() { return cIdPartAssignment_5_0_1; }
		
		//TemplateRulePart
		public RuleCall getIdPartTemplateRulePartParserRuleCall_5_0_1_0() { return cIdPartTemplateRulePartParserRuleCall_5_0_1_0; }
		
		//'{' idPart+=TemplateRulePart+ '}'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }
		
		//idPart+=TemplateRulePart+
		public Assignment getIdPartAssignment_5_1_1() { return cIdPartAssignment_5_1_1; }
		
		//TemplateRulePart
		public RuleCall getIdPartTemplateRulePartParserRuleCall_5_1_1_0() { return cIdPartTemplateRulePartParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_2() { return cRightCurlyBracketKeyword_5_1_2; }
		
		//(':' templateRulePart+=TemplateRulePart+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//':'
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }
		
		//templateRulePart+=TemplateRulePart+
		public Assignment getTemplateRulePartAssignment_6_1() { return cTemplateRulePartAssignment_6_1; }
		
		//TemplateRulePart
		public RuleCall getTemplateRulePartTemplateRulePartParserRuleCall_6_1_0() { return cTemplateRulePartTemplateRulePartParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TypeDef:
		//	type=ID name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ID name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TemplateRulePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateRulePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemplateFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalEvaluationCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalOrValueCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStaticTemplateRulePartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEvaluationCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSlotCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cForEachExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIfExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TemplateRulePart:
		//	TemplateFunctionCall | LocalEvaluationCall | LocalOrValueCall | StaticTemplateRulePart | EvaluationCall | SlotCall
		//	| ForEachExpression | IfExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//TemplateFunctionCall | LocalEvaluationCall | LocalOrValueCall | StaticTemplateRulePart | EvaluationCall | SlotCall |
		//ForEachExpression | IfExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TemplateFunctionCall
		public RuleCall getTemplateFunctionCallParserRuleCall_0() { return cTemplateFunctionCallParserRuleCall_0; }
		
		//LocalEvaluationCall
		public RuleCall getLocalEvaluationCallParserRuleCall_1() { return cLocalEvaluationCallParserRuleCall_1; }
		
		//LocalOrValueCall
		public RuleCall getLocalOrValueCallParserRuleCall_2() { return cLocalOrValueCallParserRuleCall_2; }
		
		//StaticTemplateRulePart
		public RuleCall getStaticTemplateRulePartParserRuleCall_3() { return cStaticTemplateRulePartParserRuleCall_3; }
		
		//EvaluationCall
		public RuleCall getEvaluationCallParserRuleCall_4() { return cEvaluationCallParserRuleCall_4; }
		
		//SlotCall
		public RuleCall getSlotCallParserRuleCall_5() { return cSlotCallParserRuleCall_5; }
		
		//ForEachExpression
		public RuleCall getForEachExpressionParserRuleCall_6() { return cForEachExpressionParserRuleCall_6; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_7() { return cIfExpressionParserRuleCall_7; }
	}
	public class ForEachExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.ForEachExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cExprVarAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cExprVarIDTerminalRuleCall_4_0_0 = (RuleCall)cExprVarAssignment_4_0.eContents().get(0);
		private final Assignment cCompleteExprAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cCompleteExprSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cCompleteExprAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cJoinKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cJoinAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cJoinTemplateRulePartParserRuleCall_5_1_0 = (RuleCall)cJoinAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyTemplateRulePartParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForEachExpression:
		//	'for' type=ID? variable=ID ':' (exprVar=ID | completeExpr=STRING) ('join' join+=TemplateRulePart+)? '{'
		//	body+=TemplateRulePart*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' type=ID? variable=ID ':' (exprVar=ID | completeExpr=STRING) ('join' join+=TemplateRulePart+)? '{'
		//body+=TemplateRulePart* '}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//type=ID?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//exprVar=ID | completeExpr=STRING
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//exprVar=ID
		public Assignment getExprVarAssignment_4_0() { return cExprVarAssignment_4_0; }
		
		//ID
		public RuleCall getExprVarIDTerminalRuleCall_4_0_0() { return cExprVarIDTerminalRuleCall_4_0_0; }
		
		//completeExpr=STRING
		public Assignment getCompleteExprAssignment_4_1() { return cCompleteExprAssignment_4_1; }
		
		//STRING
		public RuleCall getCompleteExprSTRINGTerminalRuleCall_4_1_0() { return cCompleteExprSTRINGTerminalRuleCall_4_1_0; }
		
		//('join' join+=TemplateRulePart+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'join'
		public Keyword getJoinKeyword_5_0() { return cJoinKeyword_5_0; }
		
		//join+=TemplateRulePart+
		public Assignment getJoinAssignment_5_1() { return cJoinAssignment_5_1; }
		
		//TemplateRulePart
		public RuleCall getJoinTemplateRulePartParserRuleCall_5_1_0() { return cJoinTemplateRulePartParserRuleCall_5_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//body+=TemplateRulePart*
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//TemplateRulePart
		public RuleCall getBodyTemplateRulePartParserRuleCall_7_0() { return cBodyTemplateRulePartParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValIDTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenTemplateRulePartParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElseTemplateRulePartParserRuleCall_7_2_0 = (RuleCall)cElseAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//IfExpression:
		//	'if' '(' val=ID ')' '{'
		//	then+=TemplateRulePart*
		//	'}' ('else' '{'
		//	else+=TemplateRulePart*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' val=ID ')' '{' then+=TemplateRulePart* '}' ('else' '{' else+=TemplateRulePart* '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//val=ID
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//ID
		public RuleCall getValIDTerminalRuleCall_2_0() { return cValIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//then+=TemplateRulePart*
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }
		
		//TemplateRulePart
		public RuleCall getThenTemplateRulePartParserRuleCall_5_0() { return cThenTemplateRulePartParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('else' '{' else+=TemplateRulePart* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//else+=TemplateRulePart*
		public Assignment getElseAssignment_7_2() { return cElseAssignment_7_2; }
		
		//TemplateRulePart
		public RuleCall getElseTemplateRulePartParserRuleCall_7_2_0() { return cElseTemplateRulePartParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class StaticTemplateRulePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.StaticTemplateRulePart");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StaticTemplateRulePart:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TemplateFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsReferenceCommercialAtKeyword_1_0 = (Keyword)cIsReferenceAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParValueAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParValueTemplateParameterValueParserRuleCall_4_0_0 = (RuleCall)cParValueAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParValueAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParValueTemplateParameterValueParserRuleCall_4_1_1_0 = (RuleCall)cParValueAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TemplateFunctionCall:
		//	'$' isReference?='@'? name=ID '(' (parValue+=TemplateParameterValue (',' parValue+=TemplateParameterValue)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'$' isReference?='@'? name=ID '(' (parValue+=TemplateParameterValue (',' parValue+=TemplateParameterValue)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//isReference?='@'?
		public Assignment getIsReferenceAssignment_1() { return cIsReferenceAssignment_1; }
		
		//'@'
		public Keyword getIsReferenceCommercialAtKeyword_1_0() { return cIsReferenceCommercialAtKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parValue+=TemplateParameterValue (',' parValue+=TemplateParameterValue)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parValue+=TemplateParameterValue
		public Assignment getParValueAssignment_4_0() { return cParValueAssignment_4_0; }
		
		//TemplateParameterValue
		public RuleCall getParValueTemplateParameterValueParserRuleCall_4_0_0() { return cParValueTemplateParameterValueParserRuleCall_4_0_0; }
		
		//(',' parValue+=TemplateParameterValue)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parValue+=TemplateParameterValue
		public Assignment getParValueAssignment_4_1_1() { return cParValueAssignment_4_1_1; }
		
		//TemplateParameterValue
		public RuleCall getParValueTemplateParameterValueParserRuleCall_4_1_1_0() { return cParValueTemplateParameterValueParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SlotCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.SlotCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinValueINTTerminalRuleCall_2_1_0 = (RuleCall)cMinValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMaxValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMaxValueINTTerminalRuleCall_2_2_1_0 = (RuleCall)cMaxValueAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//SlotCall:
		//	'§' name=ID ('[' minValue=INT ('..' maxValue=INT) ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'§' name=ID ('[' minValue=INT ('..' maxValue=INT) ']')?
		public Group getGroup() { return cGroup; }
		
		//'§'
		public Keyword getSectionSignKeyword_0() { return cSectionSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' minValue=INT ('..' maxValue=INT) ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//minValue=INT
		public Assignment getMinValueAssignment_2_1() { return cMinValueAssignment_2_1; }
		
		//INT
		public RuleCall getMinValueINTTerminalRuleCall_2_1_0() { return cMinValueINTTerminalRuleCall_2_1_0; }
		
		//'..' maxValue=INT
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_2_0() { return cFullStopFullStopKeyword_2_2_0; }
		
		//maxValue=INT
		public Assignment getMaxValueAssignment_2_2_1() { return cMaxValueAssignment_2_2_1; }
		
		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_2_2_1_0() { return cMaxValueINTTerminalRuleCall_2_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	public class LocalOrValueCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.LocalOrValueCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameQUALIFIEDNAMETerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//LocalOrValueCall:
		//	'$' (name=ID | name=QUALIFIEDNAME);
		@Override public ParserRule getRule() { return rule; }
		
		//'$' (name=ID | name=QUALIFIEDNAME)
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//name=ID | name=QUALIFIEDNAME
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//name=QUALIFIEDNAME
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//QUALIFIEDNAME
		public RuleCall getNameQUALIFIEDNAMETerminalRuleCall_1_1_0() { return cNameQUALIFIEDNAMETerminalRuleCall_1_1_0; }
	}
	public class LocalEvaluationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.LocalEvaluationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LocalEvaluationCall:
		//	'$#' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'$#' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'$#'
		public Keyword getDollarSignNumberSignKeyword_0() { return cDollarSignNumberSignKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class TemplateParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPropNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPropNameIDTerminalRuleCall_0_1_0 = (RuleCall)cPropNameAssignment_0_1.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSectionSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSlotNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSlotNameIDTerminalRuleCall_2_1_0 = (RuleCall)cSlotNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMinValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMinValueINTTerminalRuleCall_2_2_1_0 = (RuleCall)cMinValueAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cMaxValueAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cMaxValueINTTerminalRuleCall_2_2_2_1_0 = (RuleCall)cMaxValueAssignment_2_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Assignment cDirectAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDirectSTRINGTerminalRuleCall_3_0 = (RuleCall)cDirectAssignment_3.eContents().get(0);
		
		//TemplateParameterValue:
		//	'$' propName=ID | varName=ID | '§' slotName=ID ('[' minValue=INT ('..' maxValue=INT) ']')? | direct=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'$' propName=ID | varName=ID | '§' slotName=ID ('[' minValue=INT ('..' maxValue=INT) ']')? | direct=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'$' propName=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_0_0() { return cDollarSignKeyword_0_0; }
		
		//propName=ID
		public Assignment getPropNameAssignment_0_1() { return cPropNameAssignment_0_1; }
		
		//ID
		public RuleCall getPropNameIDTerminalRuleCall_0_1_0() { return cPropNameIDTerminalRuleCall_0_1_0; }
		
		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }
		
		//'§' slotName=ID ('[' minValue=INT ('..' maxValue=INT) ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'§'
		public Keyword getSectionSignKeyword_2_0() { return cSectionSignKeyword_2_0; }
		
		//slotName=ID
		public Assignment getSlotNameAssignment_2_1() { return cSlotNameAssignment_2_1; }
		
		//ID
		public RuleCall getSlotNameIDTerminalRuleCall_2_1_0() { return cSlotNameIDTerminalRuleCall_2_1_0; }
		
		//('[' minValue=INT ('..' maxValue=INT) ']')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_2_0() { return cLeftSquareBracketKeyword_2_2_0; }
		
		//minValue=INT
		public Assignment getMinValueAssignment_2_2_1() { return cMinValueAssignment_2_2_1; }
		
		//INT
		public RuleCall getMinValueINTTerminalRuleCall_2_2_1_0() { return cMinValueINTTerminalRuleCall_2_2_1_0; }
		
		//'..' maxValue=INT
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_2_2_0() { return cFullStopFullStopKeyword_2_2_2_0; }
		
		//maxValue=INT
		public Assignment getMaxValueAssignment_2_2_2_1() { return cMaxValueAssignment_2_2_2_1; }
		
		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_2_2_2_1_0() { return cMaxValueINTTerminalRuleCall_2_2_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2_3() { return cRightSquareBracketKeyword_2_2_3; }
		
		//direct=STRING
		public Assignment getDirectAssignment_3() { return cDirectAssignment_3; }
		
		//STRING
		public RuleCall getDirectSTRINGTerminalRuleCall_3_0() { return cDirectSTRINGTerminalRuleCall_3_0; }
	}
	public class EvaluationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.EvaluationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//EvaluationCall:
		//	'#' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class PropertyRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.PropertyRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyPropertyParserRuleCall_3_0 = (RuleCall)cPropertyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PropertyRule:
		//	{PropertyRule} selector=Selector? '{'
		//	property+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertyRule} selector=Selector? '{' property+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//{PropertyRule}
		public Action getPropertyRuleAction_0() { return cPropertyRuleAction_0; }
		
		//selector=Selector?
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0() { return cSelectorSelectorParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//property+=Property*
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_3_0() { return cPropertyPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.Selector");
		private final Assignment cSelectorsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSelectorsSingleSelectorParserRuleCall_0 = (RuleCall)cSelectorsAssignment.eContents().get(0);
		
		//Selector:
		//	selectors+=SingleSelector+;
		@Override public ParserRule getRule() { return rule; }
		
		//selectors+=SingleSelector+
		public Assignment getSelectorsAssignment() { return cSelectorsAssignment; }
		
		//SingleSelector
		public RuleCall getSelectorsSingleSelectorParserRuleCall_0() { return cSelectorsSingleSelectorParserRuleCall_0; }
	}
	public class SingleSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.SingleSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAllTypesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cAllTypesAsteriskKeyword_0_0_0 = (Keyword)cAllTypesAssignment_0_0.eContents().get(0);
		private final Assignment cReferredNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Alternatives cReferredNameAlternatives_0_1_0 = (Alternatives)cReferredNameAssignment_0_1.eContents().get(0);
		private final RuleCall cReferredNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cReferredNameAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cReferredNameSTRINGTerminalRuleCall_0_1_0_1 = (RuleCall)cReferredNameAlternatives_0_1_0.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//SingleSelector:
		//	(allTypes?='*' | referredName=(ID | STRING)) condition=Condition?;
		@Override public ParserRule getRule() { return rule; }
		
		//(allTypes?='*' | referredName=(ID | STRING)) condition=Condition?
		public Group getGroup() { return cGroup; }
		
		//allTypes?='*' | referredName=(ID | STRING)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//allTypes?='*'
		public Assignment getAllTypesAssignment_0_0() { return cAllTypesAssignment_0_0; }
		
		//'*'
		public Keyword getAllTypesAsteriskKeyword_0_0_0() { return cAllTypesAsteriskKeyword_0_0_0; }
		
		//referredName=(ID | STRING)
		public Assignment getReferredNameAssignment_0_1() { return cReferredNameAssignment_0_1; }
		
		//(ID | STRING)
		public Alternatives getReferredNameAlternatives_0_1_0() { return cReferredNameAlternatives_0_1_0; }
		
		//ID
		public RuleCall getReferredNameIDTerminalRuleCall_0_1_0_0() { return cReferredNameIDTerminalRuleCall_0_1_0_0; }
		
		//STRING
		public RuleCall getReferredNameSTRINGTerminalRuleCall_0_1_0_1() { return cReferredNameSTRINGTerminalRuleCall_0_1_0_1; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
	}
	public class PossiblySignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.PossiblySignedNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PossiblySignedNumber ecore::EBigDecimal:
		//	'-'? NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? NUMBER
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTemplateMatchAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTemplateMatchTemplateMatchParserRuleCall_0_0_0 = (RuleCall)cTemplateMatchAssignment_0_0.eContents().get(0);
		private final Assignment cSlotMatchAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSlotMatchSlotMatchParserRuleCall_0_1_0 = (RuleCall)cSlotMatchAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Alternatives cNameAlternatives_0_2_0 = (Alternatives)cNameAssignment_0_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0_0 = (RuleCall)cNameAlternatives_0_2_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_2_0_1 = (RuleCall)cNameAlternatives_0_2_0.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePropertyValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Actions ersetzt durch priority(), priorityAdd()
		//Property:
		//	(templateMatch=TemplateMatch | slotMatch=SlotMatch | name=(ID | STRING)) condition=Condition?
		//	':' value+=PropertyValue+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(templateMatch=TemplateMatch | slotMatch=SlotMatch | name=(ID | STRING)) condition=Condition? ':' value+=PropertyValue+
		//';'
		public Group getGroup() { return cGroup; }
		
		//templateMatch=TemplateMatch | slotMatch=SlotMatch | name=(ID | STRING)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//templateMatch=TemplateMatch
		public Assignment getTemplateMatchAssignment_0_0() { return cTemplateMatchAssignment_0_0; }
		
		//TemplateMatch
		public RuleCall getTemplateMatchTemplateMatchParserRuleCall_0_0_0() { return cTemplateMatchTemplateMatchParserRuleCall_0_0_0; }
		
		//slotMatch=SlotMatch
		public Assignment getSlotMatchAssignment_0_1() { return cSlotMatchAssignment_0_1; }
		
		//SlotMatch
		public RuleCall getSlotMatchSlotMatchParserRuleCall_0_1_0() { return cSlotMatchSlotMatchParserRuleCall_0_1_0; }
		
		//name=(ID | STRING)
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//(ID | STRING)
		public Alternatives getNameAlternatives_0_2_0() { return cNameAlternatives_0_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0_0() { return cNameIDTerminalRuleCall_0_2_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_2_0_1() { return cNameSTRINGTerminalRuleCall_0_2_0_1; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value+=PropertyValue+
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_3_0() { return cValuePropertyValueParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TemplateMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TemplateMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorSingleSelectorParserRuleCall_2_0 = (RuleCall)cSelectorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TemplateMatch:
		//	'template' '(' selector=SingleSelector ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'template' '(' selector=SingleSelector ')'
		public Group getGroup() { return cGroup; }
		
		//'template'
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//selector=SingleSelector
		public Assignment getSelectorAssignment_2() { return cSelectorAssignment_2; }
		
		//SingleSelector
		public RuleCall getSelectorSingleSelectorParserRuleCall_2_0() { return cSelectorSingleSelectorParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SlotMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.SlotMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstSingleSelectorParserRuleCall_2_0 = (RuleCall)cFirstAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSecondAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondSingleSelectorParserRuleCall_4_0 = (RuleCall)cSecondAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SlotMatch:
		//	'slot' '(' first=SingleSelector ',' second=SingleSelector ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'slot' '(' first=SingleSelector ',' second=SingleSelector ')'
		public Group getGroup() { return cGroup; }
		
		//'slot'
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//first=SingleSelector
		public Assignment getFirstAssignment_2() { return cFirstAssignment_2; }
		
		//SingleSelector
		public RuleCall getFirstSingleSelectorParserRuleCall_2_0() { return cFirstSingleSelectorParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//second=SingleSelector
		public Assignment getSecondAssignment_4() { return cSecondAssignment_4; }
		
		//SingleSelector
		public RuleCall getSecondSingleSelectorParserRuleCall_4_0() { return cSecondSingleSelectorParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.PropertyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cValueNumbAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cValueNumbPossiblySignedNumberParserRuleCall_0_2_0 = (RuleCall)cValueNumbAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Keyword cOclKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cOclvalueAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cOclvalueSpecificationCSParserRuleCall_0_3_1_0 = (RuleCall)cOclvalueAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cHasPropertyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cHasPropertyLeftParenthesisKeyword_1_0_0 = (Keyword)cHasPropertyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cArgumentAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cArgumentPropertyValueParserRuleCall_1_1_0_0 = (RuleCall)cArgumentAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cArgumentAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cArgumentPropertyValueParserRuleCall_1_1_1_1_0 = (RuleCall)cArgumentAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PropertyValue:
		//	(value=ID | value=STRING | valueNumb=PossiblySignedNumber | 'ocl' oclvalue=SpecificationCS) (hasProperty?='('
		//	(argument+=PropertyValue (',' argument+=PropertyValue)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(value=ID | value=STRING | valueNumb=PossiblySignedNumber | 'ocl' oclvalue=SpecificationCS) (hasProperty?='('
		//(argument+=PropertyValue (',' argument+=PropertyValue)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//value=ID | value=STRING | valueNumb=PossiblySignedNumber | 'ocl' oclvalue=SpecificationCS
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//value=ID
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0_0() { return cValueIDTerminalRuleCall_0_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//valueNumb=PossiblySignedNumber
		public Assignment getValueNumbAssignment_0_2() { return cValueNumbAssignment_0_2; }
		
		//PossiblySignedNumber
		public RuleCall getValueNumbPossiblySignedNumberParserRuleCall_0_2_0() { return cValueNumbPossiblySignedNumberParserRuleCall_0_2_0; }
		
		//'ocl' oclvalue=SpecificationCS
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'ocl'
		public Keyword getOclKeyword_0_3_0() { return cOclKeyword_0_3_0; }
		
		//oclvalue=SpecificationCS
		public Assignment getOclvalueAssignment_0_3_1() { return cOclvalueAssignment_0_3_1; }
		
		//SpecificationCS
		public RuleCall getOclvalueSpecificationCSParserRuleCall_0_3_1_0() { return cOclvalueSpecificationCSParserRuleCall_0_3_1_0; }
		
		//(hasProperty?='(' (argument+=PropertyValue (',' argument+=PropertyValue)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//hasProperty?='('
		public Assignment getHasPropertyAssignment_1_0() { return cHasPropertyAssignment_1_0; }
		
		//'('
		public Keyword getHasPropertyLeftParenthesisKeyword_1_0_0() { return cHasPropertyLeftParenthesisKeyword_1_0_0; }
		
		//(argument+=PropertyValue (',' argument+=PropertyValue)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//argument+=PropertyValue
		public Assignment getArgumentAssignment_1_1_0() { return cArgumentAssignment_1_1_0; }
		
		//PropertyValue
		public RuleCall getArgumentPropertyValueParserRuleCall_1_1_0_0() { return cArgumentPropertyValueParserRuleCall_1_1_0_0; }
		
		//(',' argument+=PropertyValue)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//argument+=PropertyValue
		public Assignment getArgumentAssignment_1_1_1_1() { return cArgumentAssignment_1_1_1_1; }
		
		//PropertyValue
		public RuleCall getArgumentPropertyValueParserRuleCall_1_1_1_1_0() { return cArgumentPropertyValueParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class TEST1MIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TEST1MID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTEST1TerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTEST2TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TEST1MID:
		//	TEST1 | TEST2;
		@Override public ParserRule getRule() { return rule; }
		
		//TEST1 | TEST2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEST1
		public RuleCall getTEST1TerminalRuleCall_0() { return cTEST1TerminalRuleCall_0; }
		
		//TEST2
		public RuleCall getTEST2TerminalRuleCall_1() { return cTEST2TerminalRuleCall_1; }
	}
	public class TEST3MIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TEST3MID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTEST3TerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTEST2TerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TEST3MID:
		//	TEST3 | TEST2;
		@Override public ParserRule getRule() { return rule; }
		
		//TEST3 | TEST2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEST3
		public RuleCall getTEST3TerminalRuleCall_0() { return cTEST3TerminalRuleCall_0; }
		
		//TEST2
		public RuleCall getTEST2TerminalRuleCall_1() { return cTEST2TerminalRuleCall_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSpecificationCSParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Condition:
		//	'[' expression=SpecificationCS ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression=SpecificationCS ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression=SpecificationCS
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SpecificationCS
		public RuleCall getExpressionSpecificationCSParserRuleCall_1_0() { return cExpressionSpecificationCSParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SpecificationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.SpecificationCS");
		private final Assignment cOwnedExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOwnedExpressionSTRINGTerminalRuleCall_0 = (RuleCall)cOwnedExpressionAssignment.eContents().get(0);
		
		//SpecificationCS /* returns essentialocl::ExpSpecificationCS*/:
		//	ownedExpression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedExpression=STRING
		public Assignment getOwnedExpressionAssignment() { return cOwnedExpressionAssignment; }
		
		//STRING
		public RuleCall getOwnedExpressionSTRINGTerminalRuleCall_0() { return cOwnedExpressionSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final ConfigElements pConfig;
	private final ImportElements pImport;
	private final TemplateRuleOrDefElements pTemplateRuleOrDef;
	private final TemplateDefElements pTemplateDef;
	private final TemplateGenDefElements pTemplateGenDef;
	private final TerminalRule tQUALIFIEDNAME;
	private final TemplateRuleElements pTemplateRule;
	private final BasicTemplateRuleElements pBasicTemplateRule;
	private final TemplateGeneratorRuleElements pTemplateGeneratorRule;
	private final TypeDefElements pTypeDef;
	private final TemplateRulePartElements pTemplateRulePart;
	private final ForEachExpressionElements pForEachExpression;
	private final IfExpressionElements pIfExpression;
	private final StaticTemplateRulePartElements pStaticTemplateRulePart;
	private final TemplateFunctionCallElements pTemplateFunctionCall;
	private final SlotCallElements pSlotCall;
	private final LocalOrValueCallElements pLocalOrValueCall;
	private final LocalEvaluationCallElements pLocalEvaluationCall;
	private final TemplateParameterValueElements pTemplateParameterValue;
	private final EvaluationCallElements pEvaluationCall;
	private final PropertyRuleElements pPropertyRule;
	private final SelectorElements pSelector;
	private final SingleSelectorElements pSingleSelector;
	private final PossiblySignedNumberElements pPossiblySignedNumber;
	private final TerminalRule tNUMBER;
	private final PropertyElements pProperty;
	private final TemplateMatchElements pTemplateMatch;
	private final SlotMatchElements pSlotMatch;
	private final PropertyValueElements pPropertyValue;
	private final TEST1MIDElements pTEST1MID;
	private final TEST3MIDElements pTEST3MID;
	private final TerminalRule tTEST1;
	private final TerminalRule tTEST3;
	private final TerminalRule tTEST2;
	private final ConditionElements pCondition;
	private final SpecificationCSElements pSpecificationCS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EcssLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConfig = new ConfigElements();
		this.pImport = new ImportElements();
		this.pTemplateRuleOrDef = new TemplateRuleOrDefElements();
		this.pTemplateDef = new TemplateDefElements();
		this.pTemplateGenDef = new TemplateGenDefElements();
		this.tQUALIFIEDNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.QUALIFIEDNAME");
		this.pTemplateRule = new TemplateRuleElements();
		this.pBasicTemplateRule = new BasicTemplateRuleElements();
		this.pTemplateGeneratorRule = new TemplateGeneratorRuleElements();
		this.pTypeDef = new TypeDefElements();
		this.pTemplateRulePart = new TemplateRulePartElements();
		this.pForEachExpression = new ForEachExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pStaticTemplateRulePart = new StaticTemplateRulePartElements();
		this.pTemplateFunctionCall = new TemplateFunctionCallElements();
		this.pSlotCall = new SlotCallElements();
		this.pLocalOrValueCall = new LocalOrValueCallElements();
		this.pLocalEvaluationCall = new LocalEvaluationCallElements();
		this.pTemplateParameterValue = new TemplateParameterValueElements();
		this.pEvaluationCall = new EvaluationCallElements();
		this.pPropertyRule = new PropertyRuleElements();
		this.pSelector = new SelectorElements();
		this.pSingleSelector = new SingleSelectorElements();
		this.pPossiblySignedNumber = new PossiblySignedNumberElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.NUMBER");
		this.pProperty = new PropertyElements();
		this.pTemplateMatch = new TemplateMatchElements();
		this.pSlotMatch = new SlotMatchElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pTEST1MID = new TEST1MIDElements();
		this.pTEST3MID = new TEST3MIDElements();
		this.tTEST1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TEST1");
		this.tTEST3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TEST3");
		this.tTEST2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.york.cs.ecss.language.EcssLanguage.TEST2");
		this.pCondition = new ConditionElements();
		this.pSpecificationCS = new SpecificationCSElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.york.cs.ecss.language.EcssLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "platform:/resource/uk.ac.york.cs.ecss.language/model/imported/org.eclipse.emf.ecore/Ecore.ecore" as ecore
	////import "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore" as pivot
	////import "platform:/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore" as base
	////import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl
	//Model:
	//	config=Config?
	//	importStatement+=Import* (templateDefs+=TemplateDef | templateGenDefs+=TemplateGenDef | templates+=TemplateRule |
	//	properties+=PropertyRule)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Config:
	//	{Config}
	//	'Config' '{' (hasMinImprovement?='minImprovement' minImprovement=NUMBER)? (hasMaxDegression?='maxDegression'
	//	maxDegression=NUMBER)? (haxMaxThings?='maxThings' maxThings=INT)?
	//	'}';
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//Import:
	//	'import' name=STRING ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	///*Template or template generator class! */ TemplateRuleOrDef:
	//	TemplateDef | TemplateRule;
	public TemplateRuleOrDefElements getTemplateRuleOrDefAccess() {
		return pTemplateRuleOrDef;
	}
	
	public ParserRule getTemplateRuleOrDefRule() {
		return getTemplateRuleOrDefAccess().getRule();
	}
	
	//TemplateDef:
	//	'template' name=ID ':' javaClass=QUALIFIEDNAME ';';
	public TemplateDefElements getTemplateDefAccess() {
		return pTemplateDef;
	}
	
	public ParserRule getTemplateDefRule() {
		return getTemplateDefAccess().getRule();
	}
	
	//TemplateGenDef:
	//	'templateGen' name=ID ('extends' superRule=[TemplateRuleOrDef])? (':' javaClass=QUALIFIEDNAME)? ';';
	public TemplateGenDefElements getTemplateGenDefAccess() {
		return pTemplateGenDef;
	}
	
	public ParserRule getTemplateGenDefRule() {
		return getTemplateGenDefAccess().getRule();
	}
	
	//terminal QUALIFIEDNAME:
	//	ID ('.' ID)+;
	public TerminalRule getQUALIFIEDNAMERule() {
		return tQUALIFIEDNAME;
	}
	
	//TemplateRule:
	//	BasicTemplateRule | TemplateGeneratorRule;
	public TemplateRuleElements getTemplateRuleAccess() {
		return pTemplateRule;
	}
	
	public ParserRule getTemplateRuleRule() {
		return getTemplateRuleAccess().getRule();
	}
	
	//BasicTemplateRule:
	//	'javarule' type=[TemplateDef] name=ID ('::' groups+=ID+)? ';';
	public BasicTemplateRuleElements getBasicTemplateRuleAccess() {
		return pBasicTemplateRule;
	}
	
	public ParserRule getBasicTemplateRuleRule() {
		return getBasicTemplateRuleAccess().getRule();
	}
	
	//TemplateGeneratorRule:
	//	'rule' type=[TemplateGenDef] name=ID ('::' groups+=ID+)? ('with' (typeDef+=TypeDef (',' typeDef+=TypeDef)*))? ('id'
	//	idPart+=TemplateRulePart
	//	| '{'
	//	idPart+=TemplateRulePart+
	//	'}')? (':'
	//	templateRulePart+=TemplateRulePart+)?
	//	';';
	public TemplateGeneratorRuleElements getTemplateGeneratorRuleAccess() {
		return pTemplateGeneratorRule;
	}
	
	public ParserRule getTemplateGeneratorRuleRule() {
		return getTemplateGeneratorRuleAccess().getRule();
	}
	
	//TypeDef:
	//	type=ID name=ID;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//TemplateRulePart:
	//	TemplateFunctionCall | LocalEvaluationCall | LocalOrValueCall | StaticTemplateRulePart | EvaluationCall | SlotCall
	//	| ForEachExpression | IfExpression;
	public TemplateRulePartElements getTemplateRulePartAccess() {
		return pTemplateRulePart;
	}
	
	public ParserRule getTemplateRulePartRule() {
		return getTemplateRulePartAccess().getRule();
	}
	
	//ForEachExpression:
	//	'for' type=ID? variable=ID ':' (exprVar=ID | completeExpr=STRING) ('join' join+=TemplateRulePart+)? '{'
	//	body+=TemplateRulePart*
	//	'}';
	public ForEachExpressionElements getForEachExpressionAccess() {
		return pForEachExpression;
	}
	
	public ParserRule getForEachExpressionRule() {
		return getForEachExpressionAccess().getRule();
	}
	
	//IfExpression:
	//	'if' '(' val=ID ')' '{'
	//	then+=TemplateRulePart*
	//	'}' ('else' '{'
	//	else+=TemplateRulePart*
	//	'}')?;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//StaticTemplateRulePart:
	//	value=STRING;
	public StaticTemplateRulePartElements getStaticTemplateRulePartAccess() {
		return pStaticTemplateRulePart;
	}
	
	public ParserRule getStaticTemplateRulePartRule() {
		return getStaticTemplateRulePartAccess().getRule();
	}
	
	//TemplateFunctionCall:
	//	'$' isReference?='@'? name=ID '(' (parValue+=TemplateParameterValue (',' parValue+=TemplateParameterValue)*)? ')';
	public TemplateFunctionCallElements getTemplateFunctionCallAccess() {
		return pTemplateFunctionCall;
	}
	
	public ParserRule getTemplateFunctionCallRule() {
		return getTemplateFunctionCallAccess().getRule();
	}
	
	//SlotCall:
	//	'§' name=ID ('[' minValue=INT ('..' maxValue=INT) ']')?;
	public SlotCallElements getSlotCallAccess() {
		return pSlotCall;
	}
	
	public ParserRule getSlotCallRule() {
		return getSlotCallAccess().getRule();
	}
	
	//LocalOrValueCall:
	//	'$' (name=ID | name=QUALIFIEDNAME);
	public LocalOrValueCallElements getLocalOrValueCallAccess() {
		return pLocalOrValueCall;
	}
	
	public ParserRule getLocalOrValueCallRule() {
		return getLocalOrValueCallAccess().getRule();
	}
	
	//LocalEvaluationCall:
	//	'$#' value=STRING;
	public LocalEvaluationCallElements getLocalEvaluationCallAccess() {
		return pLocalEvaluationCall;
	}
	
	public ParserRule getLocalEvaluationCallRule() {
		return getLocalEvaluationCallAccess().getRule();
	}
	
	//TemplateParameterValue:
	//	'$' propName=ID | varName=ID | '§' slotName=ID ('[' minValue=INT ('..' maxValue=INT) ']')? | direct=STRING;
	public TemplateParameterValueElements getTemplateParameterValueAccess() {
		return pTemplateParameterValue;
	}
	
	public ParserRule getTemplateParameterValueRule() {
		return getTemplateParameterValueAccess().getRule();
	}
	
	//EvaluationCall:
	//	'#' value=STRING;
	public EvaluationCallElements getEvaluationCallAccess() {
		return pEvaluationCall;
	}
	
	public ParserRule getEvaluationCallRule() {
		return getEvaluationCallAccess().getRule();
	}
	
	//PropertyRule:
	//	{PropertyRule} selector=Selector? '{'
	//	property+=Property*
	//	'}';
	public PropertyRuleElements getPropertyRuleAccess() {
		return pPropertyRule;
	}
	
	public ParserRule getPropertyRuleRule() {
		return getPropertyRuleAccess().getRule();
	}
	
	//Selector:
	//	selectors+=SingleSelector+;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//SingleSelector:
	//	(allTypes?='*' | referredName=(ID | STRING)) condition=Condition?;
	public SingleSelectorElements getSingleSelectorAccess() {
		return pSingleSelector;
	}
	
	public ParserRule getSingleSelectorRule() {
		return getSingleSelectorAccess().getRule();
	}
	
	//PossiblySignedNumber ecore::EBigDecimal:
	//	'-'? NUMBER;
	public PossiblySignedNumberElements getPossiblySignedNumberAccess() {
		return pPossiblySignedNumber;
	}
	
	public ParserRule getPossiblySignedNumberRule() {
		return getPossiblySignedNumberAccess().getRule();
	}
	
	//terminal NUMBER returns ecore::EBigDecimal:
	//	INT ('.' INT?);
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	////Actions ersetzt durch priority(), priorityAdd()
	//Property:
	//	(templateMatch=TemplateMatch | slotMatch=SlotMatch | name=(ID | STRING)) condition=Condition?
	//	':' value+=PropertyValue+ ';';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//TemplateMatch:
	//	'template' '(' selector=SingleSelector ')';
	public TemplateMatchElements getTemplateMatchAccess() {
		return pTemplateMatch;
	}
	
	public ParserRule getTemplateMatchRule() {
		return getTemplateMatchAccess().getRule();
	}
	
	//SlotMatch:
	//	'slot' '(' first=SingleSelector ',' second=SingleSelector ')';
	public SlotMatchElements getSlotMatchAccess() {
		return pSlotMatch;
	}
	
	public ParserRule getSlotMatchRule() {
		return getSlotMatchAccess().getRule();
	}
	
	//PropertyValue:
	//	(value=ID | value=STRING | valueNumb=PossiblySignedNumber | 'ocl' oclvalue=SpecificationCS) (hasProperty?='('
	//	(argument+=PropertyValue (',' argument+=PropertyValue)*)? ')')?;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	//TEST1MID:
	//	TEST1 | TEST2;
	public TEST1MIDElements getTEST1MIDAccess() {
		return pTEST1MID;
	}
	
	public ParserRule getTEST1MIDRule() {
		return getTEST1MIDAccess().getRule();
	}
	
	//TEST3MID:
	//	TEST3 | TEST2;
	public TEST3MIDElements getTEST3MIDAccess() {
		return pTEST3MID;
	}
	
	public ParserRule getTEST3MIDRule() {
		return getTEST3MIDAccess().getRule();
	}
	
	//terminal TEST1:
	//	'test1';
	public TerminalRule getTEST1Rule() {
		return tTEST1;
	}
	
	//terminal TEST3:
	//	'test3';
	public TerminalRule getTEST3Rule() {
		return tTEST3;
	}
	
	//terminal TEST2:
	//	'test2';
	public TerminalRule getTEST2Rule() {
		return tTEST2;
	}
	
	//Condition:
	//	'[' expression=SpecificationCS ']';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//SpecificationCS /* returns essentialocl::ExpSpecificationCS*/:
	//	ownedExpression=STRING;
	public SpecificationCSElements getSpecificationCSAccess() {
		return pSpecificationCS;
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
