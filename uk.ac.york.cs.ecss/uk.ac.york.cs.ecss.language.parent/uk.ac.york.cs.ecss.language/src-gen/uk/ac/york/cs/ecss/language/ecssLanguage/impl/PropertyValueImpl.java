/**
 * generated by Xtext 2.14.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import java.math.BigDecimal;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage;
import uk.ac.york.cs.ecss.language.ecssLanguage.PropertyValue;
import uk.ac.york.cs.ecss.language.ecssLanguage.SpecificationCS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyValueImpl#getValue <em>Value</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyValueImpl#getValueNumb <em>Value Numb</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyValueImpl#getOclvalue <em>Oclvalue</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyValueImpl#isHasProperty <em>Has Property</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyValueImpl#getArgument <em>Argument</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyValueImpl extends MinimalEObjectImpl.Container implements PropertyValue
{
  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getValueNumb() <em>Value Numb</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueNumb()
   * @generated
   * @ordered
   */
  protected static final BigDecimal VALUE_NUMB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValueNumb() <em>Value Numb</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueNumb()
   * @generated
   * @ordered
   */
  protected BigDecimal valueNumb = VALUE_NUMB_EDEFAULT;

  /**
   * The cached value of the '{@link #getOclvalue() <em>Oclvalue</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOclvalue()
   * @generated
   * @ordered
   */
  protected SpecificationCS oclvalue;

  /**
   * The default value of the '{@link #isHasProperty() <em>Has Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasProperty()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_PROPERTY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasProperty() <em>Has Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasProperty()
   * @generated
   * @ordered
   */
  protected boolean hasProperty = HAS_PROPERTY_EDEFAULT;

  /**
   * The cached value of the '{@link #getArgument() <em>Argument</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgument()
   * @generated
   * @ordered
   */
  protected EList<PropertyValue> argument;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcssLanguagePackage.Literals.PROPERTY_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY_VALUE__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BigDecimal getValueNumb()
  {
    return valueNumb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValueNumb(BigDecimal newValueNumb)
  {
    BigDecimal oldValueNumb = valueNumb;
    valueNumb = newValueNumb;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY_VALUE__VALUE_NUMB, oldValueNumb, valueNumb));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecificationCS getOclvalue()
  {
    return oclvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOclvalue(SpecificationCS newOclvalue, NotificationChain msgs)
  {
    SpecificationCS oldOclvalue = oclvalue;
    oclvalue = newOclvalue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE, oldOclvalue, newOclvalue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOclvalue(SpecificationCS newOclvalue)
  {
    if (newOclvalue != oclvalue)
    {
      NotificationChain msgs = null;
      if (oclvalue != null)
        msgs = ((InternalEObject)oclvalue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE, null, msgs);
      if (newOclvalue != null)
        msgs = ((InternalEObject)newOclvalue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE, null, msgs);
      msgs = basicSetOclvalue(newOclvalue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE, newOclvalue, newOclvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHasProperty()
  {
    return hasProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHasProperty(boolean newHasProperty)
  {
    boolean oldHasProperty = hasProperty;
    hasProperty = newHasProperty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY_VALUE__HAS_PROPERTY, oldHasProperty, hasProperty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PropertyValue> getArgument()
  {
    if (argument == null)
    {
      argument = new EObjectContainmentEList<PropertyValue>(PropertyValue.class, this, EcssLanguagePackage.PROPERTY_VALUE__ARGUMENT);
    }
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE:
        return basicSetOclvalue(null, msgs);
      case EcssLanguagePackage.PROPERTY_VALUE__ARGUMENT:
        return ((InternalEList<?>)getArgument()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE:
        return getValue();
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE_NUMB:
        return getValueNumb();
      case EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE:
        return getOclvalue();
      case EcssLanguagePackage.PROPERTY_VALUE__HAS_PROPERTY:
        return isHasProperty();
      case EcssLanguagePackage.PROPERTY_VALUE__ARGUMENT:
        return getArgument();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE:
        setValue((String)newValue);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE_NUMB:
        setValueNumb((BigDecimal)newValue);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE:
        setOclvalue((SpecificationCS)newValue);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__HAS_PROPERTY:
        setHasProperty((Boolean)newValue);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__ARGUMENT:
        getArgument().clear();
        getArgument().addAll((Collection<? extends PropertyValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE_NUMB:
        setValueNumb(VALUE_NUMB_EDEFAULT);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE:
        setOclvalue((SpecificationCS)null);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__HAS_PROPERTY:
        setHasProperty(HAS_PROPERTY_EDEFAULT);
        return;
      case EcssLanguagePackage.PROPERTY_VALUE__ARGUMENT:
        getArgument().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
      case EcssLanguagePackage.PROPERTY_VALUE__VALUE_NUMB:
        return VALUE_NUMB_EDEFAULT == null ? valueNumb != null : !VALUE_NUMB_EDEFAULT.equals(valueNumb);
      case EcssLanguagePackage.PROPERTY_VALUE__OCLVALUE:
        return oclvalue != null;
      case EcssLanguagePackage.PROPERTY_VALUE__HAS_PROPERTY:
        return hasProperty != HAS_PROPERTY_EDEFAULT;
      case EcssLanguagePackage.PROPERTY_VALUE__ARGUMENT:
        return argument != null && !argument.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (value: ");
    result.append(value);
    result.append(", valueNumb: ");
    result.append(valueNumb);
    result.append(", hasProperty: ");
    result.append(hasProperty);
    result.append(')');
    return result.toString();
  }

} //PropertyValueImpl
