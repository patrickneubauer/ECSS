/**
 * generated by Xtext 2.14.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.york.cs.ecss.language.ecssLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EcssLanguageFactoryImpl extends EFactoryImpl implements EcssLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EcssLanguageFactory init()
  {
    try
    {
      EcssLanguageFactory theEcssLanguageFactory = (EcssLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(EcssLanguagePackage.eNS_URI);
      if (theEcssLanguageFactory != null)
      {
        return theEcssLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EcssLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EcssLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EcssLanguagePackage.MODEL: return createModel();
      case EcssLanguagePackage.CONFIG: return createConfig();
      case EcssLanguagePackage.IMPORT: return createImport();
      case EcssLanguagePackage.TEMPLATE_RULE_OR_DEF: return createTemplateRuleOrDef();
      case EcssLanguagePackage.TEMPLATE_DEF: return createTemplateDef();
      case EcssLanguagePackage.TEMPLATE_GEN_DEF: return createTemplateGenDef();
      case EcssLanguagePackage.TEMPLATE_RULE: return createTemplateRule();
      case EcssLanguagePackage.BASIC_TEMPLATE_RULE: return createBasicTemplateRule();
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE: return createTemplateGeneratorRule();
      case EcssLanguagePackage.TYPE_DEF: return createTypeDef();
      case EcssLanguagePackage.TEMPLATE_RULE_PART: return createTemplateRulePart();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION: return createForEachExpression();
      case EcssLanguagePackage.IF_EXPRESSION: return createIfExpression();
      case EcssLanguagePackage.STATIC_TEMPLATE_RULE_PART: return createStaticTemplateRulePart();
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL: return createTemplateFunctionCall();
      case EcssLanguagePackage.SLOT_CALL: return createSlotCall();
      case EcssLanguagePackage.LOCAL_OR_VALUE_CALL: return createLocalOrValueCall();
      case EcssLanguagePackage.LOCAL_EVALUATION_CALL: return createLocalEvaluationCall();
      case EcssLanguagePackage.TEMPLATE_PARAMETER_VALUE: return createTemplateParameterValue();
      case EcssLanguagePackage.EVALUATION_CALL: return createEvaluationCall();
      case EcssLanguagePackage.PROPERTY_RULE: return createPropertyRule();
      case EcssLanguagePackage.SELECTOR: return createSelector();
      case EcssLanguagePackage.SINGLE_SELECTOR: return createSingleSelector();
      case EcssLanguagePackage.PROPERTY: return createProperty();
      case EcssLanguagePackage.TEMPLATE_MATCH: return createTemplateMatch();
      case EcssLanguagePackage.SLOT_MATCH: return createSlotMatch();
      case EcssLanguagePackage.PROPERTY_VALUE: return createPropertyValue();
      case EcssLanguagePackage.CONDITION: return createCondition();
      case EcssLanguagePackage.SPECIFICATION_CS: return createSpecificationCS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Config createConfig()
  {
    ConfigImpl config = new ConfigImpl();
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateRuleOrDef createTemplateRuleOrDef()
  {
    TemplateRuleOrDefImpl templateRuleOrDef = new TemplateRuleOrDefImpl();
    return templateRuleOrDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateDef createTemplateDef()
  {
    TemplateDefImpl templateDef = new TemplateDefImpl();
    return templateDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateGenDef createTemplateGenDef()
  {
    TemplateGenDefImpl templateGenDef = new TemplateGenDefImpl();
    return templateGenDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateRule createTemplateRule()
  {
    TemplateRuleImpl templateRule = new TemplateRuleImpl();
    return templateRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicTemplateRule createBasicTemplateRule()
  {
    BasicTemplateRuleImpl basicTemplateRule = new BasicTemplateRuleImpl();
    return basicTemplateRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateGeneratorRule createTemplateGeneratorRule()
  {
    TemplateGeneratorRuleImpl templateGeneratorRule = new TemplateGeneratorRuleImpl();
    return templateGeneratorRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDef createTypeDef()
  {
    TypeDefImpl typeDef = new TypeDefImpl();
    return typeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateRulePart createTemplateRulePart()
  {
    TemplateRulePartImpl templateRulePart = new TemplateRulePartImpl();
    return templateRulePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForEachExpression createForEachExpression()
  {
    ForEachExpressionImpl forEachExpression = new ForEachExpressionImpl();
    return forEachExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StaticTemplateRulePart createStaticTemplateRulePart()
  {
    StaticTemplateRulePartImpl staticTemplateRulePart = new StaticTemplateRulePartImpl();
    return staticTemplateRulePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateFunctionCall createTemplateFunctionCall()
  {
    TemplateFunctionCallImpl templateFunctionCall = new TemplateFunctionCallImpl();
    return templateFunctionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlotCall createSlotCall()
  {
    SlotCallImpl slotCall = new SlotCallImpl();
    return slotCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalOrValueCall createLocalOrValueCall()
  {
    LocalOrValueCallImpl localOrValueCall = new LocalOrValueCallImpl();
    return localOrValueCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalEvaluationCall createLocalEvaluationCall()
  {
    LocalEvaluationCallImpl localEvaluationCall = new LocalEvaluationCallImpl();
    return localEvaluationCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateParameterValue createTemplateParameterValue()
  {
    TemplateParameterValueImpl templateParameterValue = new TemplateParameterValueImpl();
    return templateParameterValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvaluationCall createEvaluationCall()
  {
    EvaluationCallImpl evaluationCall = new EvaluationCallImpl();
    return evaluationCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyRule createPropertyRule()
  {
    PropertyRuleImpl propertyRule = new PropertyRuleImpl();
    return propertyRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleSelector createSingleSelector()
  {
    SingleSelectorImpl singleSelector = new SingleSelectorImpl();
    return singleSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateMatch createTemplateMatch()
  {
    TemplateMatchImpl templateMatch = new TemplateMatchImpl();
    return templateMatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlotMatch createSlotMatch()
  {
    SlotMatchImpl slotMatch = new SlotMatchImpl();
    return slotMatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyValue createPropertyValue()
  {
    PropertyValueImpl propertyValue = new PropertyValueImpl();
    return propertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecificationCS createSpecificationCS()
  {
    SpecificationCSImpl specificationCS = new SpecificationCSImpl();
    return specificationCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EcssLanguagePackage getEcssLanguagePackage()
  {
    return (EcssLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EcssLanguagePackage getPackage()
  {
    return EcssLanguagePackage.eINSTANCE;
  }

} //EcssLanguageFactoryImpl
