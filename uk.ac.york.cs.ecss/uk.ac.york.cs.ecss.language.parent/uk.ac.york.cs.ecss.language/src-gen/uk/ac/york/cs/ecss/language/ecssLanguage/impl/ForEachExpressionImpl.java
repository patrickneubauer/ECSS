/**
 * generated by Xtext 2.14.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage;
import uk.ac.york.cs.ecss.language.ecssLanguage.ForEachExpression;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRulePart;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Each Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.ForEachExpressionImpl#getType <em>Type</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.ForEachExpressionImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.ForEachExpressionImpl#getExprVar <em>Expr Var</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.ForEachExpressionImpl#getCompleteExpr <em>Complete Expr</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.ForEachExpressionImpl#getJoin <em>Join</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.ForEachExpressionImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForEachExpressionImpl extends TemplateRulePartImpl implements ForEachExpression
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected static final String VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected String variable = VARIABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getExprVar() <em>Expr Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprVar()
   * @generated
   * @ordered
   */
  protected static final String EXPR_VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExprVar() <em>Expr Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprVar()
   * @generated
   * @ordered
   */
  protected String exprVar = EXPR_VAR_EDEFAULT;

  /**
   * The default value of the '{@link #getCompleteExpr() <em>Complete Expr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompleteExpr()
   * @generated
   * @ordered
   */
  protected static final String COMPLETE_EXPR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompleteExpr() <em>Complete Expr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompleteExpr()
   * @generated
   * @ordered
   */
  protected String completeExpr = COMPLETE_EXPR_EDEFAULT;

  /**
   * The cached value of the '{@link #getJoin() <em>Join</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJoin()
   * @generated
   * @ordered
   */
  protected EList<TemplateRulePart> join;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected EList<TemplateRulePart> body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForEachExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcssLanguagePackage.Literals.FOR_EACH_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.FOR_EACH_EXPRESSION__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(String newVariable)
  {
    String oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.FOR_EACH_EXPRESSION__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getExprVar()
  {
    return exprVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprVar(String newExprVar)
  {
    String oldExprVar = exprVar;
    exprVar = newExprVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.FOR_EACH_EXPRESSION__EXPR_VAR, oldExprVar, exprVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompleteExpr()
  {
    return completeExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompleteExpr(String newCompleteExpr)
  {
    String oldCompleteExpr = completeExpr;
    completeExpr = newCompleteExpr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.FOR_EACH_EXPRESSION__COMPLETE_EXPR, oldCompleteExpr, completeExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TemplateRulePart> getJoin()
  {
    if (join == null)
    {
      join = new EObjectContainmentEList<TemplateRulePart>(TemplateRulePart.class, this, EcssLanguagePackage.FOR_EACH_EXPRESSION__JOIN);
    }
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TemplateRulePart> getBody()
  {
    if (body == null)
    {
      body = new EObjectContainmentEList<TemplateRulePart>(TemplateRulePart.class, this, EcssLanguagePackage.FOR_EACH_EXPRESSION__BODY);
    }
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__JOIN:
        return ((InternalEList<?>)getJoin()).basicRemove(otherEnd, msgs);
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__BODY:
        return ((InternalEList<?>)getBody()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__TYPE:
        return getType();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__VARIABLE:
        return getVariable();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__EXPR_VAR:
        return getExprVar();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__COMPLETE_EXPR:
        return getCompleteExpr();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__JOIN:
        return getJoin();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__TYPE:
        setType((String)newValue);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__VARIABLE:
        setVariable((String)newValue);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__EXPR_VAR:
        setExprVar((String)newValue);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__COMPLETE_EXPR:
        setCompleteExpr((String)newValue);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__JOIN:
        getJoin().clear();
        getJoin().addAll((Collection<? extends TemplateRulePart>)newValue);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__BODY:
        getBody().clear();
        getBody().addAll((Collection<? extends TemplateRulePart>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__VARIABLE:
        setVariable(VARIABLE_EDEFAULT);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__EXPR_VAR:
        setExprVar(EXPR_VAR_EDEFAULT);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__COMPLETE_EXPR:
        setCompleteExpr(COMPLETE_EXPR_EDEFAULT);
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__JOIN:
        getJoin().clear();
        return;
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__BODY:
        getBody().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__VARIABLE:
        return VARIABLE_EDEFAULT == null ? variable != null : !VARIABLE_EDEFAULT.equals(variable);
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__EXPR_VAR:
        return EXPR_VAR_EDEFAULT == null ? exprVar != null : !EXPR_VAR_EDEFAULT.equals(exprVar);
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__COMPLETE_EXPR:
        return COMPLETE_EXPR_EDEFAULT == null ? completeExpr != null : !COMPLETE_EXPR_EDEFAULT.equals(completeExpr);
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__JOIN:
        return join != null && !join.isEmpty();
      case EcssLanguagePackage.FOR_EACH_EXPRESSION__BODY:
        return body != null && !body.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", variable: ");
    result.append(variable);
    result.append(", exprVar: ");
    result.append(exprVar);
    result.append(", completeExpr: ");
    result.append(completeExpr);
    result.append(')');
    return result.toString();
  }

} //ForEachExpressionImpl
