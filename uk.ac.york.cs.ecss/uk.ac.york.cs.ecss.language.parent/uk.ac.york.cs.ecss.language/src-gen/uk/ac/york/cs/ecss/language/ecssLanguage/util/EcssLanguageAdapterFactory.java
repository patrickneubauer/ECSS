/**
 * generated by Xtext 2.14.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import uk.ac.york.cs.ecss.language.ecssLanguage.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage
 * @generated
 */
public class EcssLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EcssLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EcssLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = EcssLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EcssLanguageSwitch<Adapter> modelSwitch =
    new EcssLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseConfig(Config object)
      {
        return createConfigAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseTemplateRuleOrDef(TemplateRuleOrDef object)
      {
        return createTemplateRuleOrDefAdapter();
      }
      @Override
      public Adapter caseTemplateDef(TemplateDef object)
      {
        return createTemplateDefAdapter();
      }
      @Override
      public Adapter caseTemplateGenDef(TemplateGenDef object)
      {
        return createTemplateGenDefAdapter();
      }
      @Override
      public Adapter caseTemplateRule(TemplateRule object)
      {
        return createTemplateRuleAdapter();
      }
      @Override
      public Adapter caseBasicTemplateRule(BasicTemplateRule object)
      {
        return createBasicTemplateRuleAdapter();
      }
      @Override
      public Adapter caseTemplateGeneratorRule(TemplateGeneratorRule object)
      {
        return createTemplateGeneratorRuleAdapter();
      }
      @Override
      public Adapter caseTypeDef(TypeDef object)
      {
        return createTypeDefAdapter();
      }
      @Override
      public Adapter caseTemplateRulePart(TemplateRulePart object)
      {
        return createTemplateRulePartAdapter();
      }
      @Override
      public Adapter caseForEachExpression(ForEachExpression object)
      {
        return createForEachExpressionAdapter();
      }
      @Override
      public Adapter caseIfExpression(IfExpression object)
      {
        return createIfExpressionAdapter();
      }
      @Override
      public Adapter caseStaticTemplateRulePart(StaticTemplateRulePart object)
      {
        return createStaticTemplateRulePartAdapter();
      }
      @Override
      public Adapter caseTemplateFunctionCall(TemplateFunctionCall object)
      {
        return createTemplateFunctionCallAdapter();
      }
      @Override
      public Adapter caseSlotCall(SlotCall object)
      {
        return createSlotCallAdapter();
      }
      @Override
      public Adapter caseLocalOrValueCall(LocalOrValueCall object)
      {
        return createLocalOrValueCallAdapter();
      }
      @Override
      public Adapter caseLocalEvaluationCall(LocalEvaluationCall object)
      {
        return createLocalEvaluationCallAdapter();
      }
      @Override
      public Adapter caseTemplateParameterValue(TemplateParameterValue object)
      {
        return createTemplateParameterValueAdapter();
      }
      @Override
      public Adapter caseEvaluationCall(EvaluationCall object)
      {
        return createEvaluationCallAdapter();
      }
      @Override
      public Adapter casePropertyRule(PropertyRule object)
      {
        return createPropertyRuleAdapter();
      }
      @Override
      public Adapter caseSelector(Selector object)
      {
        return createSelectorAdapter();
      }
      @Override
      public Adapter caseSingleSelector(SingleSelector object)
      {
        return createSingleSelectorAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseTemplateMatch(TemplateMatch object)
      {
        return createTemplateMatchAdapter();
      }
      @Override
      public Adapter caseSlotMatch(SlotMatch object)
      {
        return createSlotMatchAdapter();
      }
      @Override
      public Adapter casePropertyValue(PropertyValue object)
      {
        return createPropertyValueAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseSpecificationCS(SpecificationCS object)
      {
        return createSpecificationCSAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.Config <em>Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.Config
   * @generated
   */
  public Adapter createConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRuleOrDef <em>Template Rule Or Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRuleOrDef
   * @generated
   */
  public Adapter createTemplateRuleOrDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateDef <em>Template Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateDef
   * @generated
   */
  public Adapter createTemplateDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateGenDef <em>Template Gen Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateGenDef
   * @generated
   */
  public Adapter createTemplateGenDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRule <em>Template Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRule
   * @generated
   */
  public Adapter createTemplateRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.BasicTemplateRule <em>Basic Template Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.BasicTemplateRule
   * @generated
   */
  public Adapter createBasicTemplateRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateGeneratorRule <em>Template Generator Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateGeneratorRule
   * @generated
   */
  public Adapter createTemplateGeneratorRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TypeDef <em>Type Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TypeDef
   * @generated
   */
  public Adapter createTypeDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRulePart <em>Template Rule Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRulePart
   * @generated
   */
  public Adapter createTemplateRulePartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.ForEachExpression <em>For Each Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.ForEachExpression
   * @generated
   */
  public Adapter createForEachExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.IfExpression <em>If Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.IfExpression
   * @generated
   */
  public Adapter createIfExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.StaticTemplateRulePart <em>Static Template Rule Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.StaticTemplateRulePart
   * @generated
   */
  public Adapter createStaticTemplateRulePartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateFunctionCall <em>Template Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateFunctionCall
   * @generated
   */
  public Adapter createTemplateFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.SlotCall <em>Slot Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.SlotCall
   * @generated
   */
  public Adapter createSlotCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.LocalOrValueCall <em>Local Or Value Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.LocalOrValueCall
   * @generated
   */
  public Adapter createLocalOrValueCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.LocalEvaluationCall <em>Local Evaluation Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.LocalEvaluationCall
   * @generated
   */
  public Adapter createLocalEvaluationCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateParameterValue <em>Template Parameter Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateParameterValue
   * @generated
   */
  public Adapter createTemplateParameterValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.EvaluationCall <em>Evaluation Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.EvaluationCall
   * @generated
   */
  public Adapter createEvaluationCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.PropertyRule <em>Property Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.PropertyRule
   * @generated
   */
  public Adapter createPropertyRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.Selector <em>Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.Selector
   * @generated
   */
  public Adapter createSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.SingleSelector <em>Single Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.SingleSelector
   * @generated
   */
  public Adapter createSingleSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.TemplateMatch <em>Template Match</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.TemplateMatch
   * @generated
   */
  public Adapter createTemplateMatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.SlotMatch <em>Slot Match</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.SlotMatch
   * @generated
   */
  public Adapter createSlotMatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.PropertyValue <em>Property Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.PropertyValue
   * @generated
   */
  public Adapter createPropertyValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link uk.ac.york.cs.ecss.language.ecssLanguage.SpecificationCS <em>Specification CS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see uk.ac.york.cs.ecss.language.ecssLanguage.SpecificationCS
   * @generated
   */
  public Adapter createSpecificationCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //EcssLanguageAdapterFactory
