/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.york.cs.ecss.language.ecssLanguage.Condition;
import uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage;
import uk.ac.york.cs.ecss.language.ecssLanguage.SingleSelector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Single Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.SingleSelectorImpl#isAllTypes <em>All Types</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.SingleSelectorImpl#getReferredName <em>Referred Name</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.SingleSelectorImpl#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SingleSelectorImpl extends MinimalEObjectImpl.Container implements SingleSelector
{
  /**
   * The default value of the '{@link #isAllTypes() <em>All Types</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllTypes()
   * @generated
   * @ordered
   */
  protected static final boolean ALL_TYPES_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAllTypes() <em>All Types</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllTypes()
   * @generated
   * @ordered
   */
  protected boolean allTypes = ALL_TYPES_EDEFAULT;

  /**
   * The default value of the '{@link #getReferredName() <em>Referred Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferredName()
   * @generated
   * @ordered
   */
  protected static final String REFERRED_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReferredName() <em>Referred Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferredName()
   * @generated
   * @ordered
   */
  protected String referredName = REFERRED_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SingleSelectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcssLanguagePackage.Literals.SINGLE_SELECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAllTypes()
  {
    return allTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllTypes(boolean newAllTypes)
  {
    boolean oldAllTypes = allTypes;
    allTypes = newAllTypes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.SINGLE_SELECTOR__ALL_TYPES, oldAllTypes, allTypes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getReferredName()
  {
    return referredName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferredName(String newReferredName)
  {
    String oldReferredName = referredName;
    referredName = newReferredName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.SINGLE_SELECTOR__REFERRED_NAME, oldReferredName, referredName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.SINGLE_SELECTOR__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.SINGLE_SELECTOR__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.SINGLE_SELECTOR__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.SINGLE_SELECTOR__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.SINGLE_SELECTOR__CONDITION:
        return basicSetCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.SINGLE_SELECTOR__ALL_TYPES:
        return isAllTypes();
      case EcssLanguagePackage.SINGLE_SELECTOR__REFERRED_NAME:
        return getReferredName();
      case EcssLanguagePackage.SINGLE_SELECTOR__CONDITION:
        return getCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.SINGLE_SELECTOR__ALL_TYPES:
        setAllTypes((Boolean)newValue);
        return;
      case EcssLanguagePackage.SINGLE_SELECTOR__REFERRED_NAME:
        setReferredName((String)newValue);
        return;
      case EcssLanguagePackage.SINGLE_SELECTOR__CONDITION:
        setCondition((Condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.SINGLE_SELECTOR__ALL_TYPES:
        setAllTypes(ALL_TYPES_EDEFAULT);
        return;
      case EcssLanguagePackage.SINGLE_SELECTOR__REFERRED_NAME:
        setReferredName(REFERRED_NAME_EDEFAULT);
        return;
      case EcssLanguagePackage.SINGLE_SELECTOR__CONDITION:
        setCondition((Condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.SINGLE_SELECTOR__ALL_TYPES:
        return allTypes != ALL_TYPES_EDEFAULT;
      case EcssLanguagePackage.SINGLE_SELECTOR__REFERRED_NAME:
        return REFERRED_NAME_EDEFAULT == null ? referredName != null : !REFERRED_NAME_EDEFAULT.equals(referredName);
      case EcssLanguagePackage.SINGLE_SELECTOR__CONDITION:
        return condition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (allTypes: ");
    result.append(allTypes);
    result.append(", referredName: ");
    result.append(referredName);
    result.append(')');
    return result.toString();
  }

} //SingleSelectorImpl
