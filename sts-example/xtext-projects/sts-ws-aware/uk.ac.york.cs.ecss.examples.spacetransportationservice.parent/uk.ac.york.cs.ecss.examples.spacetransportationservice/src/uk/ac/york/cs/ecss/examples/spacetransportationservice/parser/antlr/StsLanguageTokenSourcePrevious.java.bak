/*
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.examples.spacetransportationservice.parser.antlr;

import org.antlr.runtime.Token;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.parser.antlr.AbstractIndentationTokenSource;
import org.antlr.runtime.CommonToken;
import org.eclipse.xtext.parser.antlr.ITokenAcceptor;

import uk.ac.york.cs.ecss.examples.spacetransportationservice.parser.antlr.internal.InternalStsLanguageParser;

public class StsLanguageTokenSourcePrevious extends AbstractIndentationTokenSource {

	public StsLanguageTokenSourcePrevious(TokenSource delegate) {
		super(delegate);
	}

	// shouldSpitToken

	@Override
	protected boolean shouldSplitTokenImpl(Token token) {
		// TODO Review assumption
		return token.getType() == InternalStsLanguageParser.RULE_WS;
	}

	// doSplitEofToken

	// shouldEmitPendingEndTokens

	// nextToken

	/**
	 * The token was previously determined as potentially to-be-splitted thus we
	 * emit additional indentation or dedenting tokens.
	 */
	@Override
	protected void doSplitTokenImpl(Token token, ITokenAcceptor result) {
		String text = token.getText();
		int indentation = computeIndentation(text);
		if (indentation == -1) {
			result.accept(token);
		} else if (indentation == currentIndentation) {
			result.accept(createNewlineToken(nextOffset));
			result.accept(token);
		} else if (indentation > currentIndentation) {
			splitIntoBeginToken(token, indentation, result);
		} else if (indentation < currentIndentation) {
			while (indentation < currentIndentation) {
				indentationStack.pop();
				currentIndentation = indentationStack.peek();
				result.accept(createEndToken(nextOffset));
				result.accept(createNewlineToken(nextOffset));
			}
			if (indentation > currentIndentation) {
				splitIntoBeginToken(token, indentation, result);
				return;
			}
			result.accept(token);
		} else {
			throw new IllegalStateException(String.valueOf(indentation));
		}
	}

	// handleRemainingText

	// dreaseIndentation

	// splitWithText

	// private in superclass as well
	private void splitIntoBeginToken(Token token, int indentation, ITokenAcceptor result) {
		result.accept(token);
		if (shouldEmitPendingEndTokens()) {
			Token nextToken = getDelegate().nextToken();
			if (shouldSplitToken(nextToken)) {
				nextOffset = ((CommonToken) token).getStopIndex() + 1;
				doSplitToken(nextToken, result);
			} else {
				indentationStack.push(indentation);
				currentIndentation = indentation;
				result.accept(createBeginToken(((CommonToken) token).getStopIndex() + 1));
				result.accept(nextToken);
			}
		} else {
			indentationStack.push(indentation);
			currentIndentation = indentation;
			result.accept(createBeginToken(((CommonToken) token).getStopIndex() + 1));
		}
	}

	@Override
	protected Token createEndToken(int offset) {
		CommonToken result = new CommonToken(getEndTokenType());
		result.setText("");
		result.setChannel(Token.DEFAULT_CHANNEL);
		result.setStartIndex(offset);
		result.setStopIndex(offset - 1);
		return result;
	}

	@Override
	protected int getEndTokenType() {
		// TODO Review assumption
		return InternalStsLanguageParser.RULE_END;
	}

	@Override
	protected int getBeginTokenType() {
		// TODO Review assumption
		return InternalStsLanguageParser.RULE_BEGIN;
	}

	protected int getNewlineTokenType() {
		// TODO Review assumption
		return InternalStsLanguageParser.RULE_NEWLINE;
	}

	protected Token createBeginToken(int offset) {
		CommonToken result = new CommonToken(getBeginTokenType());
		result.setText("");
		result.setChannel(Token.DEFAULT_CHANNEL);
		result.setStartIndex(offset);
		result.setStopIndex(offset - 1);
		return result;
	}

	// computeIndentationRelevantCharCount

	// computeIndentation

	// getTabWidth

	protected String makePrintable(String text) {
		String result = "";
		for (char c : text.toCharArray()) {
			if (c == '\n')
				result = result + "<NL>";
			else if (c == '\r')
				result = result + "<CR>";
			else if (c == '\t')
				result = result + "<TAB>";
			else if (c == ' ')
				result = result + "<SP>";
			else
				result = result + c;
		}
		return result;
	}

	protected Token createNewlineToken(int offset) {
		CommonToken result = new CommonToken(getNewlineTokenType());
		result.setText("");
		result.setChannel(Token.DEFAULT_CHANNEL);
		result.setStartIndex(offset);
		result.setStopIndex(offset - 1);
		return result;
	}

}
