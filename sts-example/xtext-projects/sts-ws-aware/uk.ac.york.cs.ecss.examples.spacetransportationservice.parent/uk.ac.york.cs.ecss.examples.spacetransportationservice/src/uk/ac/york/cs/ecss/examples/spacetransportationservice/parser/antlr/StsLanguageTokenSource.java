/*
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.examples.spacetransportationservice.parser.antlr;

import org.antlr.runtime.Token;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.parser.antlr.AbstractIndentationTokenSource;
import org.antlr.runtime.CommonToken;
import org.eclipse.xtext.parser.antlr.ITokenAcceptor;

import uk.ac.york.cs.ecss.examples.spacetransportationservice.parser.antlr.internal.InternalStsLanguageParser;

public class StsLanguageTokenSource extends AbstractIndentationTokenSource {

	public StsLanguageTokenSource(TokenSource delegate) {
		super(delegate);
	}

	// shouldSpitToken

	@Override
	protected boolean shouldSplitTokenImpl(Token token) {
		// TODO Review assumption
		return token.getType() == InternalStsLanguageParser.RULE_WS;
	}

	// doSplitEofToken

	// shouldEmitPendingEndTokens

	// nextToken
	
	@Override
	/**
	 * The token was previously determined as potentially to-be-splitted thus we
	 * emit additional indentation or dedenting tokens.
	 */
	protected void doSplitTokenImpl(Token token, ITokenAcceptor result) {
		String text = token.getText();
		int indentation = computeIndentation(text);
		 System.out.println(indentation + "	::	"+makePrintable(text));		
		if (indentation == -1 || indentation == currentIndentation) {
			// no change of indentation level detected simply process the token
			result.accept(token);
		} else if (indentation > currentIndentation) {
			// indentation level increased
			splitIntoBeginToken(token, indentation, result);
		} else if (indentation < currentIndentation) {
			// indentation level decreased
			int charCount = computeIndentationRelevantCharCount(text);
			if (charCount > 0) {
				// emit whitespace including newline
				splitWithText(token, text.substring(0, charCount), result);	
			}
			// emit end tokens at the beginning of the line
			decreaseIndentation(indentation, result);
			if (charCount != text.length()) {
				handleRemainingText(token, text.substring(charCount), indentation, result);
			}
		} else {
			throw new IllegalStateException(String.valueOf(indentation));
		}
	}
	
	private void splitIntoBeginToken(Token token, int indentation, ITokenAcceptor result) {
		result.accept(token);
		if (shouldEmitPendingEndTokens()) {
			Token nextToken = getDelegate().nextToken();
			if (shouldSplitToken(nextToken)) {
				nextOffset = ((CommonToken) token).getStopIndex() + 1;
				doSplitToken(nextToken, result);
			} else {
				indentationStack.push(indentation);
				currentIndentation = indentation;
				result.accept(createBeginToken(((CommonToken) token).getStopIndex() + 1));
				result.accept(nextToken);
			}	
		} else {
			indentationStack.push(indentation);
			currentIndentation = indentation;
			result.accept(createBeginToken(((CommonToken) token).getStopIndex() + 1));
		}
	}

	// handleRemainingText

	// dreaseIndentation

	// splitWithText

	@Override
	protected int getEndTokenType() {
		// TODO Review assumption
		return InternalStsLanguageParser.RULE_END;
	}

	@Override
	protected int getBeginTokenType() {
		// TODO Review assumption
		return InternalStsLanguageParser.RULE_BEGIN;
	}

	// computeIndentationRelevantCharCount

	// computeIndentation

	// getTabWidth

	protected String makePrintable(String text) {
		String result = "";
		for (char c : text.toCharArray()) {
			if (c == '\n')
				result = result + "<NL>";
			else if (c == '\r')
				result = result + "<CR>";
			else if (c == '\t')
				result = result + "<TAB>";
			else if (c == ' ')
				result = result + "<SP>";
			else
				result = result + c;
		}
		return result;
	}

}
