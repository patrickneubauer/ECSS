// automatically generated by Xtext
grammar uk.ac.york.cs.ecss.examples.spacetransportationservice.StsLanguageHutn with org.eclipse.xtext.common.Terminals

import "http://cs.york.ac.uk/ecss/examples/spacetransportationservice" as sts
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/2008/Xtext"

SpaceTransportationService returns sts::SpaceTransportationService:
	{sts::SpaceTransportationService}
	'SpaceTransportationService'
	'{'
		('launchSites' ':' launchSites+=LaunchSite ( "," launchSites+=LaunchSite)* )?
		('engineTypes' ':' engineTypes+=EngineType ( "," engineTypes+=EngineType)* )?
		('spacecrafts' ':' spacecrafts+=Spacecraft ( "," spacecrafts+=Spacecraft)* )?
	'}';

LaunchSite returns sts::LaunchSite:
	'LaunchSite'
	name=ID
	'{'
		('locationLatitude' locationLatitude=EDouble)?
		('locationLongitude' locationLongitude=EDouble)?
		('operator' operator=EString)?
		('numberOfLaunchpads' numberOfLaunchpads=EInt)?
		'operational' operational=EBoolean
		('physicalProperties' ':' physicalProperties+=PhysicalProperty ( "," physicalProperties+=PhysicalProperty)* )?
	'}';

EngineType returns sts::EngineType:
	'EngineType'
	name=ID
	'{'
		('fuelKind' fuelKind=EString)
	'}';

Spacecraft returns sts::Spacecraft:
	'Spacecraft'
	name=ID
	'{'
		('functions' ':' functions+=Function ( "," functions+=Function)* )?
		('manufacturer' manufacturer=EString)?
		('countryOfOrigin' countryOfOrigin=EString)?
		('relaunchCostInMioUSD' relaunchCostInMioUSD=EInt)?
		('launchSites' ':' 'LaunchSite' launchSites+=[sts::LaunchSite] ( "," 'LaunchSite' launchSites+=[sts::LaunchSite])* )?
		('stages' ':' stages+=Stage ( "," stages+=Stage)* )?
		('physicalProperties' ':' physicalProperties+=PhysicalProperty ( "," physicalProperties+=PhysicalProperty)* )?
	'}';

EString returns ecore::EString:
	STRING;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

PhysicalProperty returns sts::PhysicalProperty:
	'PhysicalProperty'
	'{'
		('type' type=PhysicalPropertyType)?
		('unit' unit=EString)?
		'value' value=EDouble
	'}';
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum PhysicalPropertyType returns sts::PhysicalPropertyType:
				LENGTH = '"LENGTH"' | WIDTH = '"WIDTH"' | DIAMETER = '"DIAMETER"' | PERIMETER = '"PERIMETER"' | AREA = '"AREA"' | VOLUME = '"VOLUME"' | MASS = '"MASS"';

Stage returns sts::Stage:
	'Stage'
	name=ID
	'{'
		'engineAmount' engineAmount=EInt
		'engineType' engineType=[sts::EngineType]
		('physicalProperties' ':' physicalProperties+=PhysicalProperty ( "," physicalProperties+=PhysicalProperty)* )?
	'}';

enum Function returns sts::Function:
				MARS_COLONIZATION = '"MARS_COLONIZATION"' | EARTH_LUNAR_TRANSPORT = '"EARTH_LUNAR_TRANSPORT"' | MULTIPLANETARY_TRANSPORT = '"MULTIPLANETARY_TRANSPORT"' | INTERCONTINENTAL_TRANSPORT = '"INTERCONTINENTAL_TRANSPORT"' | ORBITAL_LAUNCHER = '"ORBITAL_LAUNCHER"';
				
// --- start: Terminals.xtext ----
terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal STRING:
			'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
			"'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;

terminal ML_COMMENT: '/*' -> '*/';

terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
// --- end: Terminals.xtext ----