// automatically generated by Xtext
grammar uk.ac.york.cs.ecss.examples.spacetransportationservice.StsLanguage with org.eclipse.xtext.common.Terminals

import "http://cs.york.ac.uk/ecss/examples/spacetransportationservice" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SpaceTransportationService returns SpaceTransportationService:
	{SpaceTransportationService}
	'SpaceTransportationService'
	'{'
		('launchSites' '{' launchSites+=LaunchSite ( "," launchSites+=LaunchSite)* '}' )?
		('engineTypes' '{' engineTypes+=EngineType ( "," engineTypes+=EngineType)* '}' )?
		('spacecraft' '{' spacecrafts+=Spacecraft ( "," spacecrafts+=Spacecraft)* '}' )?
	'}';






LaunchSite returns LaunchSite:
	operational?='operational'
	'LaunchSite'
	name=EString
	'{'
		'locationLatitude' locationLatitude=EDouble
		'locationLongitude' locationLongitude=EDouble
		('operator' operator=EString)?
		'numberOfLaunchpads' numberOfLaunchpads=EInt
		('physicalProperties' '{' physicalProperties+=PhysicalProperty ( "," physicalProperties+=PhysicalProperty)* '}' )?
	'}';

EngineType returns EngineType:
	'EngineType'
	name=EString
	'{'
		'fuelKind' fuelKind=EString
	'}';

Spacecraft returns Spacecraft:
	'Spacecraft'
	name=EString
	'{'
		('functions' '{' functions+=Function ( "," functions+=Function)* '}' )?
		('manufacturer' manufacturer=EString)?
		('countryOfOrigin' countryOfOrigin=EString)?
		'relaunchCostInMioUSD' relaunchCostInMioUSD=EInt
		('launchSites' '(' launchSites+=[LaunchSite|EString] ( "," launchSites+=[LaunchSite|EString])* ')' )?
		('stages' '{' stages+=Stage ( "," stages+=Stage)* '}' )?
		('physicalProperties' '{' physicalProperties+=PhysicalProperty ( "," physicalProperties+=PhysicalProperty)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

PhysicalProperty returns PhysicalProperty:
	'PhysicalProperty'
	'{'
		'type' type=PhysicalPropertyType
		('unit' unit=EString)?
		'value' value=EDouble
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum PhysicalPropertyType returns PhysicalPropertyType:
				LENGTH = 'LENGTH' | WIDTH = 'WIDTH' | DIAMETER = 'DIAMETER' | PERIMETER = 'PERIMETER' | AREA = 'AREA' | VOLUME = 'VOLUME' | MASS = 'MASS';

Stage returns Stage:
	'Stage'
	name=EString
	'{'
		'engineAmount' engineAmount=EInt
		'engineType' engineType=[EngineType|EString]
		('physicalProperties' '{' physicalProperties+=PhysicalProperty ( "," physicalProperties+=PhysicalProperty)* '}' )?
	'}';

enum Function returns Function:
				MARS_COLONIZATION = 'MARS_COLONIZATION' | EARTH_LUNAR_TRANSPORT = 'EARTH_LUNAR_TRANSPORT' | MULTIPLANETARY_TRANSPORT = 'MULTIPLANETARY_TRANSPORT' | INTERCONTINENTAL_TRANSPORT = 'INTERCONTINENTAL_TRANSPORT' | ORBITAL_LAUNCHER = 'ORBITAL_LAUNCHER';
