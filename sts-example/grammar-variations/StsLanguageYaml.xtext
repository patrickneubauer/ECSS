// hand-crafted whitespace-aware grammar
grammar uk.ac.york.cs.ecss.examples.spacetransportationservice.StsLanguageYaml with org.eclipse.xtext.common.Terminals

import "http://cs.york.ac.uk/ecss/examples/spacetransportationservice" as sts
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/2008/Xtext"

SpaceTransportationService returns sts::SpaceTransportationService:
	{sts::SpaceTransportationService}
	'SpaceTransportationService' ':' 
	BEGIN
		(
			( 'launchSites' ':' BEGIN launchSites+=LaunchSite ( launchSites+=LaunchSite)* END )+ &
			( 'engineTypes' ':' BEGIN engineTypes+=EngineType ( engineTypes+=EngineType)* END )? &
			( 'spacecrafts' ':' BEGIN spacecrafts+=Spacecraft ( spacecrafts+=Spacecraft)* END )?
		)
	END
;

LaunchSite returns sts::LaunchSite:
	'-  ' name=ID ':'
	BEGIN
		(
			( 'operational' ':' operational=EBoolean ) &
			( 'locationLatitude' ':' locationLatitude=EDouble)? &
			( 'locationLongitude' ':' locationLongitude=EDouble)? & 
			( 'operator' ':' operator=EString)? &
			( 'numberOfLaunchpads' ':' numberOfLaunchpads=EInt)? &
			( 'physicalProperties' ':' BEGIN physicalProperties+=PhysicalProperty ( physicalProperties+=PhysicalProperty)* END )?	
		)
	END
;

EngineType returns sts::EngineType:
	'-  ' name=ID ':'
	BEGIN
		(
			( 'fuelKind' ':' fuelKind=EString )
		)
	END
;

Spacecraft returns sts::Spacecraft:
	'-  ' name=ID ':'
	BEGIN
		(
			// start with 'relaunchCostInMioUSD' (required attribute)
			( 'relaunchCostInMioUSD' ':' relaunchCostInMioUSD=EInt ) &
			( 'stages' ':' BEGIN stages+=Stage ( stages+=Stage)* END )? &	
			( 'launchSites' ':' BEGIN '- ' launchSites+=[sts::LaunchSite] ( '- ' launchSites+=[sts::LaunchSite])* END )? &
			( 'functions' ':' BEGIN '- ' functions+=Function ( '- ' functions+=Function)* END )? &	
			( 'manufacturer' ':' manufacturer=EString)? &
			( 'countryOfOrigin' ':' countryOfOrigin=EString)? &
			( 'physicalProperties' ':' BEGIN '- ' physicalProperties+=PhysicalProperty ( '- ' physicalProperties+=PhysicalProperty)* END )?	
		)
	END
;

EString returns ecore::EString:
	STRING;

EDouble returns ecore::EDouble:
	INT? '.' INT (('E'|'e') INT)?;

EInt returns ecore::EInt:
	INT;

PhysicalProperty returns sts::PhysicalProperty:
	'- ' type=PhysicalPropertyType
	BEGIN
		(
			( 'value' ':' value=EDouble ) & 
			( 'unit' ':' unit=EString )?
		)
	END
;
	
Stage returns sts::Stage:
	'-  ' name=ID ':'
	BEGIN
		(
			// start with 'engineAmount' (required attribute)
			( 'engineAmount' ':' engineAmount=EInt ) &
			( 'engineType' ':' engineType=[sts::EngineType] ) &	
			( 'physicalProperties' ':' BEGIN physicalProperties+=PhysicalProperty ( physicalProperties+=PhysicalProperty)* END )?	
		)
	END
;

enum Function returns sts::Function:
				MARS_COLONIZATION = 'MARS_COLONIZATION' | EARTH_LUNAR_TRANSPORT = 'EARTH_LUNAR_TRANSPORT' | MULTIPLANETARY_TRANSPORT = 'MULTIPLANETARY_TRANSPORT' | INTERCONTINENTAL_TRANSPORT = 'INTERCONTINENTAL_TRANSPORT' | ORBITAL_LAUNCHER = 'ORBITAL_LAUNCHER';
				
EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum PhysicalPropertyType returns sts::PhysicalPropertyType:
				LENGTH = 'LENGTH' | WIDTH = 'WIDTH' | DIAMETER = 'DIAMETER' | PERIMETER = 'PERIMETER' | AREA = 'AREA' | VOLUME = 'VOLUME' | MASS = 'MASS';

// --- start: Terminals.xtext ----
terminal ID:
	'^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal STRING:
			'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
			"'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;

terminal ML_COMMENT: '/*' -> '*/';

terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
// --- end: Terminals.xtext ----

	
// The following synthetic tokens are used for the indentation-aware blocks
terminal BEGIN: 'synthetic:BEGIN';		// increase indentation
//terminal NEWLINE: 'synthetic:';				// new line (same indentation)
terminal END: 'synthetic:END';      		// decrease indentation