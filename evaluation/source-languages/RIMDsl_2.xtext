grammar com.temenos.interaction.rimdsl.RIMDsl with org.eclipse.xtext.common.Terminals

generate rim "http://www.temenos.com/interaction/rimdsl/RimDsl"

DomainModel:
    (rims += Ref)*
;

DomainDeclaration:
    'domain' name = QualifiedName (annotations+=MdfAnnotation)* '{'
        (rims += Ref)*
    '}'
;
 
Ref:
    DomainDeclaration | ResourceInteractionModel | Use
;

QualifiedName:
    ID ('.' ID)*
;

Use:
    'use' importedNamespace = QualifiedNameWithWildcard
;
  
QualifiedNameWithWildcard:
    QualifiedName '.*'?
;

ResourceInteractionModel:
    'rim' name = ID (annotations+=MdfAnnotation)* '{'
    	// elements can appear in any order
    	(
	        (events += Event)*
    	    & (commands += Command)*
    	    // MAY define a 'basepath:'
            & (basepath=BasePath)?
        	& (relations += Relation)*
        	& (states += State)*
       	)
    '}'
;
Event:
	'event' name=ID (annotations+=MdfAnnotation)* '{' 
     	'method:' httpMethod=ID
    '}'
;

Command:
	'command' name=ID (spec=CommandSpec)?
;

CommandSpec:
	(
	'{'
		// force create of the container object i.e. CommandSpec
        {CommandSpec}
        (
        'properties' '[' ((properties+=CommandProperty) (',' properties+=CommandProperty)* ) ']'
        )
    '}'
    )
;

CommandProperty:
    name=ID '=' (value=ID | value=DQ_STRING)
;

BasePath:
    'basepath:' name=URISTRING
;

Relation:
	'relation' name=ID '{' 
    	// elements can appear in any order
    	(
    		// MUST define 'fqn:'
	     	'fqn:' fqn=DQ_STRING
	     	// MAY define 'description:'
    	 	& ('description:' description=DQ_STRING)?
     	)
    '}'	
;
State: 
    (isInitial?='initial' | isException?='exception')? 'resource' name=ID (annotations+=MdfAnnotation)* '{'
    	// elements can appear in any order
    	(
            // MUST define a 'type:'
            type=ResourceType
                // MUST define an 'entity:'
                & entity=Entity
               	// MUST define a 'view:' command or 'actions []' commands
                & impl=ImplRef
                // MAY define relations [ "http://www.temenos.com/rels/input" , GloballyDefinedRelation ]
                & ('relations' '[' ((relations+=RelationRef) (',' relations+=RelationRef)* ) ']')?
                // MAY define a 'path:'
                & path=Path?
                // MAY define one or more transitions
                & transitions+=TransitionRef*
                // MAY define an onerror transition
                & ('onerror' '-->' errorState=[State|QualifiedName])?
                // MAY define a cache maxage
                & ( 'cache:' cache=INT )?
    	)
    '}'
;

// implementation reference
ImplRef:
	(
		// view: SomeCommand
		('view:' view=ResourceCommand ) 
			// actions [ SomeCommand, AnotherCommand ]
			| ('actions' '[' ((actions+=ResourceCommand) (',' actions+=ResourceCommand)* ) ']')
			// commands [ GET: SomeCommand ]
            | ('commands' ':'? '[' ((methods+=MethodRef) (',' methods+=MethodRef)* ) ']')
	)
;

// method reference
MethodRef:
	// Event : SomeCommand
	event=[Event] ':' command=ResourceCommand
;

// Order of transitions should be non deterministic
TransitionRef:
    Transition | TransitionForEach | TransitionAuto | TransitionRedirect | TransitionEmbedded | TransitionEmbeddedForEach
;

// |Locator=ResourceLocator
ResourceLocator:
                'locator' name=ID '(' args+=DQ_STRING (',' args+=DQ_STRING)* ')' 
;

// create regular transitions
Transition:
    (event=[Event] | 'LINK') '->' (state=[State|QualifiedName]|locator=ResourceLocator|name=DQ_STRING) (spec=TransitionSpec)?
;

// create foreach transitions
TransitionForEach:
    (event=[Event] | 'LINK') '*->' (state=[State|QualifiedName]|locator=ResourceLocator|name=DQ_STRING) (spec=TransitionSpec)?
;

// create foreach embedded transitions
TransitionEmbeddedForEach:
    (event=[Event] | 'LINK') '*+>' (state=[State|QualifiedName]|locator=ResourceLocator|name=DQ_STRING) (spec=TransitionSpec)?
;

// create AUTO transitions
TransitionAuto:
    (event=[Event] | 'LINK') '-->' (state=[State|QualifiedName]|locator=ResourceLocator|name=DQ_STRING) (spec=TransitionSpec)?
;

// create REDIRECT transitions
TransitionRedirect:
    (event=[Event] | 'LINK') '->>' (state=[State|QualifiedName]|locator=ResourceLocator|name=DQ_STRING) (spec=TransitionSpec)?
;

// create embedded transitions
TransitionEmbedded:
    (event=[Event] | 'LINK') '+->' (state=[State|QualifiedName]|locator=ResourceLocator|name=DQ_STRING) (spec=TransitionSpec)?
;

TransitionSpec:
	(
	'{'
		// force create of the container object i.e. TransitionSpec
        {TransitionSpec}
        (
            // MAY define a 'condition:' for this transition
            ('condition:' eval=Expression)?
                // MAY define parameters for this transition
                & ('parameters' '[' ((uriLinks+=UriLink) (',' uriLinks+=UriLink)* ) ']')?
                // MAY define a 'title:'
                & title=Title?
                // MAY define an image id
                & id=LinkId?
                // MAY define a source field
                & field=SourceField?
        )
    '}'
    )
;

Expression:
    (expressions+=Function) ('&&' (expressions+=Function))* 
;

Function: Function_OK|Function_NOT_FOUND;

Function_OK:
    {OKFunction} 'OK' '(' state=[State] ')'
;

Function_NOT_FOUND:
    {NotFoundFunction} 'NOT_FOUND' '(' state=[State] ')'
;

RelationRef:
    relation=[Relation] | RelationConstant 
;

RelationConstant:
    name=DQ_STRING    
;


Path:
    'path:' name=URISTRING
;

ResourceType:
    'type:' ((isCollection?='collection') | (isItem?='item'))
;

Entity:
    'entity:' name=ID
;

ResourceCommand:
    command=[Command]  ('{' 
        'properties' '[' ((properties+=CommandProperty) (',' properties+=CommandProperty)* ) ']'
    '}')?
;

UriLink:
    (templateProperty=ID '=' entityProperty=UriLinkage)
;

UriLinkage:
	{UriLinkage} name=URIPARAM 
;

Title:
    'title:' name=DQ_STRING    
;

LinkId:
	'id:' name=DQ_STRING
;

SourceField:
    'field:' name=DQ_STRING
;

terminal URISTRING	: 
	'"'
	('/'
        (
            'a'..'z'|'A'..'Z'|
            '0'..'9'|
            '$'|
            '-'|
            '_'|
            '~'|
            '+'|
            '.'|
            "'" |
            '('|')'|
            '{'|'}'|   // with uri template
            (
                '\\'
                ('0'..'9'|'a'..'f'|'A'..'F')
                ('0'..'9'|'a'..'f'|'A'..'F')
            ) |
            (
                '%'
                ('0'..'9')
                ('0'..'9')
            )
        )*
    )*
    '"'
;

URIPARAM : DQ_STRING;
// almost the same as STRING, but only accepts a string defined by a double quote
terminal DQ_STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|"'"|'u'|'\\')
				| !('\\'|'"')
			)* '"'
		; 

MdfAnnotation returns MdfAnnotation:
    '@'    namespace=ID ':' name=ID ('(' properties+=DQ_STRING (',' properties+=DQ_STRING)* ')')?;

