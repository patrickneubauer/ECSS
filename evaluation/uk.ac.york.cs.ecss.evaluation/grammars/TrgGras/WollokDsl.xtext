// automatically generated by Xtext
grammar trglang.org.uqbar.project.wollok.WollokDsl with org.eclipse.xtext.common.Terminals

import "http://www.org.srclang/uqbar/project/wollok/WollokDsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

WFile returns WFile:{WFile}'WFile''{'(( imports += Import ( ',' imports += Import)*)?)(( elements += WLibraryElement ( ',' elements += WLibraryElement)*)?)(( main = WProgram )?)(( tests += WTest ( ',' tests += WTest)*)?)(( suites += WSuite ( ',' suites += WSuite)*)?)'}';

WLibraryElement returns WLibraryElement:WClass | WExpression | WPackage | WNamedObject | WMixin;

WTest returns WTest:{WTest}'WTest'(name = ID)?'{'(( elements += WExpression ( ',' elements += WExpression)*)?)'}';

WProgram returns WProgram:{WProgram}'WProgram'(name = ID)?'{'(( elements += WExpression ( ',' elements += WExpression)*)?)'}';

Import returns Import:{Import}'Import''{'(( importedNamespace = ESTRING )?)'}';

WSuite returns WSuite:{WSuite}'WSuite'(name = ID)?'{'(( members += WMember ( ',' members += WMember)*)?)(( fixture = WFixture )?)(( tests += WTest ( ',' tests += WTest)*)?)'}';

WNamedObject returns WNamedObject:{WNamedObject}'WNamedObject'(name = ID)?'{'(( members += WMember ( ',' members += WMember)*)?)(( parent = [WClass] )?)(( parentParameters = WArgumentList )?)(( mixins += [WMixin] ( ',' mixins += [WMixin])*)?)'}';

WPackage returns WPackage:{WPackage}'WPackage'(name = ID)?'{'(( elements += EObject ( ',' elements += EObject)*)?)'}';

WExpression returns WExpression:WPostfixOperation | WMemberFeatureCall | WSelf | WAssignment | WUnaryOperation | WObjectLiteral | WStringLiteral | WReturnExpression | WBlockExpression | WIfExpression | WTry | WVariableDeclaration | WThrow | WBooleanLiteral | WVariableReference | WConstructorCall | WClosure | WNullLiteral | WCollectionLiteral | WSuperInvocation | WNumberLiteral | WBinaryOperation;

WClass returns WClass:{WClass}'WClass'(name = ID)?'{'(( members += WMember ( ',' members += WMember)*)?)(( parent = [WClass] )?)(( mixins += [WMixin] ( ',' mixins += [WMixin])*)?)(( constructors += WConstructor ( ',' constructors += WConstructor)*)?)'}';

WMixin returns WMixin:{WMixin}'WMixin'(name = ID)?'{'(( members += WMember ( ',' members += WMember)*)?)'}';

terminal ESTRING returns ecore::EString:
'"' ( '\\' .  | !('\\'|'"') )* '"' | "'" ( '\\' . | !('\\'|"'") )* "'";


WFixture returns WFixture:{WFixture}'WFixture''{'(( elements += WExpression ( ',' elements += WExpression)*)?)'}';

WMember returns WMember:WExpression | WMethodDeclaration;

WConstructor returns WConstructor:{WConstructor}'WConstructor''{'(( parameters += WParameter ( ',' parameters += WParameter)*)?)(( delegatingConstructorCall = WDelegatingConstructorCall )?)(( expression = WExpression )?)'}';

WSelf returns WSelf:{WSelf}'WSelf''{''}';

WAssignment returns WAssignment:{WAssignment}'WAssignment''{'(( feature = WVariableReference )?)(( value = WExpression )?)'}';

WConstructorCall returns WConstructorCall:{WConstructorCall}'WConstructorCall''{'(( classRef = [WClass] )?)(( argumentList = WArgumentList )?)(( mixins += [WMixin] ( ',' mixins += [WMixin])*)?)'}';

WObjectLiteral returns WObjectLiteral:{WObjectLiteral}'WObjectLiteral''{'(( members += WMember ( ',' members += WMember)*)?)(( parent = [WClass] )?)(( parentParameters = WArgumentList )?)(( mixins += [WMixin] ( ',' mixins += [WMixin])*)?)'}';

WThrow returns WThrow:{WThrow}'WThrow''{'(( exception = WExpression )?)'}';

WUnaryOperation returns WUnaryOperation:{WUnaryOperation}'WUnaryOperation''{'(( feature = ESTRING )?)(( operand = WExpression )?)'}';

WTry returns WTry:{WTry}'WTry''{'(( expression = WExpression )?)(( catchBlocks += WCatch ( ',' catchBlocks += WCatch)*)?)(( alwaysExpression = WExpression )?)'}';

WBooleanLiteral returns WBooleanLiteral:{WBooleanLiteral}'WBooleanLiteral''{'(( isTrue ?= EBOOLEAN )?)'}';

WPostfixOperation returns WPostfixOperation:{WPostfixOperation}'WPostfixOperation''{'(( operand = WExpression )?)(( feature = ESTRING )?)'}';

WSuperInvocation returns WSuperInvocation:{WSuperInvocation}'WSuperInvocation''{'(( memberCallArguments += WExpression ( ',' memberCallArguments += WExpression)*)?)'}';

WVariableDeclaration returns WVariableDeclaration:{WVariableDeclaration}'WVariableDeclaration''{'(( writeable ?= EBOOLEAN )?)(( property ?= EBOOLEAN )?)(( variable = WVariable )?)(( right = WExpression )?)'}';

WVariableReference returns WVariableReference:{WVariableReference}'WVariableReference''{'(( ref = [WReferenciable] )?)'}';

WIfExpression returns WIfExpression:{WIfExpression}'WIfExpression''{'(( condition = WExpression )?)(( then = WExpression )?)(( else = WExpression )?)'}';

WBlockExpression returns WBlockExpression:{WBlockExpression}'WBlockExpression''{'(( expressions += WExpression ( ',' expressions += WExpression)*)?)'}';

WStringLiteral returns WStringLiteral:{WStringLiteral}'WStringLiteral''{'(( value = ESTRING )?)'}';

WCollectionLiteral returns WCollectionLiteral:WSetLiteral | WListLiteral;

WReturnExpression returns WReturnExpression:{WReturnExpression}'WReturnExpression''{'(( expression = WExpression )?)'}';

WNumberLiteral returns WNumberLiteral:{WNumberLiteral}'WNumberLiteral''{'(( value = ESTRING )?)'}';

WClosure returns WClosure:{WClosure}'WClosure''{'(( parameters += WParameter ( ',' parameters += WParameter)*)?)(( expression = WExpression )?)'}';

WBinaryOperation returns WBinaryOperation:{WBinaryOperation}'WBinaryOperation''{'(( leftOperand = WExpression )?)(( feature = ESTRING )?)(( rightOperand = WExpression )?)'}';

WMemberFeatureCall returns WMemberFeatureCall:{WMemberFeatureCall}'WMemberFeatureCall''{'(( memberCallTarget = WExpression )?)(( nullSafe ?= EBOOLEAN )?)(( feature = ESTRING )?)(( memberCallArguments += WExpression ( ',' memberCallArguments += WExpression)*)?)'}';

WNullLiteral returns WNullLiteral:{WNullLiteral}'WNullLiteral''{''}';

EObject returns ecore::EObject:{ecore::EObject}'EObject''{''}';

WArgumentList returns WArgumentList:WPositionalArgumentsList | WNamedArgumentsList;

WMethodDeclaration returns WMethodDeclaration:{WMethodDeclaration}'WMethodDeclaration'(name = ID)?'{'(( overrides ?= EBOOLEAN )?)(( parameters += WParameter ( ',' parameters += WParameter)*)?)(( native ?= EBOOLEAN )?)(( expression = WExpression )?)(( expressionReturns ?= EBOOLEAN )?)'}';

WParameter returns WParameter:{WParameter}'WParameter'(name = ID)?'{'(( varArg ?= EBOOLEAN )?)'}';

WDelegatingConstructorCall returns WDelegatingConstructorCall:WSuperDelegatingConstructorCall | WSelfDelegatingConstructorCall;

terminal EBOOLEAN returns ecore::EBoolean:
'true' | 'false';


WListLiteral returns WListLiteral:{WListLiteral}'WListLiteral''{'(( elements += WExpression ( ',' elements += WExpression)*)?)'}';

WSetLiteral returns WSetLiteral:{WSetLiteral}'WSetLiteral''{'(( elements += WExpression ( ',' elements += WExpression)*)?)'}';

WReferenciable returns WReferenciable:WVariable | WNamedObject | WParameter;

WVariable returns WVariable:{WVariable}'WVariable'(name = ID)?'{''}';

WCatch returns WCatch:{WCatch}'WCatch''{'(( exceptionVarName = WVariable )?)(( exceptionType = [WClass] )?)(( expression = WExpression )?)'}';

WPositionalArgumentsList returns WPositionalArgumentsList:{WPositionalArgumentsList}'WPositionalArgumentsList''{'(( values += WExpression ( ',' values += WExpression)*)?)'}';

WNamedArgumentsList returns WNamedArgumentsList:{WNamedArgumentsList}'WNamedArgumentsList''{'(( initializers += WInitializer ( ',' initializers += WInitializer)*)?)'}';

WSelfDelegatingConstructorCall returns WSelfDelegatingConstructorCall:{WSelfDelegatingConstructorCall}'WSelfDelegatingConstructorCall''{'(( argumentList = WPositionalArgumentsList )?)'}';

WSuperDelegatingConstructorCall returns WSuperDelegatingConstructorCall:{WSuperDelegatingConstructorCall}'WSuperDelegatingConstructorCall''{'(( argumentList = WPositionalArgumentsList )?)'}';

WInitializer returns WInitializer:{WInitializer}'WInitializer''{'(( initializer = WVariable )?)(( initialValue = WExpression )?)'}';

terminal ID returns ecore::EString: '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;