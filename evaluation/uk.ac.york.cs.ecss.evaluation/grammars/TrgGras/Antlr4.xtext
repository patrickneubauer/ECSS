// automatically generated by ECSS
grammar trglang.com.github.jknack.antlr4ide.Antlr4 

import "http://www.com.srclang/github/jknack/antlr4ide/Antlr4" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Grammar returns Grammar:{Grammar}'Grammar'(type = GrammarType)?'{'(( name = ESTRING )?)(( prequels += PrequelConstruct ( ',' prequels += PrequelConstruct)*)?)(( rules += Rule ( ',' rules += Rule)*)?)(( modes += Mode ( ',' modes += Mode)*)?)'}';

enum GrammarType
  :
     DEFAULT='default_hack_'
  |  LEXER='lexer'
  |  PARSER='parser'
  |  TREE='tree'
  ;

Mode returns Mode:{Mode}'Mode''{'(( id = ESTRING )?)(( rules += LexerRule ( ',' rules += LexerRule)*)?)'}';

Rule returns Rule:ParserRule | LexerRule;

terminal ESTRING returns ecore::EString:
'"' ( '\\' .  | !('\\'|'"') )* '"' | "'" ( '\\' . | !('\\'|"'") )* "'";


PrequelConstruct returns PrequelConstruct:Tokens | Options | GrammarAction | Imports;

LexerRule returns LexerRule:{LexerRule}'LexerRule'(name = ID)?'{'(( semicolonSymbol = ESTRING )?)(( ^fragment ?= EBOOLEAN )?)(( body = LexerRuleBlock )?)'}';

ParserRule returns ParserRule:{ParserRule}'ParserRule'(name = ID)?'{'(( semicolonSymbol = ESTRING )?)(( args = ESTRING )?)(( return = Return )?)(( throws = Exceptions )?)(( locals = LocalVars )?)(( prequels += RulePrequel ( ',' prequels += RulePrequel)*)?)(( body = RuleBlock )?)(( caught = ExceptionGroup )?)'}';

GrammarAction returns GrammarAction:{GrammarAction}'GrammarAction'(name = ID)?'{'(( atSymbol = ESTRING )?)(( scope = ESTRING )?)(( colonSymbol = ESTRING )?)(( action = ESTRING )?)'}';

Imports returns Imports:{Imports}'Imports''{'(( keyword = ESTRING )?)(( imports += Import ( ',' imports += Import)*)?)'}';

Options returns Options:{Options}'Options''{'(( keyword = ESTRING )?)(( options += Option ( ',' options += Option)*)?)'}';

Tokens returns Tokens:V4Tokens | V3Tokens | EmptyTokens;

LexerRuleBlock returns LexerRuleBlock:{LexerRuleBlock}'LexerRuleBlock''{'(( body = LexerAltList )?)'}';

terminal EBOOLEAN returns ecore::EBoolean:
'true' | 'false';


RuleBlock returns RuleBlock:{RuleBlock}'RuleBlock''{'(( body = RuleAltList )?)'}';

RulePrequel returns RulePrequel:Options | RuleAction;

Exceptions returns Exceptions:{Exceptions}'Exceptions''{'(( exceptions += QualifiedId ( ',' exceptions += QualifiedId)*)?)'}';

ExceptionGroup returns ExceptionGroup:{ExceptionGroup}'ExceptionGroup''{'(( handlers += ExceptionHandler ( ',' handlers += ExceptionHandler)*)?)(( finally = FinallyClause )?)'}';

LocalVars returns LocalVars:{LocalVars}'LocalVars''{'(( body = ESTRING )?)'}';

Return returns Return:{Return}'Return''{'(( body = ESTRING )?)'}';

V4Tokens returns V4Tokens:{V4Tokens}'V4Tokens''{'(( keyword = ESTRING )?)(( tokens += V4Token ( ',' tokens += V4Token)*)?)'}';

EmptyTokens returns EmptyTokens:{EmptyTokens}'EmptyTokens''{'(( keyword = ESTRING )?)'}';

V3Tokens returns V3Tokens:{V3Tokens}'V3Tokens''{'(( keyword = ESTRING )?)(( tokens += V3Token ( ',' tokens += V3Token)*)?)'}';

Option returns Option:TokenVocab;

Import returns Import:{Import}'Import''{'(( alias = ESTRING )?)(( importURI = [Grammar] )?)'}';

LexerAltList returns LexerAltList:{LexerAltList}'LexerAltList''{'(( alternatives += LexerAlt ( ',' alternatives += LexerAlt)*)?)'}';

RuleAltList returns RuleAltList:{RuleAltList}'RuleAltList''{'(( alternatives += LabeledAlt ( ',' alternatives += LabeledAlt)*)?)'}';

RuleAction returns RuleAction:{RuleAction}'RuleAction'(name = ID)?'{'(( atSymbol = ESTRING )?)(( body = ESTRING )?)'}';

TokenVocab returns TokenVocab:{TokenVocab}'TokenVocab'(name = ID)?'{'(( value = OptionValue )?)(( importURI = [Grammar] )?)'}';

QualifiedId returns QualifiedId:{QualifiedId}'QualifiedId'(name += ID)?'{''}';

FinallyClause returns FinallyClause:{FinallyClause}'FinallyClause''{'(( body = ESTRING )?)'}';

ExceptionHandler returns ExceptionHandler:{ExceptionHandler}'ExceptionHandler''{'(( exception = ESTRING )?)(( body = ESTRING )?)'}';

V3Token returns V3Token:{V3Token}'V3Token''{'(( id = ESTRING )?)(( value = ESTRING )?)'}';

V4Token returns V4Token:{V4Token}'V4Token'(name = ID)?'{''}';

LexerAlt returns LexerAlt:{LexerAlt}'LexerAlt''{'(( body = LexerElements )?)(( commands = LexerCommands )?)'}';

LabeledAlt returns LabeledAlt:{LabeledAlt}'LabeledAlt''{'(( body = Alternative )?)(( poundSymbol = ESTRING )?)(( label = ESTRING )?)'}';

OptionValue returns OptionValue:QualifiedOption | StringOption | ActionOption | IntOption;

LexerCommands returns LexerCommands:{LexerCommands}'LexerCommands''{'(( keyword = ESTRING )?)(( commands += LexerCommand ( ',' commands += LexerCommand)*)?)'}';

LexerElements returns LexerElements:{LexerElements}'LexerElements''{'(( elements += LexerElement ( ',' elements += LexerElement)*)?)'}';

Alternative returns Alternative:{Alternative}'Alternative''{'(( options = ElementOptions )?)(( elements += Element ( ',' elements += Element)*)?)'}';

ActionOption returns ActionOption:{ActionOption}'ActionOption''{'(( value = ESTRING )?)'}';

QualifiedOption returns QualifiedOption:{QualifiedOption}'QualifiedOption''{'(( value = QualifiedId )?)'}';

StringOption returns StringOption:{StringOption}'StringOption''{'(( value = ESTRING )?)'}';

IntOption returns IntOption:{IntOption}'IntOption''{'(( value = EINT )?)'}';

LexerCommand returns LexerCommand:{LexerCommand}'LexerCommand'(name = ID)?'{'(( args = LexerCommandExpr )?)'}';

LexerElement returns LexerElement:{LexerElement}'LexerElement''{'(( body = EObject )?)(( operator = EbnfSuffix )?)'}';

ElementOptions returns ElementOptions:{ElementOptions}'ElementOptions''{'(( begin = ESTRING )?)(( options += ElementOption ( ',' options += ElementOption)*)?)(( end = ESTRING )?)'}';

Element returns Element:{Element}'Element''{'(( body = EObject )?)(( operator = EbnfSuffix )?)'}';

terminal EINT returns ecore::EInt:
('0'..'9')+;


LexerCommandExpr returns LexerCommandExpr:{LexerCommandExpr}'LexerCommandExpr''{'(( ref = [LexerCommandArg] )?)(( value = EINT )?)'}';

EObject returns ecore::EObject:{ecore::EObject}'EObject''{''}';

EbnfSuffix returns EbnfSuffix:{EbnfSuffix}'EbnfSuffix''{'(( operator = ESTRING )?)(( nongreedy = ESTRING )?)'}';

ElementOption returns ElementOption:{ElementOption}'ElementOption''{'(( qualifiedId = QualifiedId )?)(( id = ESTRING )?)(( assign = ESTRING )?)(( value = OptionValue )?)'}';

LexerCommandArg returns LexerCommandArg:V4Token | V3Token | LexerRule | Mode;

terminal ID returns ecore::EString: '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;