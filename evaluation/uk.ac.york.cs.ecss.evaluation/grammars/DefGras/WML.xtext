// automatically generated by Xtext
grammar deflang.org.wesnoth.WML with org.eclipse.xtext.common.Terminals

import "http://www.org.srclang/wesnoth/WML" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

WMLRoot returns WMLRoot:
	{WMLRoot}
	'WMLRoot'
	'{'
		('Expressions' '{' Expressions+=WMLRootExpression ( "," Expressions+=WMLRootExpression)* '}' )?
	'}';

WMLRootExpression returns WMLRootExpression:
	WMLRootExpression_Impl | WMLTag | WMLMacroCall | WMLMacroDefine | WMLPreprocIF | WMLTextdomain;

WMLExpression returns WMLExpression:
	WMLExpression_Impl | WMLTag | WMLKey | WMLMacroCall | WMLMacroDefine | WMLPreprocIF | WMLRootExpression_Impl | WMLTextdomain;

WMLMacroCallParameter returns WMLMacroCallParameter:
	WMLMacroCallParameter_Impl | WMLMacroCall | WMLMacroParameter_Impl | WMLValue | MacroTokens;

WMLValuedExpression returns WMLValuedExpression:
	WMLValuedExpression_Impl | WMLTag | WMLKey | WMLMacroCall | WMLMacroDefine | WMLPreprocIF | WMLRootExpression_Impl | WMLExpression_Impl | WMLTextdomain | WMLValue;

WMLKeyValue returns WMLKeyValue:
	WMLKeyValue_Impl | WMLMacroCall | WMLArrayCall | WMLLuaCode | WMLValue;


WMLRootExpression_Impl returns WMLRootExpression:
	{WMLRootExpression}
	'WMLRootExpression'
	name=EString;

EString returns ecore::EString:
	STRING | ID;

WMLTag returns WMLTag:
	{WMLTag}
	'WMLTag'
	name=EString
	'{'
		('plus' plus=EString)?
		('endName' endName=EString)?
		('Expressions' '{' Expressions+=WMLExpression ( "," Expressions+=WMLExpression)* '}' )?
	'}';

WMLMacroCall returns WMLMacroCall:
	{WMLMacroCall}
	'WMLMacroCall'
	name=EString
	'{'
		('point' point=EString)?
		('relative' relative=EString)?
		('Parameters' '{' Parameters+=WMLMacroCallParameter ( "," Parameters+=WMLMacroCallParameter)* '}' )?
	'}';

WMLMacroDefine returns WMLMacroDefine:
	{WMLMacroDefine}
	'WMLMacroDefine'
	name=EString
	'{'
		('endName' endName=EString)?
		('Expressions' '{' Expressions+=WMLValuedExpression ( "," Expressions+=WMLValuedExpression)* '}' )?
	'}';

WMLPreprocIF returns WMLPreprocIF:
	{WMLPreprocIF}
	'WMLPreprocIF'
	name=EString
	'{'
		('Elses' Elses=EString)?
		('endName' endName=EString)?
		('Expressions' '{' Expressions+=WMLValuedExpression ( "," Expressions+=WMLValuedExpression)* '}' )?
		('ElseExpressions' '{' ElseExpressions+=WMLValuedExpression ( "," ElseExpressions+=WMLValuedExpression)* '}' )?
	'}';

WMLTextdomain returns WMLTextdomain:
	{WMLTextdomain}
	'WMLTextdomain'
	name=EString;

WMLExpression_Impl returns WMLExpression:
	{WMLExpression}
	'WMLExpression'
	name=EString;

WMLKey returns WMLKey:
	{WMLKey}
	'WMLKey'
	name=EString
	'{'
		('eol' '{' eol+=EString ( "," eol+=EString)* '}' )?
		('values' '{' values+=WMLKeyValue ( "," values+=WMLKeyValue)* '}' )?
	'}';

WMLKeyValue_Impl returns WMLKeyValue:
	{WMLKeyValue}
	'WMLKeyValue'
	;

WMLArrayCall returns WMLArrayCall:
	{WMLArrayCall}
	'WMLArrayCall'
	'{'
		('value' '{' value+=WMLValue ( "," value+=WMLValue)* '}' )?
	'}';

WMLLuaCode returns WMLLuaCode:
	{WMLLuaCode}
	'WMLLuaCode'
	'{'
		('value' value=EString)?
	'}';

WMLValue returns WMLValue:
	{WMLValue}
	'WMLValue'
	'{'
		('value' value=EString)?
	'}';

WMLMacroCallParameter_Impl returns WMLMacroCallParameter:
	{WMLMacroCallParameter}
	'WMLMacroCallParameter'
	;

WMLMacroParameter_Impl returns WMLMacroParameter:
	{WMLMacroParameter}
	'WMLMacroParameter'
	'{'
		('value' value=EString)?
	'}';

MacroTokens returns MacroTokens:
	{MacroTokens}
	'MacroTokens'
	'{'
		('value' value=EString)?
	'}';

WMLValuedExpression_Impl returns WMLValuedExpression:
	{WMLValuedExpression}
	'WMLValuedExpression'
	;
