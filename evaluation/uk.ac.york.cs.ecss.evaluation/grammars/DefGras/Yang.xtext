// automatically generated by Xtext
grammar deflang.yang.manager.Yang with org.eclipse.xtext.common.Terminals

import "http://www.xtext.org/editor/yang/Yang" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

YangFile_Impl returns YangFile:
	{YangFile}
	'YangFile'
	name=EString;

ModuleStatement returns ModuleStatement:
	ModuleStatement_Impl | DatadefStatement_Impl | YangVersionStatement | OrganizationStatement | ContactStatement | DescriptionStatement | NamespaceStatement | PrefixStatement | UnknownStatement | RpcStatement | NotificationStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | AugmentStatement | DeviationStatement | ExtensionStatement | IdentityStatement | FeatureStatement | TypedefStatement | ImportStatement | IncludeStatement | RevisionStatement;

SubmoduleStatement returns SubmoduleStatement:
	SubmoduleStatement_Impl | DatadefStatement_Impl | YangVersionStatement | OrganizationStatement | ContactStatement | DescriptionStatement | UnknownStatement | RpcStatement | NotificationStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | AugmentStatement | DeviationStatement | ExtensionStatement | IdentityStatement | FeatureStatement | BelongsToStatement | TypedefStatement | ImportStatement | IncludeStatement | RevisionStatement;



RpcSubstatement returns RpcSubstatement:
	RpcSubstatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | InputStatement | OutputStatement | GroupingStatement | TypedefStatement;

NotificationSubstatement returns NotificationSubstatement:
	NotificationSubstatement_Impl | DatadefStatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

ContainerSubstatement returns ContainerSubstatement:
	ContainerSubstatement_Impl | DatadefStatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | PresenceStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | MustStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement | WhenStatement;

ListSubstatement returns ListSubstatement:
	ListSubstatement_Impl | DatadefStatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | UniqueStatement | KeyStatement | OrderedbyStatement | ConfigStatement | IfFeatureStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement | WhenStatement;

GroupingSubstatement returns GroupingSubstatement:
	GroupingSubstatement_Impl | DatadefStatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

LeafSubstatement returns LeafSubstatement:
	LeafSubstatement_Impl | DescriptionStatement | ReferenceStatement | UnitsStatement | DefaultStatement | StatusStatement | MandatoryStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | MustStatement | TypeStatement | WhenStatement;

LeafListSubstatement returns LeafListSubstatement:
	LeafListSubstatement_Impl | DescriptionStatement | ReferenceStatement | UnitsStatement | DefaultStatement | StatusStatement | OrderedbyStatement | ConfigStatement | IfFeatureStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement | TypeStatement | WhenStatement;

ChoiceSubstatement returns ChoiceSubstatement:
	ChoiceSubstatement_Impl | DescriptionStatement | ReferenceStatement | DefaultStatement | StatusStatement | MandatoryStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | LeafStatement | LeafListStatement | CaseStatement | AnyxmlStatement | WhenStatement;

AnyxmlSubstatement returns AnyxmlSubstatement:
	AnyxmlSubstatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | MandatoryStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | MustStatement | WhenStatement;


UsesSubstatement returns UsesSubstatement:
	UsesSubstatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | AugmentUsesStatement | RefineStatement | WhenStatement;

AugmentSubstatement returns AugmentSubstatement:
	AugmentSubstatement_Impl | DatadefStatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | LeafStatement | LeafListStatement | ChoiceStatement | CaseStatement | AnyxmlStatement | UsesStatement | WhenStatement;

DeviationSubstatement returns DeviationSubstatement:
	DeviationSubstatement_Impl | DescriptionStatement | ReferenceStatement | UnknownStatement | DeviateStatement;

ExtensionSubstatement returns ExtensionSubstatement:
	ExtensionSubstatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | UnknownStatement | ArgumentStatement;

IdentitySubstatement returns IdentitySubstatement:
	IdentitySubstatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | BaseStatement | UnknownStatement;

FeatureSubstatement returns FeatureSubstatement:
	FeatureSubstatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement;

TypedefSubstatement returns TypedefSubstatement:
	TypedefSubstatement_Impl | DescriptionStatement | ReferenceStatement | UnitsStatement | DefaultStatement | StatusStatement | UnknownStatement | TypeStatement;

ImportSubstatements returns ImportSubstatements:
	ImportSubstatements_Impl | PrefixStatement | RevisionDateStatement | UnknownStatement | TypeStatement;

IncludeSubstatements returns IncludeSubstatements:
	IncludeSubstatements_Impl | RevisionDateStatement | UnknownStatement | TypeStatement;

RevisionSubstatements returns RevisionSubstatements:
	RevisionSubstatements_Impl | DescriptionStatement | ReferenceStatement | UnknownStatement;


InputSubstatement returns InputSubstatement:
	InputSubstatement_Impl | DatadefStatement_Impl | UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

OutputSubstatement returns OutputSubstatement:
	OutputSubstatement_Impl | DatadefStatement_Impl | UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

MultipleSubstatement returns MultipleSubstatement:
	MultipleSubstatement_Impl | DescriptionStatement | ReferenceStatement | ErrorAppTagStatement | ErrorMessageStatement | UnknownStatement;

WhenSubstatements returns WhenSubstatements:
	WhenSubstatements_Impl | DescriptionStatement | ReferenceStatement | UnknownStatement;



TypeSubStatement returns TypeSubStatement:
	TypeSubStatement_Impl | RequireInstanceStatement | PathStatement | DefaultStatement | FractionDigitsStatement | BaseStatement | UnknownStatement | RangeStatement | PatternStatement | LengthStatement | TypeStatement | BitStatement | EnumStatement;

BitSubstatement returns BitSubstatement:
	BitSubstatement_Impl | DescriptionStatement | ReferenceStatement | PositionStatement | StatusStatement | UnknownStatement;

EnumSubstatement returns EnumSubstatement:
	EnumSubstatement_Impl | DescriptionStatement | ReferenceStatement | ValueStatement | StatusStatement | UnknownStatement;

CaseSubstatement returns CaseSubstatement:
	CaseSubstatement_Impl | DatadefStatement_Impl | DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | WhenStatement;

RefineSubstatement returns RefineSubstatement:
	RefineSubstatement_Impl | DescriptionStatement | ReferenceStatement | DefaultStatement | PresenceStatement | MandatoryStatement | ConfigStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement;

DeviateSubstatement returns DeviateSubstatement:
	DeviateSubstatement_Impl | UnitsStatement | DefaultStatement | UniqueStatement | MandatoryStatement | ConfigStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement;

ArgumentSubstatement returns ArgumentSubstatement:
	ArgumentSubstatement_Impl | YinElementStatement | UnknownStatement;

BelongsToSubstatement returns BelongsToSubstatement:
	BelongsToSubstatement_Impl | PrefixStatement | UnknownStatement;

EString returns ecore::EString:
	STRING | ID;

Module returns Module:
	{Module}
	'Module'
	name=EString
	'{'
		('statements' '{' statements+=ModuleStatement ( "," statements+=ModuleStatement)* '}' )?
	'}';

SubModule returns SubModule:
	{SubModule}
	'SubModule'
	name=EString
	'{'
		('statements' '{' statements+=SubmoduleStatement ( "," statements+=SubmoduleStatement)* '}' )?
	'}';

ModuleStatement_Impl returns ModuleStatement:
	{ModuleStatement}
	'ModuleStatement'
	;

DatadefStatement_Impl returns DatadefStatement:
	{DatadefStatement}
	'DatadefStatement'
	;

YangVersionStatement returns YangVersionStatement:
	{YangVersionStatement}
	'YangVersionStatement'
	'{'
		('version' version=EString)?
		('yangversionunknownstatements' '{' yangversionunknownstatements+=UnknownStatement ( "," yangversionunknownstatements+=UnknownStatement)* '}' )?
	'}';

OrganizationStatement returns OrganizationStatement:
	{OrganizationStatement}
	'OrganizationStatement'
	'{'
		('organization' organization=EString)?
		('organizationunknownstatements' '{' organizationunknownstatements+=UnknownStatement ( "," organizationunknownstatements+=UnknownStatement)* '}' )?
	'}';

ContactStatement returns ContactStatement:
	{ContactStatement}
	'ContactStatement'
	'{'
		('contact' contact=EString)?
		('contactunknownstatements' '{' contactunknownstatements+=UnknownStatement ( "," contactunknownstatements+=UnknownStatement)* '}' )?
	'}';

DescriptionStatement returns DescriptionStatement:
	{DescriptionStatement}
	'DescriptionStatement'
	'{'
		('description' description=EString)?
		('descriptionunknownstatements' '{' descriptionunknownstatements+=UnknownStatement ( "," descriptionunknownstatements+=UnknownStatement)* '}' )?
	'}';

NamespaceStatement returns NamespaceStatement:
	{NamespaceStatement}
	'NamespaceStatement'
	'{'
		('uri' uri=EString)?
		('namespaceunknownstatements' '{' namespaceunknownstatements+=UnknownStatement ( "," namespaceunknownstatements+=UnknownStatement)* '}' )?
	'}';

PrefixStatement returns PrefixStatement:
	{PrefixStatement}
	'PrefixStatement'
	name=EString
	'{'
		('prefixunknownstatements' '{' prefixunknownstatements+=UnknownStatement ( "," prefixunknownstatements+=UnknownStatement)* '}' )?
	'}';

UnknownStatement returns UnknownStatement:
	{UnknownStatement}
	'UnknownStatement'
	'{'
		('pref' pref=EString)?
		('namestat' namestat=EString)?
		('argument' argument=EString)?
		('unknownsubstatements' '{' unknownsubstatements+=UnknownSubstatements ( "," unknownsubstatements+=UnknownSubstatements)* '}' )?
	'}';

RpcStatement returns RpcStatement:
	{RpcStatement}
	'RpcStatement'
	name=EString
	'{'
		('rpcsubstatements' '{' rpcsubstatements+=RpcSubstatement ( "," rpcsubstatements+=RpcSubstatement)* '}' )?
	'}';

NotificationStatement returns NotificationStatement:
	{NotificationStatement}
	'NotificationStatement'
	name=EString
	'{'
		('notificationsubstatements' '{' notificationsubstatements+=NotificationSubstatement ( "," notificationsubstatements+=NotificationSubstatement)* '}' )?
	'}';

ContainerStatement returns ContainerStatement:
	{ContainerStatement}
	'ContainerStatement'
	name=EString
	'{'
		('containersubstatements' '{' containersubstatements+=ContainerSubstatement ( "," containersubstatements+=ContainerSubstatement)* '}' )?
	'}';

ListStatement returns ListStatement:
	{ListStatement}
	'ListStatement'
	name=EString
	'{'
		('listsubstatements' '{' listsubstatements+=ListSubstatement ( "," listsubstatements+=ListSubstatement)* '}' )?
	'}';

GroupingStatement returns GroupingStatement:
	{GroupingStatement}
	'GroupingStatement'
	name=EString
	'{'
		('groupingsubstatements' '{' groupingsubstatements+=GroupingSubstatement ( "," groupingsubstatements+=GroupingSubstatement)* '}' )?
	'}';

LeafStatement returns LeafStatement:
	{LeafStatement}
	'LeafStatement'
	name=EString
	'{'
		('leafsubstatements' '{' leafsubstatements+=LeafSubstatement ( "," leafsubstatements+=LeafSubstatement)* '}' )?
	'}';

LeafListStatement returns LeafListStatement:
	{LeafListStatement}
	'LeafListStatement'
	'{'
		('arg' arg=EString)?
		('leaflistsubstatements' '{' leaflistsubstatements+=LeafListSubstatement ( "," leaflistsubstatements+=LeafListSubstatement)* '}' )?
	'}';

ChoiceStatement returns ChoiceStatement:
	{ChoiceStatement}
	'ChoiceStatement'
	name=EString
	'{'
		('choicesubstatements' '{' choicesubstatements+=ChoiceSubstatement ( "," choicesubstatements+=ChoiceSubstatement)* '}' )?
	'}';

AnyxmlStatement returns AnyxmlStatement:
	{AnyxmlStatement}
	'AnyxmlStatement'
	'{'
		('arg' arg=EString)?
		('anyxmlsubstatements' '{' anyxmlsubstatements+=AnyxmlSubstatement ( "," anyxmlsubstatements+=AnyxmlSubstatement)* '}' )?
	'}';

UsesStatement returns UsesStatement:
	{UsesStatement}
	'UsesStatement'
	'{'
		('pre' pre=EString)?
		('arg' arg=[GroupingStatement|EString])?
		('usessubstatements' '{' usessubstatements+=UsesSubstatement ( "," usessubstatements+=UsesSubstatement)* '}' )?
	'}';

AugmentStatement returns AugmentStatement:
	{AugmentStatement}
	'AugmentStatement'
	'{'
		('arg' arg=EString)?
		('augmentsubstatements' '{' augmentsubstatements+=AugmentSubstatement ( "," augmentsubstatements+=AugmentSubstatement)* '}' )?
	'}';

DeviationStatement returns DeviationStatement:
	{DeviationStatement}
	'DeviationStatement'
	'{'
		('arg' arg=EString)?
		('deviationsubstatements' '{' deviationsubstatements+=DeviationSubstatement ( "," deviationsubstatements+=DeviationSubstatement)* '}' )?
	'}';

ExtensionStatement returns ExtensionStatement:
	{ExtensionStatement}
	'ExtensionStatement'
	'{'
		('arg' arg=EString)?
		('extensionsubstatements' '{' extensionsubstatements+=ExtensionSubstatement ( "," extensionsubstatements+=ExtensionSubstatement)* '}' )?
	'}';

IdentityStatement returns IdentityStatement:
	{IdentityStatement}
	'IdentityStatement'
	name=EString
	'{'
		('identitysubstatements' '{' identitysubstatements+=IdentitySubstatement ( "," identitysubstatements+=IdentitySubstatement)* '}' )?
	'}';

FeatureStatement returns FeatureStatement:
	{FeatureStatement}
	'FeatureStatement'
	name=EString
	'{'
		('featuresubstatements' '{' featuresubstatements+=FeatureSubstatement ( "," featuresubstatements+=FeatureSubstatement)* '}' )?
	'}';

TypedefStatement returns TypedefStatement:
	{TypedefStatement}
	'TypedefStatement'
	name=EString
	'{'
		('typedefsubstatemnet' '{' typedefsubstatemnet+=TypedefSubstatement ( "," typedefsubstatemnet+=TypedefSubstatement)* '}' )?
	'}';

ImportStatement returns ImportStatement:
	{ImportStatement}
	'ImportStatement'
	'{'
		('importURI' importURI=EString)?
		('importsubstatements' '{' importsubstatements+=ImportSubstatements ( "," importsubstatements+=ImportSubstatements)* '}' )?
	'}';

IncludeStatement returns IncludeStatement:
	{IncludeStatement}
	'IncludeStatement'
	'{'
		('importURI' importURI=EString)?
		('includesubstatements' '{' includesubstatements+=IncludeSubstatements ( "," includesubstatements+=IncludeSubstatements)* '}' )?
	'}';

RevisionStatement returns RevisionStatement:
	{RevisionStatement}
	'RevisionStatement'
	'{'
		('date' date=EString)?
		('revisionsubstatements' '{' revisionsubstatements+=RevisionSubstatements ( "," revisionsubstatements+=RevisionSubstatements)* '}' )?
	'}';

UnknownSubstatements returns UnknownSubstatements:
	{UnknownSubstatements}
	'UnknownSubstatements'
	'{'
		('pref' pref=EString)?
		('namestat' namestat=EString)?
		('argument' argument=EString)?
		('unknownsubstatements' '{' unknownsubstatements+=UnknownSubstatements ( "," unknownsubstatements+=UnknownSubstatements)* '}' )?
	'}';

RpcSubstatement_Impl returns RpcSubstatement:
	{RpcSubstatement}
	'RpcSubstatement'
	;

ReferenceStatement returns ReferenceStatement:
	{ReferenceStatement}
	'ReferenceStatement'
	'{'
		('reference' reference=EString)?
		('referenceunknownstatements' '{' referenceunknownstatements+=UnknownStatement ( "," referenceunknownstatements+=UnknownStatement)* '}' )?
	'}';

StatusStatement returns StatusStatement:
	{StatusStatement}
	'StatusStatement'
	'{'
		('status' status=EString)?
		('statusunknownstatements' '{' statusunknownstatements+=UnknownStatement ( "," statusunknownstatements+=UnknownStatement)* '}' )?
	'}';

IfFeatureStatement returns IfFeatureStatement:
	{IfFeatureStatement}
	'IfFeatureStatement'
	'{'
		('pref' pref=EString)?
		('ident' ident=[FeatureStatement|EString])?
		('iffeatureunknownstatements' '{' iffeatureunknownstatements+=UnknownStatement ( "," iffeatureunknownstatements+=UnknownStatement)* '}' )?
	'}';

InputStatement returns InputStatement:
	{InputStatement}
	'InputStatement'
	'{'
		('inputsubstatements' '{' inputsubstatements+=InputSubstatement ( "," inputsubstatements+=InputSubstatement)* '}' )?
	'}';

OutputStatement returns OutputStatement:
	{OutputStatement}
	'OutputStatement'
	'{'
		('outputsubstatements' '{' outputsubstatements+=OutputSubstatement ( "," outputsubstatements+=OutputSubstatement)* '}' )?
	'}';

InputSubstatement_Impl returns InputSubstatement:
	{InputSubstatement}
	'InputSubstatement'
	;

OutputSubstatement_Impl returns OutputSubstatement:
	{OutputSubstatement}
	'OutputSubstatement'
	;

NotificationSubstatement_Impl returns NotificationSubstatement:
	{NotificationSubstatement}
	'NotificationSubstatement'
	;

ContainerSubstatement_Impl returns ContainerSubstatement:
	{ContainerSubstatement}
	'ContainerSubstatement'
	;

PresenceStatement returns PresenceStatement:
	{PresenceStatement}
	'PresenceStatement'
	'{'
		('arg' arg=EString)?
		('presenceunknownstatements' '{' presenceunknownstatements+=UnknownStatement ( "," presenceunknownstatements+=UnknownStatement)* '}' )?
	'}';

ConfigStatement returns ConfigStatement:
	{ConfigStatement}
	'ConfigStatement'
	'{'
		('boolarg' boolarg=EString)?
		('configunknownstatements' '{' configunknownstatements+=UnknownStatement ( "," configunknownstatements+=UnknownStatement)* '}' )?
	'}';

MustStatement returns MustStatement:
	{MustStatement}
	'MustStatement'
	'{'
		('arg' arg=EString)?
		('mustsubstatements' '{' mustsubstatements+=MultipleSubstatement ( "," mustsubstatements+=MultipleSubstatement)* '}' )?
	'}';

WhenStatement returns WhenStatement:
	{WhenStatement}
	'WhenStatement'
	'{'
		('arg' arg=EString)?
		('whensubstatements' '{' whensubstatements+=WhenSubstatements ( "," whensubstatements+=WhenSubstatements)* '}' )?
	'}';

MultipleSubstatement_Impl returns MultipleSubstatement:
	{MultipleSubstatement}
	'MultipleSubstatement'
	;

ErrorAppTagStatement returns ErrorAppTagStatement:
	{ErrorAppTagStatement}
	'ErrorAppTagStatement'
	'{'
		('arg' arg=EString)?
		('erroraunknownstatements' '{' erroraunknownstatements+=UnknownStatement ( "," erroraunknownstatements+=UnknownStatement)* '}' )?
	'}';

ErrorMessageStatement returns ErrorMessageStatement:
	{ErrorMessageStatement}
	'ErrorMessageStatement'
	'{'
		('arg' arg=EString)?
		('errormunknownstatements' '{' errormunknownstatements+=UnknownStatement ( "," errormunknownstatements+=UnknownStatement)* '}' )?
	'}';

WhenSubstatements_Impl returns WhenSubstatements:
	{WhenSubstatements}
	'WhenSubstatements'
	;

ListSubstatement_Impl returns ListSubstatement:
	{ListSubstatement}
	'ListSubstatement'
	;

UniqueStatement returns UniqueStatement:
	{UniqueStatement}
	'UniqueStatement'
	'{'
		('arg' arg=EString)?
		('uniqueunknownstatements' '{' uniqueunknownstatements+=UnknownStatement ( "," uniqueunknownstatements+=UnknownStatement)* '}' )?
	'}';

KeyStatement returns KeyStatement:
	{KeyStatement}
	'KeyStatement'
	'{'
		('arg' arg=EString)?
		('keyunknownstatements' '{' keyunknownstatements+=UnknownStatement ( "," keyunknownstatements+=UnknownStatement)* '}' )?
	'}';

OrderedbyStatement returns OrderedbyStatement:
	{OrderedbyStatement}
	'OrderedbyStatement'
	'{'
		('arg' arg=EString)?
		('orderedbyunknownstatements' '{' orderedbyunknownstatements+=UnknownStatement ( "," orderedbyunknownstatements+=UnknownStatement)* '}' )?
	'}';

MinElementsStatement returns MinElementsStatement:
	{MinElementsStatement}
	'MinElementsStatement'
	'{'
		('arg' arg=EString)?
		('minelementsunknownstatements' '{' minelementsunknownstatements+=UnknownStatement ( "," minelementsunknownstatements+=UnknownStatement)* '}' )?
	'}';

MaxElementsStatement returns MaxElementsStatement:
	{MaxElementsStatement}
	'MaxElementsStatement'
	'{'
		('arg' arg=EString)?
		('maxelementsunknownstatements' '{' maxelementsunknownstatements+=UnknownStatement ( "," maxelementsunknownstatements+=UnknownStatement)* '}' )?
	'}';

GroupingSubstatement_Impl returns GroupingSubstatement:
	{GroupingSubstatement}
	'GroupingSubstatement'
	;

LeafSubstatement_Impl returns LeafSubstatement:
	{LeafSubstatement}
	'LeafSubstatement'
	;

UnitsStatement returns UnitsStatement:
	{UnitsStatement}
	'UnitsStatement'
	'{'
		('arg' arg=EString)?
		('unitsunknownstatements' '{' unitsunknownstatements+=UnknownStatement ( "," unitsunknownstatements+=UnknownStatement)* '}' )?
	'}';

DefaultStatement returns DefaultStatement:
	{DefaultStatement}
	'DefaultStatement'
	'{'
		('arg' arg=EString)?
		('defaultunknownstatements' '{' defaultunknownstatements+=UnknownStatement ( "," defaultunknownstatements+=UnknownStatement)* '}' )?
	'}';

MandatoryStatement returns MandatoryStatement:
	{MandatoryStatement}
	'MandatoryStatement'
	'{'
		('boolarg' boolarg=EString)?
		('mandatoryunknownstatements' '{' mandatoryunknownstatements+=UnknownStatement ( "," mandatoryunknownstatements+=UnknownStatement)* '}' )?
	'}';

TypeStatement returns TypeStatement:
	{TypeStatement}
	'TypeStatement'
	'{'
		('pre' pre=EString)?
		('importtype' importtype=[TypedefStatement|EString])?
		('type' type=BuiltInType)?
		('typesubstatements' '{' typesubstatements+=TypeSubStatement ( "," typesubstatements+=TypeSubStatement)* '}' )?
	'}';

BuiltInType returns BuiltInType:
	{BuiltInType}
	'BuiltInType'
	'{'
		('btype' btype=EString)?
	'}';

TypeSubStatement_Impl returns TypeSubStatement:
	{TypeSubStatement}
	'TypeSubStatement'
	;

RequireInstanceStatement returns RequireInstanceStatement:
	{RequireInstanceStatement}
	'RequireInstanceStatement'
	'{'
		('require' require=EString)?
		('requireunknownstatements' '{' requireunknownstatements+=UnknownStatement ( "," requireunknownstatements+=UnknownStatement)* '}' )?
	'}';

PathStatement returns PathStatement:
	{PathStatement}
	'PathStatement'
	'{'
		('path' path=EString)?
		('pathunknownstatements' '{' pathunknownstatements+=UnknownStatement ( "," pathunknownstatements+=UnknownStatement)* '}' )?
	'}';

FractionDigitsStatement returns FractionDigitsStatement:
	{FractionDigitsStatement}
	'FractionDigitsStatement'
	'{'
		('arg' arg=EString)?
		('fractiondigitsunknownstatements' '{' fractiondigitsunknownstatements+=UnknownStatement ( "," fractiondigitsunknownstatements+=UnknownStatement)* '}' )?
	'}';

BaseStatement returns BaseStatement:
	{BaseStatement}
	'BaseStatement'
	'{'
		('base' base=EString)?
		('baseunknownstatements' '{' baseunknownstatements+=UnknownStatement ( "," baseunknownstatements+=UnknownStatement)* '}' )?
	'}';

RangeStatement returns RangeStatement:
	{RangeStatement}
	'RangeStatement'
	'{'
		('range' range=EString)?
		('rangesubstatements' '{' rangesubstatements+=MultipleSubstatement ( "," rangesubstatements+=MultipleSubstatement)* '}' )?
	'}';

PatternStatement returns PatternStatement:
	{PatternStatement}
	'PatternStatement'
	name=EString
	'{'
		('patternsubstatements' '{' patternsubstatements+=MultipleSubstatement ( "," patternsubstatements+=MultipleSubstatement)* '}' )?
	'}';

LengthStatement returns LengthStatement:
	{LengthStatement}
	'LengthStatement'
	'{'
		('length' length=EString)?
		('lengthsubstatements' '{' lengthsubstatements+=MultipleSubstatement ( "," lengthsubstatements+=MultipleSubstatement)* '}' )?
	'}';

BitStatement returns BitStatement:
	{BitStatement}
	'BitStatement'
	name=EString
	'{'
		('bitsubstatements' '{' bitsubstatements+=BitSubstatement ( "," bitsubstatements+=BitSubstatement)* '}' )?
	'}';

EnumStatement returns EnumStatement:
	{EnumStatement}
	'EnumStatement'
	name=EString
	'{'
		('enumsubstatements' '{' enumsubstatements+=EnumSubstatement ( "," enumsubstatements+=EnumSubstatement)* '}' )?
	'}';

BitSubstatement_Impl returns BitSubstatement:
	{BitSubstatement}
	'BitSubstatement'
	;

PositionStatement returns PositionStatement:
	{PositionStatement}
	'PositionStatement'
	'{'
		('intarg' intarg=EString)?
		('positionunknownstatements' '{' positionunknownstatements+=UnknownStatement ( "," positionunknownstatements+=UnknownStatement)* '}' )?
	'}';

EnumSubstatement_Impl returns EnumSubstatement:
	{EnumSubstatement}
	'EnumSubstatement'
	;

ValueStatement returns ValueStatement:
	{ValueStatement}
	'ValueStatement'
	'{'
		('intarg' intarg=EString)?
		('valueunknownstatements' '{' valueunknownstatements+=UnknownStatement ( "," valueunknownstatements+=UnknownStatement)* '}' )?
	'}';

LeafListSubstatement_Impl returns LeafListSubstatement:
	{LeafListSubstatement}
	'LeafListSubstatement'
	;

ChoiceSubstatement_Impl returns ChoiceSubstatement:
	{ChoiceSubstatement}
	'ChoiceSubstatement'
	;

CaseStatement returns CaseStatement:
	{CaseStatement}
	'CaseStatement'
	name=EString
	'{'
		('casesubstatements' '{' casesubstatements+=CaseSubstatement ( "," casesubstatements+=CaseSubstatement)* '}' )?
	'}';

CaseSubstatement_Impl returns CaseSubstatement:
	{CaseSubstatement}
	'CaseSubstatement'
	;

AnyxmlSubstatement_Impl returns AnyxmlSubstatement:
	{AnyxmlSubstatement}
	'AnyxmlSubstatement'
	;

UsesSubstatement_Impl returns UsesSubstatement:
	{UsesSubstatement}
	'UsesSubstatement'
	;

AugmentUsesStatement returns AugmentUsesStatement:
	{AugmentUsesStatement}
	'AugmentUsesStatement'
	'{'
		('arg' arg=EString)?
		('augmentsubstatements' '{' augmentsubstatements+=AugmentSubstatement ( "," augmentsubstatements+=AugmentSubstatement)* '}' )?
	'}';

RefineStatement returns RefineStatement:
	{RefineStatement}
	'RefineStatement'
	'{'
		('arg' arg=EString)?
		('refinesubstatements' '{' refinesubstatements+=RefineSubstatement ( "," refinesubstatements+=RefineSubstatement)* '}' )?
	'}';

AugmentSubstatement_Impl returns AugmentSubstatement:
	{AugmentSubstatement}
	'AugmentSubstatement'
	;

RefineSubstatement_Impl returns RefineSubstatement:
	{RefineSubstatement}
	'RefineSubstatement'
	;

DeviationSubstatement_Impl returns DeviationSubstatement:
	{DeviationSubstatement}
	'DeviationSubstatement'
	;

DeviateStatement returns DeviateStatement:
	{DeviateStatement}
	'DeviateStatement'
	'{'
		('arg' arg=EString)?
		('deviatesubstatements' '{' deviatesubstatements+=DeviateSubstatement ( "," deviatesubstatements+=DeviateSubstatement)* '}' )?
	'}';

DeviateSubstatement_Impl returns DeviateSubstatement:
	{DeviateSubstatement}
	'DeviateSubstatement'
	;

ExtensionSubstatement_Impl returns ExtensionSubstatement:
	{ExtensionSubstatement}
	'ExtensionSubstatement'
	;

ArgumentStatement returns ArgumentStatement:
	{ArgumentStatement}
	'ArgumentStatement'
	'{'
		('arg' arg=EString)?
		('argumentsubstatements' '{' argumentsubstatements+=ArgumentSubstatement ( "," argumentsubstatements+=ArgumentSubstatement)* '}' )?
	'}';

ArgumentSubstatement_Impl returns ArgumentSubstatement:
	{ArgumentSubstatement}
	'ArgumentSubstatement'
	;

YinElementStatement returns YinElementStatement:
	{YinElementStatement}
	'YinElementStatement'
	'{'
		('boolarg' boolarg=EString)?
		('yinelementunknownstatements' '{' yinelementunknownstatements+=UnknownStatement ( "," yinelementunknownstatements+=UnknownStatement)* '}' )?
	'}';

IdentitySubstatement_Impl returns IdentitySubstatement:
	{IdentitySubstatement}
	'IdentitySubstatement'
	;

FeatureSubstatement_Impl returns FeatureSubstatement:
	{FeatureSubstatement}
	'FeatureSubstatement'
	;

TypedefSubstatement_Impl returns TypedefSubstatement:
	{TypedefSubstatement}
	'TypedefSubstatement'
	;

ImportSubstatements_Impl returns ImportSubstatements:
	{ImportSubstatements}
	'ImportSubstatements'
	;

RevisionDateStatement returns RevisionDateStatement:
	{RevisionDateStatement}
	'RevisionDateStatement'
	'{'
		('date' date=EString)?
		('revisiondateunknownstatements' '{' revisiondateunknownstatements+=UnknownStatement ( "," revisiondateunknownstatements+=UnknownStatement)* '}' )?
	'}';

IncludeSubstatements_Impl returns IncludeSubstatements:
	{IncludeSubstatements}
	'IncludeSubstatements'
	;

RevisionSubstatements_Impl returns RevisionSubstatements:
	{RevisionSubstatements}
	'RevisionSubstatements'
	;

SubmoduleStatement_Impl returns SubmoduleStatement:
	{SubmoduleStatement}
	'SubmoduleStatement'
	;

BelongsToStatement returns BelongsToStatement:
	{BelongsToStatement}
	'BelongsToStatement'
	name=EString
	'{'
		('belongstosubstatement' '{' belongstosubstatement+=BelongsToSubstatement ( "," belongstosubstatement+=BelongsToSubstatement)* '}' )?
	'}';

BelongsToSubstatement_Impl returns BelongsToSubstatement:
	{BelongsToSubstatement}
	'BelongsToSubstatement'
	;
