// automatically generated by Xtext
grammar deflang.org.uqbar.project.wollok.WollokDsl with org.eclipse.xtext.common.Terminals

import "http://www.org.srclang/uqbar/project/wollok/WollokDsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

WFile returns WFile:
	{WFile}
	'WFile'
	'{'
		('imports' '{' imports+=Import ( "," imports+=Import)* '}' )?
		('elements' '{' elements+=WLibraryElement ( "," elements+=WLibraryElement)* '}' )?
		('main' main=WProgram)?
		('tests' '{' tests+=WTest ( "," tests+=WTest)* '}' )?
		('suites' '{' suites+=WSuite ( "," suites+=WSuite)* '}' )?
	'}';


WLibraryElement returns WLibraryElement:
	WLibraryElement_Impl | WPackage | WExpression_Impl | WVariableReference | WIfExpression | WCollectionLiteral_Impl | WListLiteral | WSetLiteral | WNamedObject | WClass | WMixin | WConstructorCall | WTry | WReturnExpression | WThrow | WObjectLiteral | WVariableDeclaration | WAssignment | WBinaryOperation | WUnaryOperation | WPostfixOperation | WMemberFeatureCall | WSelf | WSuperInvocation | WBlockExpression | WBooleanLiteral | WNullLiteral | WStringLiteral | WNumberLiteral | WClosure;




WExpression returns WExpression:
	WExpression_Impl | WVariableReference | WIfExpression | WCollectionLiteral_Impl | WListLiteral | WSetLiteral | WConstructorCall | WTry | WReturnExpression | WThrow | WObjectLiteral | WVariableDeclaration | WAssignment | WBinaryOperation | WUnaryOperation | WPostfixOperation | WMemberFeatureCall | WSelf | WSuperInvocation | WBlockExpression | WBooleanLiteral | WNullLiteral | WStringLiteral | WNumberLiteral | WClosure;

WMember returns WMember:
	WMember_Impl | WExpression_Impl | WMethodDeclaration | WVariableReference | WIfExpression | WCollectionLiteral_Impl | WListLiteral | WSetLiteral | WConstructorCall | WTry | WReturnExpression | WThrow | WObjectLiteral | WVariableDeclaration | WAssignment | WBinaryOperation | WUnaryOperation | WPostfixOperation | WMemberFeatureCall | WSelf | WSuperInvocation | WBlockExpression | WBooleanLiteral | WNullLiteral | WStringLiteral | WNumberLiteral | WClosure;



WReferenciable returns WReferenciable:
	WReferenciable_Impl | WParameter | WVariable | WNamedObject;


WArgumentList returns WArgumentList:
	WArgumentList_Impl | WNamedArgumentsList | WPositionalArgumentsList;








WDelegatingConstructorCall returns WDelegatingConstructorCall:
	WDelegatingConstructorCall_Impl | WSelfDelegatingConstructorCall | WSuperDelegatingConstructorCall;


Import returns Import:
	{Import}
	'Import'
	'{'
		('importedNamespace' importedNamespace=EString)?
	'}';

WLibraryElement_Impl returns WLibraryElement:
	{WLibraryElement}
	'WLibraryElement'
	;

WProgram returns WProgram:
	{WProgram}
	'WProgram'
	name=EString
	'{'
		('elements' '{' elements+=WExpression ( "," elements+=WExpression)* '}' )?
	'}';

WTest returns WTest:
	{WTest}
	'WTest'
	name=EString
	'{'
		('elements' '{' elements+=WExpression ( "," elements+=WExpression)* '}' )?
	'}';

WSuite returns WSuite:
	{WSuite}
	'WSuite'
	name=EString
	'{'
		('members' '{' members+=WMember ( "," members+=WMember)* '}' )?
		('fixture' fixture=WFixture)?
		('tests' '{' tests+=WTest ( "," tests+=WTest)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

WPackage returns WPackage:
	{WPackage}
	'WPackage'
	name=EString
	'{'
		('elements' '{' elements+=EObject ( "," elements+=EObject)* '}' )?
	'}';

WExpression_Impl returns WExpression:
	{WExpression}
	'WExpression'
	;

WVariableReference returns WVariableReference:
	{WVariableReference}
	'WVariableReference'
	'{'
		('ref' ref=[WReferenciable|EString])?
	'}';

WIfExpression returns WIfExpression:
	{WIfExpression}
	'WIfExpression'
	'{'
		('condition' condition=WExpression)?
		('then' then=WExpression)?
		('else' else=WExpression)?
	'}';

WCollectionLiteral_Impl returns WCollectionLiteral:
	{WCollectionLiteral}
	'WCollectionLiteral'
	'{'
		('elements' '{' elements+=WExpression ( "," elements+=WExpression)* '}' )?
	'}';

WListLiteral returns WListLiteral:
	{WListLiteral}
	'WListLiteral'
	'{'
		('elements' '{' elements+=WExpression ( "," elements+=WExpression)* '}' )?
	'}';

WSetLiteral returns WSetLiteral:
	{WSetLiteral}
	'WSetLiteral'
	'{'
		('elements' '{' elements+=WExpression ( "," elements+=WExpression)* '}' )?
	'}';

WNamedObject returns WNamedObject:
	{WNamedObject}
	'WNamedObject'
	name=EString
	'{'
		('parent' parent=[WClass|EString])?
		('mixins' '(' mixins+=[WMixin|EString] ( "," mixins+=[WMixin|EString])* ')' )?
		('members' '{' members+=WMember ( "," members+=WMember)* '}' )?
		('parentParameters' parentParameters=WArgumentList)?
	'}';

WClass returns WClass:
	{WClass}
	'WClass'
	name=EString
	'{'
		('parent' parent=[WClass|EString])?
		('mixins' '(' mixins+=[WMixin|EString] ( "," mixins+=[WMixin|EString])* ')' )?
		('members' '{' members+=WMember ( "," members+=WMember)* '}' )?
		('constructors' '{' constructors+=WConstructor ( "," constructors+=WConstructor)* '}' )?
	'}';

WMixin returns WMixin:
	{WMixin}
	'WMixin'
	name=EString
	'{'
		('members' '{' members+=WMember ( "," members+=WMember)* '}' )?
	'}';

WConstructorCall returns WConstructorCall:
	{WConstructorCall}
	'WConstructorCall'
	'{'
		('classRef' classRef=[WClass|EString])?
		('mixins' '(' mixins+=[WMixin|EString] ( "," mixins+=[WMixin|EString])* ')' )?
		('argumentList' argumentList=WArgumentList)?
	'}';

WTry returns WTry:
	{WTry}
	'WTry'
	'{'
		('expression' expression=WExpression)?
		('catchBlocks' '{' catchBlocks+=WCatch ( "," catchBlocks+=WCatch)* '}' )?
		('alwaysExpression' alwaysExpression=WExpression)?
	'}';

WReturnExpression returns WReturnExpression:
	{WReturnExpression}
	'WReturnExpression'
	'{'
		('expression' expression=WExpression)?
	'}';

WThrow returns WThrow:
	{WThrow}
	'WThrow'
	'{'
		('exception' exception=WExpression)?
	'}';

WObjectLiteral returns WObjectLiteral:
	{WObjectLiteral}
	'WObjectLiteral'
	'{'
		('parent' parent=[WClass|EString])?
		('mixins' '(' mixins+=[WMixin|EString] ( "," mixins+=[WMixin|EString])* ')' )?
		('members' '{' members+=WMember ( "," members+=WMember)* '}' )?
		('parentParameters' parentParameters=WArgumentList)?
	'}';

WVariableDeclaration returns WVariableDeclaration:
	{WVariableDeclaration}
	(writeable?='writeable')?
	(property?='property')?
	'WVariableDeclaration'
	'{'
		('variable' variable=WVariable)?
		('right' right=WExpression)?
	'}';

WAssignment returns WAssignment:
	{WAssignment}
	'WAssignment'
	'{'
		('feature' feature=WVariableReference)?
		('value' value=WExpression)?
	'}';

WBinaryOperation returns WBinaryOperation:
	{WBinaryOperation}
	'WBinaryOperation'
	'{'
		('feature' feature=EString)?
		('leftOperand' leftOperand=WExpression)?
		('rightOperand' rightOperand=WExpression)?
	'}';

WUnaryOperation returns WUnaryOperation:
	{WUnaryOperation}
	'WUnaryOperation'
	'{'
		('feature' feature=EString)?
		('operand' operand=WExpression)?
	'}';

WPostfixOperation returns WPostfixOperation:
	{WPostfixOperation}
	'WPostfixOperation'
	'{'
		('feature' feature=EString)?
		('operand' operand=WExpression)?
	'}';

WMemberFeatureCall returns WMemberFeatureCall:
	{WMemberFeatureCall}
	(nullSafe?='nullSafe')?
	'WMemberFeatureCall'
	'{'
		('feature' feature=EString)?
		('memberCallTarget' memberCallTarget=WExpression)?
		('memberCallArguments' '{' memberCallArguments+=WExpression ( "," memberCallArguments+=WExpression)* '}' )?
	'}';

WSelf returns WSelf:
	{WSelf}
	'WSelf'
	;

WSuperInvocation returns WSuperInvocation:
	{WSuperInvocation}
	'WSuperInvocation'
	'{'
		('memberCallArguments' '{' memberCallArguments+=WExpression ( "," memberCallArguments+=WExpression)* '}' )?
	'}';

WBlockExpression returns WBlockExpression:
	{WBlockExpression}
	'WBlockExpression'
	'{'
		('expressions' '{' expressions+=WExpression ( "," expressions+=WExpression)* '}' )?
	'}';

WBooleanLiteral returns WBooleanLiteral:
	{WBooleanLiteral}
	(isTrue?='isTrue')?
	'WBooleanLiteral'
	;

WNullLiteral returns WNullLiteral:
	{WNullLiteral}
	'WNullLiteral'
	;

WStringLiteral returns WStringLiteral:
	{WStringLiteral}
	'WStringLiteral'
	'{'
		('value' value=EString)?
	'}';

WNumberLiteral returns WNumberLiteral:
	{WNumberLiteral}
	'WNumberLiteral'
	'{'
		('value' value=EString)?
	'}';

WClosure returns WClosure:
	{WClosure}
	'WClosure'
	'{'
		('parameters' '{' parameters+=WParameter ( "," parameters+=WParameter)* '}' )?
		('expression' expression=WExpression)?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

WReferenciable_Impl returns WReferenciable:
	{WReferenciable}
	'WReferenciable'
	name=EString;

WParameter returns WParameter:
	{WParameter}
	(varArg?='varArg')?
	'WParameter'
	name=EString;

WVariable returns WVariable:
	{WVariable}
	'WVariable'
	name=EString;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

WMember_Impl returns WMember:
	{WMember}
	'WMember'
	;

WArgumentList_Impl returns WArgumentList:
	{WArgumentList}
	'WArgumentList'
	;

WMethodDeclaration returns WMethodDeclaration:
	{WMethodDeclaration}
	(overrides?='overrides')?
	(native?='native')?
	(expressionReturns?='expressionReturns')?
	'WMethodDeclaration'
	name=EString
	'{'
		('parameters' '{' parameters+=WParameter ( "," parameters+=WParameter)* '}' )?
		('expression' expression=WExpression)?
	'}';

WNamedArgumentsList returns WNamedArgumentsList:
	{WNamedArgumentsList}
	'WNamedArgumentsList'
	'{'
		('initializers' '{' initializers+=WInitializer ( "," initializers+=WInitializer)* '}' )?
	'}';

WPositionalArgumentsList returns WPositionalArgumentsList:
	{WPositionalArgumentsList}
	'WPositionalArgumentsList'
	'{'
		('values' '{' values+=WExpression ( "," values+=WExpression)* '}' )?
	'}';

WInitializer returns WInitializer:
	{WInitializer}
	'WInitializer'
	'{'
		('initializer' initializer=WVariable)?
		('initialValue' initialValue=WExpression)?
	'}';

WConstructor returns WConstructor:
	{WConstructor}
	'WConstructor'
	'{'
		('parameters' '{' parameters+=WParameter ( "," parameters+=WParameter)* '}' )?
		('delegatingConstructorCall' delegatingConstructorCall=WDelegatingConstructorCall)?
		('expression' expression=WExpression)?
	'}';

WDelegatingConstructorCall_Impl returns WDelegatingConstructorCall:
	{WDelegatingConstructorCall}
	'WDelegatingConstructorCall'
	'{'
		('argumentList' argumentList=WPositionalArgumentsList)?
	'}';

WSelfDelegatingConstructorCall returns WSelfDelegatingConstructorCall:
	{WSelfDelegatingConstructorCall}
	'WSelfDelegatingConstructorCall'
	'{'
		('argumentList' argumentList=WPositionalArgumentsList)?
	'}';

WSuperDelegatingConstructorCall returns WSuperDelegatingConstructorCall:
	{WSuperDelegatingConstructorCall}
	'WSuperDelegatingConstructorCall'
	'{'
		('argumentList' argumentList=WPositionalArgumentsList)?
	'}';

WCatch returns WCatch:
	{WCatch}
	'WCatch'
	'{'
		('exceptionType' exceptionType=[WClass|EString])?
		('exceptionVarName' exceptionVarName=WVariable)?
		('expression' expression=WExpression)?
	'}';

WFixture returns WFixture:
	{WFixture}
	'WFixture'
	'{'
		('elements' '{' elements+=WExpression ( "," elements+=WExpression)* '}' )?
	'}';
