// test comment
domain DynamicModel {
rim Dynamic {

	event GET {
		method: GET
	}
	event PUT {
		method: PUT
	}
	event POST {
		method: POST
	}
	event DELETE {
		method: DELETE
	}

	command CREATEDynmcNote
	command NoopGET
	command GETDynmcNotes
	command GETDynmcNote
	command DELETEDynmcNote
	command GETDynmcAuthor 

initial resource home {
	type: item
	entity: HOME
	view: NoopGET
    path: "/"
	GET -> notesDynmc
	GET -> authorLookup {
		parameters [ id = "AU001" ]
	}
} 

resource notesDynmc {
	type: collection
	
	// reference:  'AU001' or 'SY001'
	entity: DynmcNote
	view: GETDynmcNotes
	path: "/notesDynmc"
    POST -> createDynmcNote
	GET *-> locator findsource("{reference}"){
		parameters [ id = "{reference}" ]
		title: "Who"		
	}	
		
	DELETE *-> deletedDynmcNote
}

resource noteDynmc {
	type: item
	entity: DynmcNote
	view: GETDynmcNote
	path: "/notesDynmc/{noteID}"	
	DELETE -> deletedDynmcNote
}

resource authorLookup {
	type: item
	entity: DynmcNote
	view: NoopGET
	path: "/authors/lookup/{id}"
	GET --> locator findauthor("{id}") {	
	}
}

resource author {
	type: item
	entity: DynmcAuthor
	view: GETDynmcAuthor
	path: "/authors/{id}"
}

resource system {
	type: item
	entity: DynmcNote
	view: GETDynmcNote
	path: "/systems/{id}"
}

resource deletedDynmcNote {
	type: item
	entity: DynmcNote
	actions [ DELETEDynmcNote ]
	relations [ "http://relations.rimdsl.org/delete" ]
	path: "/notesDynmc/{noteID}"
	GET ->> notesDynmc
}

resource createDynmcNote {
	type: item
	entity: DynmcNote
	actions [ CREATEDynmcNote ]
	path: "/notesDynmc"
	// 'create' means post to the collection, 'new' means get the next available number
	relations [ "http://relations.rimdsl.org/create" ]
	GET --> noteDynmc {
		condition: OK(noteDynmc)
	}
}

}
}