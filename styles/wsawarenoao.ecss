import "wsawarenows.ecss";

template singleAttributeTemplate : uk.ac.york.cs.ecss.newproc.SingleAttributeXtendRule;
template classTemplate : uk.ac.york.cs.ecss.newproc.AbstractClassBasedXtendRule;
template beginTemplate : uk.ac.york.cs.ecss.newproc.SyntheticBegin;
template endTemplate : uk.ac.york.cs.ecss.newproc.SyntheticEnd;
templateGen singleAttributeGenTemplate extends singleAttributeTemplate;  
templateGen classGenTemplate extends classTemplate; 

javarule beginTemplate beginRule :: BEGIN;
javarule endTemplate endRule :: END;
 
 
rule whitespaceClassRule :classGenTemplate :: classRules:
	class.name " returns " class.name ":"
	[% if (loc_subClasses.isEmpty()) {%] 
	"{" class.name "}"	
	[% if (slot_name.getValues().isEmpty()) {%]
		" '" classname "' "	" ':' "
	[% } else {%]
		nameDistRules(~name[ 0 .. 1])
	[% }%]
	::BEGIN() " ("
			attributeDistRules(~other[ 0 .. 99]) 
		")"
	::END() 
	[% } else { %]
	for subCl: loc_subClasses join " | " {
			::classRules(subCl)
	}	 
	[% }%] ';'
; 

rule whitespaceAttribute : singleAttributeGenTemplate :: attributeRule:
	[% if (feature.getLowerBound() == 0) {%] "(" [% }%]
		" '" feature.name "' " " ':' " 
		[% if (feature instanceof EReference) {%]
			::BEGIN() " "
		[% if (!((EReference)feature).isContainment()) {%]
			" '- ' "
		[% }%]
		[% } %] " "
		 feature.name xtextOperator " " sensibleTerminal(feature) " "
	[% if (feature.isMany()) {%]
		"(" 
		[% if (feature instanceof EReference) {%]
		[% if (!((EReference)feature).isContainment()) {%]
			" '- ' "
		[% }%]	
		[% }%]
//		" ',' "
		feature.name xtextOperator " " sensibleTerminal(feature) " "
		 ")*"
	[% }%] 
	[% if (feature instanceof EReference) {%]
			::END() " "
		[% }%]
	[% if (feature.getLowerBound() == 0) {%] ")?" [% }%]
;


* {
	template(whitespaceAttribute): 1.5;
	template(whitespaceClassRule): 1.5;
	template(defaultClassRule): -1.5;
	template(defaultAttribute): -1.5;
}  
