template attributeTemplate : uk.ac.york.cs.ecss.newproc.AttributeXtendRule;
template singleAttributeTemplate : uk.ac.york.cs.ecss.newproc.SingleAttributeXtendRule;
template classTemplate : uk.ac.york.cs.ecss.newproc.AbstractClassBasedXtendRule;
template beginTemplate : uk.ac.york.cs.ecss.newproc.SyntheticBegin;
template endTemplate : uk.ac.york.cs.ecss.newproc.SyntheticEnd;
templateGen attributeGenTemplate extends attributeTemplate;
templateGen singleAttributeGenTemplate extends singleAttributeTemplate;  
templateGen classGenTemplate extends classTemplate; 

javarule beginTemplate beginRule :: BEGIN;
javarule endTemplate endRule :: END;
 
 /*
rule attributeGenTemplate attributeRule :: attributeRules:	
	[% for (org.eclipse.emf.ecore.EStructuralFeature esf: features) {"
		$featname " " $[% esf.getName()" " " 
	[% }"
;

 
rule attributeGenTemplate attributeRule2 :: attributeRules:	
	[% for (org.eclipse.emf.ecore.EStructuralFeature esf: features) {"
		$featname "..." $[% esf.getName()" " "
	[% }"
;*/

rule defaultClassRule: classGenTemplate :: classRules:
	[%= class.name %] " returns " [%= class.name  %]":"
	[% if (loc_subClasses.isEmpty()) { %]
	"{" [%= class.name %] "}"	
	[% if (slot_name.getValues().isEmpty()) { %]
		" '" [%= class.name %] "' "	" ':' "
	[% } else { %]
		[%= nameDistRules(name[ 0 .. 1]) %]
	[% } %]
	::BEGIN() " ("
			[%= attributeDistRules(other[ 0 .. 99]) %]
		")"
	::END() 
	[% } else { %]
	for subCl: loc_subClasses join " | " {
			::classRules(subCl)
	}	
	[% } %]';'
;

rule defaultAttributeDistr: attributeGenTemplate :: attributeDistRules:
	for esf: features {
		[% attributeRule(esf) %]
	}
;


rule arbitraryAttributeDistr: attributeGenTemplate :: attributeDistRules:
	[% List<EStructuralFeature> sortedFeatures = new ArrayList<>(features); %]
	[% sortedFeatures.sort((x,y)->-Boolean.compare(x.isRequired(),y.isRequired())); %]
	for esf: sortedFeatures join ' & ' {
		"(" [%= attributeRule(esf) %]")" 
	} 
;
/*
rule attributeGenTemplate booleanAttributeDistr :: booleanDistRules:
	for esf: features {
		"( " $[% esf.getName()" " ?= \"" $[% esf.getName()" "\" )?"	
	}
;*/


rule nameAttributeDistr: attributeGenTemplate :: nameDistRules:
	for esf: features {
		" '" $#"esf.getName()" "' " " ':' "  $#"esf.getName()" " = " 
		[% if (esf.getEType() != null && esf.getEType().getInstanceClass() == String.class) { %]
			"ID "
		[% } else { %]
			[%= sensibleTerminal(esf) %] " "
		[% } %]
	}
;

rule defaultAttribute: singleAttributeGenTemplate :: attributeRule:
	[% if (feature.getLowerBound() == 0) { %] "(" [% } %]
		" '" [%= feature.name %] "' " " ':' " 
		[% if (feature instanceof EReference) { %]
			::BEGIN() " "
		[% if (!((EReference)feature).isContainment()) { %]
			" '- ' "
		[% } %]
		[% } %] " "
		 [%= feature.name %] [%= xtextOperator %] " " [%= sensibleTerminal(feature) %] " "
	[% if (feature.isMany()) { %]
		"(" 
		[% if (feature instanceof EReference) { %]
		[% if (!((EReference)feature).isContainment()) { %]
			" '- ' "
		[% } %]
		[% } %]
//		" ',' "
		[%= feature.name %] [%= xtextOperator %] " " [%= sensibleTerminal(feature) %] " "
		 ")*"
	[% } %]
	[% if (feature instanceof EReference) { %]
			::END() " "
		[% } %]
	[% if (feature.getLowerBound() == 0) {" ")?" [% } %]
;

rule defaultTerminal: singleAttributeGenTemplate :: sensibleTerminal:
	[% if (feature instanceof EReference) { %]
		[% if (((EReference)feature).isContainment()) { %]
			//Just the class name
			::classRules("feature.getEType()")
		[% } else { %]
			//A reference to the class name
			"[" ::classRules("feature.getEType()") "]"
		[% } %]
	[% } else { if (feature.getEType() instanceof EEnum) {"
		//Some terminal - just take the etype 
		$@enumRules("feature.getEType()")
	[% } else { %]
		::terminalRules("feature.getEType()")
	[% }} %]
;

* {
	slot(name, name): 2.0;
	slot(*["eType.oclIsKindOf(EEnum)"], name): 2.0;
	slot(*,other): 0.5;
	slot(*["(not many) and ( eType.name = 'Boolean' or eType.name = 'boolean')"],optional): 2.0;
	template(arbitraryAttributeDistr): 1.5;
	template(defaultAttributeDistr): -1.5;
	template(attributeRule): -0.5;
	//template(attributeRule): 1.5;
	a: "out";	
	featname: "eigensch";
	classname: ocl "rule.class.name";
}  
/*
*["rule.class.name='Car'"] {
	template(arbitraryAttributeDistr): 3.5;
}  */