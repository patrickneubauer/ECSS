template attributeTemplate : uk.ac.york.cs.ecss.newproc.AttributeXtendRule;
template singleAttributeTemplate : uk.ac.york.cs.ecss.newproc.SingleAttributeXtendRule;
template classTemplate : uk.ac.york.cs.ecss.newproc.AbstractClassBasedXtendRule;
templateGen attributeGenTemplate extends attributeTemplate;
templateGen singleAttributeGenTemplate extends singleAttributeTemplate;  
templateGen classGenTemplate extends classTemplate; 

//javarule attributeTemplate attributeRule :: attributeRules;
//javarule classTemplate classRule :: classRules;
 
 /*
rule attributeGenTemplate attributeRule :: attributeRules:	
	#"for (org.eclipse.emf.ecore.EStructuralFeature esf: features) {"
		$featname " " $#"esf.getName()" " "
	#"}"
;

 
rule attributeGenTemplate attributeRule2 :: attributeRules:	
	#"for (org.eclipse.emf.ecore.EStructuralFeature esf: features) {"
		$featname "..." $#"esf.getName()" " "
	#"}"
;*/

rule defaultClassRule: classGenTemplate :: classRules:
	[%= class.name %] " returns " [%= class.name %] ":"
	[% if (loc_subClasses.isEmpty()) { %]
		"{" [%= class.name %] "}" "'" [%= class.name %] "'" [%= booleanDistRules(optional[ 0 .. 99]) %] [%= nameDistRules(name[ 0 .. 1]) %] "'{'"
			[%= attributeDistRules(other[ 0 .. 99]) %]
		"'}'"
	[% } else { %]
	for subCl: loc_subClasses join " | " {
			::classRules(subCl)
	}
	[% }" ';'
;

rule attributeGenTemplate defaultAttributeDistr :: attributeDistRules:
	for esf: features {
		$attributeRule(esf)
	}
;


rule attributeGenTemplate arbitraryAttributeDistr :: attributeDistRules:
	"("
	for esf: features join ") | (" {
		$attributeRule(esf)
		[% List<EStructuralFeature> smallerFeatures = new ArrayList(features); %]
		[% smallerFeatures.remove(esf);\nboolean first = true; %]
		"(("
		for EStructuralFeature sub: smallerFeatures join ") & (" {
			"','" [%= attributeRule(sub) %]
		} "))"
	} ")"
;

rule booleanAttributeDistr: attributeGenTemplate :: booleanDistRules:
	for esf: features {
		"(" $#"esf.getName()" "?= \"" $#"esf.getName()" "\")?"	
	}
;


rule attributeGenTemplate nameAttributeDistr :: nameDistRules:
	for esf: features {
		"(" $#"esf.getName()" " = ID)?" 
	}
;

rule singleAttributeGenTemplate defaultAttribute :: attributeRule:
	[% if (feature.getLowerBound() == 0) {" "(" [% } %]
		" " $feature.name " " $xtextOperator " " $sensibleTerminal(feature) " "
	[% if (feature.isMany()) { %]
		"( ',' " $feature.name " " $xtextOperator " " $sensibleTerminal(feature) ")*"
	[% } %]
	[% if (feature.getLowerBound() == 0) {" ")?" [% } %]
;

rule singleAttributeGenTemplate defaultTerminal :: sensibleTerminal:
	[% if (feature instanceof EReference) { %]
		[% if (((EReference)feature).isContainment()) {"
			//Just the class name
			::classRules("feature.getEType()")
		[% } else { %]
			//A reference to the class name
			"[" $@classRules("feature.getEType()") "]"
		[% } %]
	[% } else { if (feature.getEType() instanceof EEnum) {"
		//Some terminal - just take the etype
		::enumRules("feature.getEType()")
	[% } else { %]
		$@terminalRules("feature.getEType()")
	[% }} %]
;

* {
	slot(name, name): 2.0;
	slot(*,other): 0.5;
	slot(*["(not many) and ( eType.name = 'Boolean' or eType.name = 'boolean')"],optional): 2.0;
	template(arbitraryAttributeDistr): -1.5;
	template(defaultAttributeDistr): 1.5;
	template(attributeRule): -0.5;
	//template(attributeRule): 1.5;
	a: "out";	
	featname: "eigensch";
	classname: ocl "rule.class.name";
}  
/*
*["rule.class.name='Car'"] {
	template(arbitraryAttributeDistr): 3.5;
}  */