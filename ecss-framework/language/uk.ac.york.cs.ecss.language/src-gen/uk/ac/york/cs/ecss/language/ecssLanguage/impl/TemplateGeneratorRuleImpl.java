/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateGenDef;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateGeneratorRule;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateRulePart;
import uk.ac.york.cs.ecss.language.ecssLanguage.TypeDef;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Template Generator Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateGeneratorRuleImpl#getType <em>Type</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateGeneratorRuleImpl#getTypeDef <em>Type Def</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateGeneratorRuleImpl#getIdPart <em>Id Part</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateGeneratorRuleImpl#getTemplateRulePart <em>Template Rule Part</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TemplateGeneratorRuleImpl extends TemplateRuleImpl implements TemplateGeneratorRule
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected TemplateGenDef type;

  /**
   * The cached value of the '{@link #getTypeDef() <em>Type Def</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDef()
   * @generated
   * @ordered
   */
  protected EList<TypeDef> typeDef;

  /**
   * The cached value of the '{@link #getIdPart() <em>Id Part</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdPart()
   * @generated
   * @ordered
   */
  protected EList<TemplateRulePart> idPart;

  /**
   * The cached value of the '{@link #getTemplateRulePart() <em>Template Rule Part</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplateRulePart()
   * @generated
   * @ordered
   */
  protected EList<TemplateRulePart> templateRulePart;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TemplateGeneratorRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcssLanguagePackage.Literals.TEMPLATE_GENERATOR_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateGenDef getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (TemplateGenDef)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateGenDef basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(TemplateGenDef newType)
  {
    TemplateGenDef oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeDef> getTypeDef()
  {
    if (typeDef == null)
    {
      typeDef = new EObjectContainmentEList<TypeDef>(TypeDef.class, this, EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE_DEF);
    }
    return typeDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TemplateRulePart> getIdPart()
  {
    if (idPart == null)
    {
      idPart = new EObjectContainmentEList<TemplateRulePart>(TemplateRulePart.class, this, EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__ID_PART);
    }
    return idPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TemplateRulePart> getTemplateRulePart()
  {
    if (templateRulePart == null)
    {
      templateRulePart = new EObjectContainmentEList<TemplateRulePart>(TemplateRulePart.class, this, EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TEMPLATE_RULE_PART);
    }
    return templateRulePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE_DEF:
        return ((InternalEList<?>)getTypeDef()).basicRemove(otherEnd, msgs);
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__ID_PART:
        return ((InternalEList<?>)getIdPart()).basicRemove(otherEnd, msgs);
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TEMPLATE_RULE_PART:
        return ((InternalEList<?>)getTemplateRulePart()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE_DEF:
        return getTypeDef();
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__ID_PART:
        return getIdPart();
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TEMPLATE_RULE_PART:
        return getTemplateRulePart();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE:
        setType((TemplateGenDef)newValue);
        return;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE_DEF:
        getTypeDef().clear();
        getTypeDef().addAll((Collection<? extends TypeDef>)newValue);
        return;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__ID_PART:
        getIdPart().clear();
        getIdPart().addAll((Collection<? extends TemplateRulePart>)newValue);
        return;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TEMPLATE_RULE_PART:
        getTemplateRulePart().clear();
        getTemplateRulePart().addAll((Collection<? extends TemplateRulePart>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE:
        setType((TemplateGenDef)null);
        return;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE_DEF:
        getTypeDef().clear();
        return;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__ID_PART:
        getIdPart().clear();
        return;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TEMPLATE_RULE_PART:
        getTemplateRulePart().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE:
        return type != null;
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TYPE_DEF:
        return typeDef != null && !typeDef.isEmpty();
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__ID_PART:
        return idPart != null && !idPart.isEmpty();
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE__TEMPLATE_RULE_PART:
        return templateRulePart != null && !templateRulePart.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TemplateGeneratorRuleImpl
