/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.york.cs.ecss.language.ecssLanguage.Condition;
import uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage;
import uk.ac.york.cs.ecss.language.ecssLanguage.Property;
import uk.ac.york.cs.ecss.language.ecssLanguage.PropertyValue;
import uk.ac.york.cs.ecss.language.ecssLanguage.SlotMatch;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateMatch;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyImpl#getTemplateMatch <em>Template Match</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyImpl#getSlotMatch <em>Slot Match</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyImpl#getName <em>Name</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.PropertyImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyImpl extends MinimalEObjectImpl.Container implements Property
{
  /**
   * The cached value of the '{@link #getTemplateMatch() <em>Template Match</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplateMatch()
   * @generated
   * @ordered
   */
  protected TemplateMatch templateMatch;

  /**
   * The cached value of the '{@link #getSlotMatch() <em>Slot Match</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlotMatch()
   * @generated
   * @ordered
   */
  protected SlotMatch slotMatch;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected EList<PropertyValue> value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcssLanguagePackage.Literals.PROPERTY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateMatch getTemplateMatch()
  {
    return templateMatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTemplateMatch(TemplateMatch newTemplateMatch, NotificationChain msgs)
  {
    TemplateMatch oldTemplateMatch = templateMatch;
    templateMatch = newTemplateMatch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH, oldTemplateMatch, newTemplateMatch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTemplateMatch(TemplateMatch newTemplateMatch)
  {
    if (newTemplateMatch != templateMatch)
    {
      NotificationChain msgs = null;
      if (templateMatch != null)
        msgs = ((InternalEObject)templateMatch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH, null, msgs);
      if (newTemplateMatch != null)
        msgs = ((InternalEObject)newTemplateMatch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH, null, msgs);
      msgs = basicSetTemplateMatch(newTemplateMatch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH, newTemplateMatch, newTemplateMatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SlotMatch getSlotMatch()
  {
    return slotMatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSlotMatch(SlotMatch newSlotMatch, NotificationChain msgs)
  {
    SlotMatch oldSlotMatch = slotMatch;
    slotMatch = newSlotMatch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__SLOT_MATCH, oldSlotMatch, newSlotMatch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSlotMatch(SlotMatch newSlotMatch)
  {
    if (newSlotMatch != slotMatch)
    {
      NotificationChain msgs = null;
      if (slotMatch != null)
        msgs = ((InternalEObject)slotMatch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY__SLOT_MATCH, null, msgs);
      if (newSlotMatch != null)
        msgs = ((InternalEObject)newSlotMatch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY__SLOT_MATCH, null, msgs);
      msgs = basicSetSlotMatch(newSlotMatch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__SLOT_MATCH, newSlotMatch, newSlotMatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EcssLanguagePackage.PROPERTY__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.PROPERTY__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PropertyValue> getValue()
  {
    if (value == null)
    {
      value = new EObjectContainmentEList<PropertyValue>(PropertyValue.class, this, EcssLanguagePackage.PROPERTY__VALUE);
    }
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH:
        return basicSetTemplateMatch(null, msgs);
      case EcssLanguagePackage.PROPERTY__SLOT_MATCH:
        return basicSetSlotMatch(null, msgs);
      case EcssLanguagePackage.PROPERTY__CONDITION:
        return basicSetCondition(null, msgs);
      case EcssLanguagePackage.PROPERTY__VALUE:
        return ((InternalEList<?>)getValue()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH:
        return getTemplateMatch();
      case EcssLanguagePackage.PROPERTY__SLOT_MATCH:
        return getSlotMatch();
      case EcssLanguagePackage.PROPERTY__NAME:
        return getName();
      case EcssLanguagePackage.PROPERTY__CONDITION:
        return getCondition();
      case EcssLanguagePackage.PROPERTY__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH:
        setTemplateMatch((TemplateMatch)newValue);
        return;
      case EcssLanguagePackage.PROPERTY__SLOT_MATCH:
        setSlotMatch((SlotMatch)newValue);
        return;
      case EcssLanguagePackage.PROPERTY__NAME:
        setName((String)newValue);
        return;
      case EcssLanguagePackage.PROPERTY__CONDITION:
        setCondition((Condition)newValue);
        return;
      case EcssLanguagePackage.PROPERTY__VALUE:
        getValue().clear();
        getValue().addAll((Collection<? extends PropertyValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH:
        setTemplateMatch((TemplateMatch)null);
        return;
      case EcssLanguagePackage.PROPERTY__SLOT_MATCH:
        setSlotMatch((SlotMatch)null);
        return;
      case EcssLanguagePackage.PROPERTY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case EcssLanguagePackage.PROPERTY__CONDITION:
        setCondition((Condition)null);
        return;
      case EcssLanguagePackage.PROPERTY__VALUE:
        getValue().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.PROPERTY__TEMPLATE_MATCH:
        return templateMatch != null;
      case EcssLanguagePackage.PROPERTY__SLOT_MATCH:
        return slotMatch != null;
      case EcssLanguagePackage.PROPERTY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case EcssLanguagePackage.PROPERTY__CONDITION:
        return condition != null;
      case EcssLanguagePackage.PROPERTY__VALUE:
        return value != null && !value.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PropertyImpl
