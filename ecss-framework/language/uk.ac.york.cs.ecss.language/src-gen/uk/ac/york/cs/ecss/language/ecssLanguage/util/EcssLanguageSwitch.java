/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import uk.ac.york.cs.ecss.language.ecssLanguage.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage
 * @generated
 */
public class EcssLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EcssLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EcssLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = EcssLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case EcssLanguagePackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.CONFIG:
      {
        Config config = (Config)theEObject;
        T result = caseConfig(config);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_RULE_OR_DEF:
      {
        TemplateRuleOrDef templateRuleOrDef = (TemplateRuleOrDef)theEObject;
        T result = caseTemplateRuleOrDef(templateRuleOrDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_DEF:
      {
        TemplateDef templateDef = (TemplateDef)theEObject;
        T result = caseTemplateDef(templateDef);
        if (result == null) result = caseTemplateRuleOrDef(templateDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_GEN_DEF:
      {
        TemplateGenDef templateGenDef = (TemplateGenDef)theEObject;
        T result = caseTemplateGenDef(templateGenDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_RULE:
      {
        TemplateRule templateRule = (TemplateRule)theEObject;
        T result = caseTemplateRule(templateRule);
        if (result == null) result = caseTemplateRuleOrDef(templateRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.BASIC_TEMPLATE_RULE:
      {
        BasicTemplateRule basicTemplateRule = (BasicTemplateRule)theEObject;
        T result = caseBasicTemplateRule(basicTemplateRule);
        if (result == null) result = caseTemplateRule(basicTemplateRule);
        if (result == null) result = caseTemplateRuleOrDef(basicTemplateRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_GENERATOR_RULE:
      {
        TemplateGeneratorRule templateGeneratorRule = (TemplateGeneratorRule)theEObject;
        T result = caseTemplateGeneratorRule(templateGeneratorRule);
        if (result == null) result = caseTemplateRule(templateGeneratorRule);
        if (result == null) result = caseTemplateRuleOrDef(templateGeneratorRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TYPE_DEF:
      {
        TypeDef typeDef = (TypeDef)theEObject;
        T result = caseTypeDef(typeDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_RULE_PART:
      {
        TemplateRulePart templateRulePart = (TemplateRulePart)theEObject;
        T result = caseTemplateRulePart(templateRulePart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.FOR_EACH_EXPRESSION:
      {
        ForEachExpression forEachExpression = (ForEachExpression)theEObject;
        T result = caseForEachExpression(forEachExpression);
        if (result == null) result = caseTemplateRulePart(forEachExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.IF_EXPRESSION:
      {
        IfExpression ifExpression = (IfExpression)theEObject;
        T result = caseIfExpression(ifExpression);
        if (result == null) result = caseTemplateRulePart(ifExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.STATIC_TEMPLATE_RULE_PART:
      {
        StaticTemplateRulePart staticTemplateRulePart = (StaticTemplateRulePart)theEObject;
        T result = caseStaticTemplateRulePart(staticTemplateRulePart);
        if (result == null) result = caseTemplateRulePart(staticTemplateRulePart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL:
      {
        TemplateFunctionCall templateFunctionCall = (TemplateFunctionCall)theEObject;
        T result = caseTemplateFunctionCall(templateFunctionCall);
        if (result == null) result = caseTemplateRulePart(templateFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.SLOT_CALL:
      {
        SlotCall slotCall = (SlotCall)theEObject;
        T result = caseSlotCall(slotCall);
        if (result == null) result = caseTemplateRulePart(slotCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.LOCAL_OR_VALUE_CALL:
      {
        LocalOrValueCall localOrValueCall = (LocalOrValueCall)theEObject;
        T result = caseLocalOrValueCall(localOrValueCall);
        if (result == null) result = caseTemplateRulePart(localOrValueCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.LOCAL_EVALUATION_CALL:
      {
        LocalEvaluationCall localEvaluationCall = (LocalEvaluationCall)theEObject;
        T result = caseLocalEvaluationCall(localEvaluationCall);
        if (result == null) result = caseTemplateRulePart(localEvaluationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_PARAMETER_VALUE:
      {
        TemplateParameterValue templateParameterValue = (TemplateParameterValue)theEObject;
        T result = caseTemplateParameterValue(templateParameterValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.EVALUATION_CALL:
      {
        EvaluationCall evaluationCall = (EvaluationCall)theEObject;
        T result = caseEvaluationCall(evaluationCall);
        if (result == null) result = caseTemplateRulePart(evaluationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.PROPERTY_RULE:
      {
        PropertyRule propertyRule = (PropertyRule)theEObject;
        T result = casePropertyRule(propertyRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.SELECTOR:
      {
        Selector selector = (Selector)theEObject;
        T result = caseSelector(selector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.SINGLE_SELECTOR:
      {
        SingleSelector singleSelector = (SingleSelector)theEObject;
        T result = caseSingleSelector(singleSelector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.PROPERTY:
      {
        Property property = (Property)theEObject;
        T result = caseProperty(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.TEMPLATE_MATCH:
      {
        TemplateMatch templateMatch = (TemplateMatch)theEObject;
        T result = caseTemplateMatch(templateMatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.SLOT_MATCH:
      {
        SlotMatch slotMatch = (SlotMatch)theEObject;
        T result = caseSlotMatch(slotMatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.PROPERTY_VALUE:
      {
        PropertyValue propertyValue = (PropertyValue)theEObject;
        T result = casePropertyValue(propertyValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EcssLanguagePackage.SPECIFICATION_CS:
      {
        SpecificationCS specificationCS = (SpecificationCS)theEObject;
        T result = caseSpecificationCS(specificationCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Config</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Config</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfig(Config object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Rule Or Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Rule Or Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateRuleOrDef(TemplateRuleOrDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateDef(TemplateDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Gen Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Gen Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateGenDef(TemplateGenDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateRule(TemplateRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Template Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Template Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicTemplateRule(BasicTemplateRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Generator Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Generator Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateGeneratorRule(TemplateGeneratorRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDef(TypeDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Rule Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Rule Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateRulePart(TemplateRulePart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Each Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Each Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForEachExpression(ForEachExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpression(IfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Static Template Rule Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Static Template Rule Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStaticTemplateRulePart(StaticTemplateRulePart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateFunctionCall(TemplateFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slot Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slot Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSlotCall(SlotCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Or Value Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Or Value Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalOrValueCall(LocalOrValueCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Evaluation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Evaluation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalEvaluationCall(LocalEvaluationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Parameter Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Parameter Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateParameterValue(TemplateParameterValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evaluation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evaluation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvaluationCall(EvaluationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyRule(PropertyRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelector(Selector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleSelector(SingleSelector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperty(Property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Match</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Match</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateMatch(TemplateMatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slot Match</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slot Match</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSlotMatch(SlotMatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyValue(PropertyValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specification CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specification CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecificationCS(SpecificationCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //EcssLanguageSwitch
