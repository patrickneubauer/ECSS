/**
 * generated by Xtext 2.15.0
 */
package uk.ac.york.cs.ecss.language.ecssLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.york.cs.ecss.language.ecssLanguage.EcssLanguagePackage;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateFunctionCall;
import uk.ac.york.cs.ecss.language.ecssLanguage.TemplateParameterValue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Template Function Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateFunctionCallImpl#isIsReference <em>Is Reference</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateFunctionCallImpl#getName <em>Name</em>}</li>
 *   <li>{@link uk.ac.york.cs.ecss.language.ecssLanguage.impl.TemplateFunctionCallImpl#getParValue <em>Par Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TemplateFunctionCallImpl extends TemplateRulePartImpl implements TemplateFunctionCall
{
  /**
   * The default value of the '{@link #isIsReference() <em>Is Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsReference()
   * @generated
   * @ordered
   */
  protected static final boolean IS_REFERENCE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsReference() <em>Is Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsReference()
   * @generated
   * @ordered
   */
  protected boolean isReference = IS_REFERENCE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParValue() <em>Par Value</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParValue()
   * @generated
   * @ordered
   */
  protected EList<TemplateParameterValue> parValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TemplateFunctionCallImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcssLanguagePackage.Literals.TEMPLATE_FUNCTION_CALL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsReference()
  {
    return isReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsReference(boolean newIsReference)
  {
    boolean oldIsReference = isReference;
    isReference = newIsReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__IS_REFERENCE, oldIsReference, isReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TemplateParameterValue> getParValue()
  {
    if (parValue == null)
    {
      parValue = new EObjectContainmentEList<TemplateParameterValue>(TemplateParameterValue.class, this, EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__PAR_VALUE);
    }
    return parValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__PAR_VALUE:
        return ((InternalEList<?>)getParValue()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__IS_REFERENCE:
        return isIsReference();
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__NAME:
        return getName();
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__PAR_VALUE:
        return getParValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__IS_REFERENCE:
        setIsReference((Boolean)newValue);
        return;
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__NAME:
        setName((String)newValue);
        return;
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__PAR_VALUE:
        getParValue().clear();
        getParValue().addAll((Collection<? extends TemplateParameterValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__IS_REFERENCE:
        setIsReference(IS_REFERENCE_EDEFAULT);
        return;
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__PAR_VALUE:
        getParValue().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__IS_REFERENCE:
        return isReference != IS_REFERENCE_EDEFAULT;
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case EcssLanguagePackage.TEMPLATE_FUNCTION_CALL__PAR_VALUE:
        return parValue != null && !parValue.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isReference: ");
    result.append(isReference);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TemplateFunctionCallImpl
