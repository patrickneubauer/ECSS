/*
 * generated by Xtext 2.15.0
 */
grammar InternalSimpleReg;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.york.simpleregexp.simplereg.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.york.simpleregexp.simplereg.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.york.simpleregexp.simplereg.services.SimpleRegGrammarAccess;

}

@parser::members {

 	private SimpleRegGrammarAccess grammarAccess;

    public InternalSimpleRegParser(TokenStream input, SimpleRegGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RegexAlternatives";
   	}

   	@Override
   	protected SimpleRegGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRegexAlternatives
entryRuleRegexAlternatives returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexAlternativesRule()); }
	iv_ruleRegexAlternatives=ruleRegexAlternatives
	{ $current=$iv_ruleRegexAlternatives.current; }
	EOF;

// Rule RegexAlternatives
ruleRegexAlternatives returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegexAlternativesAccess().getRegexGroupParserRuleCall_0());
		}
		this_RegexGroup_0=ruleRegexGroup
		{
			$current = $this_RegexGroup_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getRegexAlternativesAccess().getRegexAlternativesElementsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='|'
				{
					newLeafNode(otherlv_2, grammarAccess.getRegexAlternativesAccess().getVerticalLineKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRegexAlternativesAccess().getElementsRegexGroupParserRuleCall_1_1_1_0());
						}
						lv_elements_3_0=ruleRegexGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRegexAlternativesRule());
							}
							add(
								$current,
								"elements",
								lv_elements_3_0,
								"uk.ac.york.simpleregexp.simplereg.SimpleReg.RegexGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleRegexGroup
entryRuleRegexGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexGroupRule()); }
	iv_ruleRegexGroup=ruleRegexGroup
	{ $current=$iv_ruleRegexGroup.current; }
	EOF;

// Rule RegexGroup
ruleRegexGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegexGroupAccess().getRegexTokenParserRuleCall_0());
		}
		this_RegexToken_0=ruleRegexToken
		{
			$current = $this_RegexToken_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getRegexGroupAccess().getRegexGroupElementsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRegexGroupAccess().getElementsRegexTokenParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleRegexToken
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegexGroupRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"uk.ac.york.simpleregexp.simplereg.SimpleReg.RegexToken");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleRegexToken
entryRuleRegexToken returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexTokenRule()); }
	iv_ruleRegexToken=ruleRegexToken
	{ $current=$iv_ruleRegexToken.current; }
	EOF;

// Rule RegexToken
ruleRegexToken returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegexTokenAccess().getRegexTokenElementParserRuleCall_0());
		}
		this_RegexTokenElement_0=ruleRegexTokenElement
		{
			$current = $this_RegexTokenElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					lv_cardinality_1_1='?'
					{
						newLeafNode(lv_cardinality_1_1, grammarAccess.getRegexTokenAccess().getCardinalityQuestionMarkKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegexTokenRule());
						}
						setWithLastConsumed($current, "cardinality", lv_cardinality_1_1, null);
					}
					    |
					lv_cardinality_1_2='*'
					{
						newLeafNode(lv_cardinality_1_2, grammarAccess.getRegexTokenAccess().getCardinalityAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegexTokenRule());
						}
						setWithLastConsumed($current, "cardinality", lv_cardinality_1_2, null);
					}
					    |
					lv_cardinality_1_3='+'
					{
						newLeafNode(lv_cardinality_1_3, grammarAccess.getRegexTokenAccess().getCardinalityPlusSignKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegexTokenRule());
						}
						setWithLastConsumed($current, "cardinality", lv_cardinality_1_3, null);
					}
				)
			)
		)?
		(
			(
				(
					lv_hasMinCard_2_0='{'
					{
						newLeafNode(lv_hasMinCard_2_0, grammarAccess.getRegexTokenAccess().getHasMinCardLeftCurlyBracketKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegexTokenRule());
						}
						setWithLastConsumed($current, "hasMinCard", true, "{");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRegexTokenAccess().getMinCardinalityEINTParserRuleCall_2_1_0());
					}
					lv_minCardinality_3_0=ruleEINT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegexTokenRule());
						}
						set(
							$current,
							"minCardinality",
							lv_minCardinality_3_0,
							"uk.ac.york.simpleregexp.simplereg.SimpleReg.EINT");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					(
						lv_hasMaxCard_4_0=','
						{
							newLeafNode(lv_hasMaxCard_4_0, grammarAccess.getRegexTokenAccess().getHasMaxCardCommaKeyword_2_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRegexTokenRule());
							}
							setWithLastConsumed($current, "hasMaxCard", true, ",");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getRegexTokenAccess().getMaxCardinalityEINTParserRuleCall_2_2_1_0());
						}
						lv_maxCardinality_5_0=ruleEINT
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRegexTokenRule());
							}
							set(
								$current,
								"maxCardinality",
								lv_maxCardinality_5_0,
								"uk.ac.york.simpleregexp.simplereg.SimpleReg.EINT");
							afterParserOrEnumRuleCall();
						}
					)
				)?
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getRegexTokenAccess().getRightCurlyBracketKeyword_2_3());
			}
		)?
	)
;

// Entry rule entryRuleRegexTokenElement
entryRuleRegexTokenElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexTokenElementRule()); }
	iv_ruleRegexTokenElement=ruleRegexTokenElement
	{ $current=$iv_ruleRegexTokenElement.current; }
	EOF;

// Rule RegexTokenElement
ruleRegexTokenElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegexTokenElementAccess().getMultiCharactersParserRuleCall_0());
		}
		this_MultiCharacters_0=ruleMultiCharacters
		{
			$current = $this_MultiCharacters_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRegexTokenElementAccess().getParenthesizedRegexElementParserRuleCall_1());
		}
		this_ParenthesizedRegexElement_1=ruleParenthesizedRegexElement
		{
			$current = $this_ParenthesizedRegexElement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRegexTokenElementAccess().getWildcardParserRuleCall_2());
		}
		this_Wildcard_2=ruleWildcard
		{
			$current = $this_Wildcard_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRegexTokenElementAccess().getSingleCharsParserRuleCall_3());
		}
		this_SingleChars_3=ruleSingleChars
		{
			$current = $this_SingleChars_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParenthesizedRegexElement
entryRuleParenthesizedRegexElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedRegexElementRule()); }
	iv_ruleParenthesizedRegexElement=ruleParenthesizedRegexElement
	{ $current=$iv_ruleParenthesizedRegexElement.current; }
	EOF;

// Rule ParenthesizedRegexElement
ruleParenthesizedRegexElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesizedRegexElementAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getParenthesizedRegexElementAccess().getRegexAlternativesParserRuleCall_1());
		}
		this_RegexAlternatives_1=ruleRegexAlternatives
		{
			$current = $this_RegexAlternatives_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParenthesizedRegexElementAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleSingleChars
entryRuleSingleChars returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleCharsRule()); }
	iv_ruleSingleChars=ruleSingleChars
	{ $current=$iv_ruleSingleChars.current; }
	EOF;

// Rule SingleChars
ruleSingleChars returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSingleCharsAccess().getValueTSINGLECHARSDTParserRuleCall_0());
			}
			lv_value_0_0=ruleTSINGLECHARSDT
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSingleCharsRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"uk.ac.york.simpleregexp.simplereg.SimpleReg.TSINGLECHARSDT");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEINT
entryRuleEINT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEINTRule()); }
	iv_ruleEINT=ruleEINT
	{ $current=$iv_ruleEINT.current.getText(); }
	EOF;

// Rule EINT
ruleEINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getEINTAccess().getINTTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getEINTAccess().getTEST2ParserRuleCall_1());
		}
		this_TEST2_1=ruleTEST2
		{
			$current.merge(this_TEST2_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTEST2
entryRuleTEST2 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTEST2Rule()); }
	iv_ruleTEST2=ruleTEST2
	{ $current=$iv_ruleTEST2.current.getText(); }
	EOF;

// Rule TEST2
ruleTEST2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='test2'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTEST2Access().getTest2Keyword());
	}
;

// Entry rule entryRuleTSINGLECHARSDT
entryRuleTSINGLECHARSDT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTSINGLECHARSDTRule()); }
	iv_ruleTSINGLECHARSDT=ruleTSINGLECHARSDT
	{ $current=$iv_ruleTSINGLECHARSDT.current.getText(); }
	EOF;

// Rule TSINGLECHARSDT
ruleTSINGLECHARSDT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getTSINGLECHARSDTAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_TSINGLECHARS_1=RULE_TSINGLECHARS
		{
			$current.merge(this_TSINGLECHARS_1);
		}
		{
			newLeafNode(this_TSINGLECHARS_1, grammarAccess.getTSINGLECHARSDTAccess().getTSINGLECHARSTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleWildcard
entryRuleWildcard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWildcardRule()); }
	iv_ruleWildcard=ruleWildcard
	{ $current=$iv_ruleWildcard.current; }
	EOF;

// Rule Wildcard
ruleWildcard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWildcardAccess().getWildcardAction_0(),
					$current);
			}
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getWildcardAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleMultiCharacters
entryRuleMultiCharacters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiCharactersRule()); }
	iv_ruleMultiCharacters=ruleMultiCharacters
	{ $current=$iv_ruleMultiCharacters.current; }
	EOF;

// Rule MultiCharacters
ruleMultiCharacters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_MULTICHARTERMINAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getMultiCharactersAccess().getValueMULTICHARTERMINALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMultiCharactersRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"uk.ac.york.simpleregexp.simplereg.SimpleReg.MULTICHARTERMINAL");
			}
		)
	)
;

RULE_INT : ('0'..'9')+;

RULE_MULTICHARTERMINAL : '[' ( options {greedy=false;} : . )*']';

RULE_TSINGLECHARS : ('\\' .|~(('['|')'|'{'|'}'|']'|'\\'|'('|'|'|'.')))+;
