<?xml version="1.0" encoding="ASCII"?>
<ecssal:Root xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ecssal="http://patrickneubauer.github.io/ecss/ecssal">
  <searchElements name="WML_6" githubUserAndRepo="wesnoth/wesnoth" respository="wesnoth" provider="wesnoth" analysisElement="//@analysisElements.0" assigneesCount="56" stargazersCount="1179" subscribersCount="130">
    <grammar localFileLocation="../../data-example/search/WML_6.xtext" remoteFileLocation="https://raw.githubusercontent.com/wesnoth/wesnoth/dc89612dc4cde077dfa55dd062925bffdc77f6c8/utils/umc_dev/org.wesnoth/src/org/wesnoth/WML.xtext" analysisElement="//@analysisElements.0">
      <distances targetGrammar="//@searchElements.0/@grammar" distanceType="RULE"/>
      <distances distance="1.2674087630820554" targetGrammar="//@searchElements.1/@grammar" distanceType="RULE"/>
      <distances distance="1.2674087630820556" targetGrammar="//@searchElements.2/@grammar" distanceType="RULE"/>
      <distances distance="1.2656486018449127" targetGrammar="//@searchElements.3/@grammar" distanceType="RULE"/>
    </grammar>
  </searchElements>
  <searchElements name="SimpleCarModel" analysisElement="//@analysisElements.3">
    <grammar localFileLocation="../../data-example/search/SimpleCarModel.xtext" analysisElement="//@analysisElements.3">
      <distances distance="1.2674087630820554" targetGrammar="//@searchElements.0/@grammar" distanceType="RULE"/>
      <distances targetGrammar="//@searchElements.1/@grammar" distanceType="RULE"/>
      <distances distance="0.669878294927476" targetGrammar="//@searchElements.2/@grammar" distanceType="RULE"/>
      <distances distance="1.4142135623730951" targetGrammar="//@searchElements.3/@grammar" distanceType="RULE"/>
    </grammar>
  </searchElements>
  <searchElements name="Router" analysisElement="//@analysisElements.1">
    <grammar localFileLocation="../../data-example/search/Router.xtext" analysisElement="//@analysisElements.1">
      <distances distance="1.2674087630820556" targetGrammar="//@searchElements.0/@grammar" distanceType="RULE"/>
      <distances distance="0.669878294927476" targetGrammar="//@searchElements.1/@grammar" distanceType="RULE"/>
      <distances targetGrammar="//@searchElements.2/@grammar" distanceType="RULE"/>
      <distances distance="1.4142135623730951" targetGrammar="//@searchElements.3/@grammar" distanceType="RULE"/>
    </grammar>
  </searchElements>
  <searchElements name="Yang" analysisElement="//@analysisElements.2">
    <grammar localFileLocation="../../data-example/search/Yang.xtext" analysisElement="//@analysisElements.2">
      <distances distance="1.2656486018449127" targetGrammar="//@searchElements.0/@grammar" distanceType="RULE"/>
      <distances distance="1.4142135623730951" targetGrammar="//@searchElements.1/@grammar" distanceType="RULE"/>
      <distances distance="1.4142135623730951" targetGrammar="//@searchElements.2/@grammar" distanceType="RULE"/>
      <distances targetGrammar="//@searchElements.3/@grammar" distanceType="RULE"/>
    </grammar>
  </searchElements>
  <analysisElements name="WML_6" searchElement="//@searchElements.0" clusterElement="//@parentCluster/@clusterElements.0" sourceGrammar="//@searchElements.0/@grammar">
    <metaanalysis prodCount="61" varCount="33" termCount="92" vocCount="186"/>
    <micropatterngroup name="FOLDING">
      <micropattern name="justOneChain">
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
      </micropattern>
      <micropattern name="justSLStar"/>
      <micropattern name="justPlus"/>
      <micropattern name="justEmpty"/>
      <micropattern name="chainOrTerminal"/>
      <micropattern name="justSLPlus"/>
      <micropattern name="justChains">
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
      </micropattern>
      <micropattern name="justStar">
        <result key="WMLRoot" value="WMLRootExpression*"/>
      </micropattern>
      <micropattern name="justFailure"/>
      <micropattern name="reflexiveChain"/>
      <micropattern name="chainsAndTerminals"/>
      <micropattern name="justOptional"/>
    </micropatterngroup>
    <micropatterngroup>
      <micropattern name="abstractSyntax">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
      </micropattern>
      <micropattern name="containsDisjunction">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
      <micropattern name="containsFailure"/>
      <micropattern name="containsEpsilon"/>
      <micropattern name="containsSLStar"/>
      <micropattern name="containsBoolean"/>
      <micropattern name="containsSequence">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
      </micropattern>
      <micropattern name="containsOptional">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
      </micropattern>
      <micropattern name="containsInteger">
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
      <micropattern name="containsSelector"/>
      <micropattern name="containsPlus">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
      </micropattern>
      <micropattern name="containsLabel"/>
      <micropattern name="containsSLPlus"/>
      <micropattern>
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
      </micropattern>
      <micropattern name="containsString"/>
      <micropattern name="containsUniversal">
        <result key="ANY_OTHER" value="&#x3b1;"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="CONCRETE">
      <micropattern name="modifiers"/>
      <micropattern name="keywords"/>
      <micropattern name="words"/>
      <micropattern name="keyword"/>
      <micropattern name="operator"/>
      <micropattern name="literalSimple"/>
      <micropattern name="preterminal">
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
      </micropattern>
      <micropattern name="literalNumeric"/>
      <micropattern name="range"/>
      <micropattern name="simpleStatement"/>
      <micropattern name="tokens"/>
      <micropattern name="literalFirstRest"/>
      <micropattern name="operators">
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
      </micropattern>
      <micropattern name="operatorsMixed">
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="NAMING">
      <micropattern name="mixedCaseLax"/>
      <micropattern name="mixedCase"/>
      <micropattern name="camelCase">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
      <micropattern name="camelCaseLax">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
      <micropattern name="miltiwordLax">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
      <micropattern name="upperCase">
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
      </micropattern>
      <micropattern name="lowerCaseLax"/>
      <micropattern name="lowerCase"/>
      <micropattern name="upperCaseLax">
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
      </micropattern>
      <micropattern name="miltiword">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="TEMPLATE">
      <micropattern name="bracketSLStar"/>
      <micropattern name="bracket"/>
      <micropattern name="bracketOptional"/>
      <micropattern name="bracketFakeSLStar"/>
      <micropattern name="distinguished">
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
      </micropattern>
      <micropattern name="bracketPlus">
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
      </micropattern>
      <micropattern name="elementAccess"/>
      <micropattern name="bracketSLPlus"/>
      <micropattern name="bracketStar"/>
      <micropattern name="constructors"/>
      <micropattern name="pureSequence"/>
      <micropattern name="delimited"/>
      <micropattern name="bracketSelf"/>
      <micropattern name="bracketFakeSLPlus"/>
    </micropatterngroup>
    <micropatterngroup name="SUGAR">
      <micropattern name="fakeSL"/>
      <micropattern name="exprLowestLayer">
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
      </micropattern>
      <micropattern name="exprPrefixLayer">
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
      </micropattern>
      <micropattern name="yaccPlusLeft"/>
      <micropattern name="fakeSLPlus"/>
      <micropattern name="yaccStarRight"/>
      <micropattern name="yaccStarLeft"/>
      <micropattern name="fakeSLStar"/>
      <micropattern name="yaccPlusRight"/>
      <micropattern name="exprInfixLayer">
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
      </micropattern>
      <micropattern name="fakeOptional"/>
      <micropattern name="exprPostfixLayer">
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="NORMAL">
      <micropattern name="abstractNormalForm">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
      </micropattern>
      <micropattern name="chomskyNormalForm"/>
      <micropattern name="greibachNormalForm"/>
    </micropatterngroup>
    <micropatterngroup name="GLOBAL">
      <micropattern name="bottom"/>
      <micropattern name="root">
        <result key="WMLRoot" value="WMLRootExpression*"/>
      </micropattern>
      <micropattern name="leaf">
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
      </micropattern>
      <micropattern name="multiroot"/>
      <micropattern name="top">
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="STRUCTURE">
      <micropattern name="singleton">
        <result key="WMLPreprocIF" value="IFDEF | IFNDEF | IFHAVE | IFNHAVE WMLValuedExpression* (ELSE WMLValuedExpression+)? ENDIF"/>
        <result key="WMLArrayCall" value="&quot;[&quot; WMLValue+ &quot;]&quot;"/>
        <result key="EOL" value="&quot;\u000d&quot;? &quot;\u000a&quot;"/>
        <result key="WMLTag" value="&quot;[&quot; &quot;+&quot;? ID &quot;]&quot; WMLExpression* &quot;[/&quot; ID &quot;]&quot;"/>
        <result key="IFHAVE" value="&quot;#ifhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLTextdomain" value="TEXTDOMAIN"/>
        <result key="IFDEF" value="&quot;#ifdef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLKey" value="ID &quot;=&quot; WMLKeyValue* (EOL? &quot;+&quot; EOL? WMLKeyValue+)* EOL | SL_COMMENT"/>
        <result key="ENDDEF" value="&quot;#enddef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLLuaCode" value="LUA_CODE"/>
        <result key="WS" value="(&quot; &quot; | &quot;\u0009&quot;)+"/>
        <result key="ANY_OTHER" value="&#x3b1;"/>
        <result key="TEXTDOMAIN" value="&quot;#textdomain&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLMacroDefine" value="DEFINE WMLValuedExpression* ENDDEF"/>
        <result key="WMLMacroCall" value="&quot;{&quot; &quot;./&quot;? &quot;~&quot;? ID WMLMacroCallParameter* &quot;}&quot;"/>
        <result key="LUA_CODE" value="&quot;&lt;&lt;&quot; &#xac;&quot;>>&quot;"/>
        <result key="IFNDEF" value="&quot;#ifndef&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="WMLRoot" value="WMLRootExpression*"/>
        <result key="ENDIF" value="&quot;#endif&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ELSE" value="&quot;#else&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="SL_COMMENT" value="&quot;#&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="IFNHAVE" value="&quot;#ifnhave&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
        <result key="ID" value="((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;) | &quot;_&quot; | &quot;-&quot; | &quot;,&quot;)+"/>
        <result key="DEFINE" value="&quot;#define&quot; &#xac;(&quot;\u000a&quot; | &quot;\u000d&quot;) (&quot;\u000d&quot;? &quot;\u000a&quot;)?"/>
      </micropattern>
      <micropattern name="zigzag"/>
      <micropattern name="horizontal">
        <result key="WMLValuedExpression" value="WMLExpression | WMLValue"/>
        <result key="MacroTokens" value="&quot;=&quot; | &quot;[&quot; | &quot;]&quot; | &quot;+&quot; | &quot;[/&quot;"/>
        <result key="WMLKeyValue" value="WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall"/>
        <result key="WMLGrammarElement" value="WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter"/>
        <result key="WMLExpression" value="WMLRootExpression | WMLKey"/>
        <result key="WMLRootExpression" value="WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF"/>
        <result key="WMLMacroParameter" value="WMLValue | MacroTokens"/>
        <result key="WMLMacroCallParameter" value="WMLMacroParameter | WMLMacroCall"/>
        <result key="WMLValue" value="ID | integer() | &quot;_&quot; | &quot;~&quot; | &quot;.&quot; | &quot;./&quot; | &quot;$&quot; | &quot;/&quot; | &quot;(&quot; | &quot;)&quot; | ANY_OTHER"/>
      </micropattern>
      <micropattern name="disallowed"/>
      <micropattern name="vertical"/>
    </micropatterngroup>
  </analysisElements>
  <analysisElements name="Router" searchElement="//@searchElements.2" clusterElement="//@parentCluster/@clusterElements.1" sourceGrammar="//@searchElements.2/@grammar"/>
  <analysisElements name="Yang" searchElement="//@searchElements.3" clusterElement="//@parentCluster/@clusterElements.2" sourceGrammar="//@searchElements.3/@grammar"/>
  <analysisElements name="SimpleCarModel" searchElement="//@searchElements.1" clusterElement="//@parentCluster/@clusterElements.3" sourceGrammar="//@searchElements.1/@grammar">
    <metaanalysis prodCount="3" varCount="3" termCount="67" vocCount="73"/>
    <micropatterngroup name="FOLDING">
      <micropattern name="justOneChain"/>
      <micropattern name="justSLStar"/>
      <micropattern name="justPlus"/>
      <micropattern name="justEmpty"/>
      <micropattern name="chainOrTerminal"/>
      <micropattern name="justSLPlus"/>
      <micropattern name="justChains"/>
      <micropattern name="justStar"/>
      <micropattern name="justFailure"/>
      <micropattern name="reflexiveChain"/>
      <micropattern name="chainsAndTerminals"/>
      <micropattern name="justOptional"/>
    </micropatterngroup>
    <micropatterngroup>
      <micropattern name="abstractSyntax"/>
      <micropattern name="containsDisjunction">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="containsFailure"/>
      <micropattern name="containsEpsilon"/>
      <micropattern name="containsSLStar"/>
      <micropattern name="containsBoolean"/>
      <micropattern name="containsSequence">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
        <result key="Wheel" value="&quot;Wheel&quot; ID &quot;{&quot; &quot;}&quot;"/>
      </micropattern>
      <micropattern name="containsOptional">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
      </micropattern>
      <micropattern name="containsInteger">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
      </micropattern>
      <micropattern name="containsSelector"/>
      <micropattern name="containsPlus"/>
      <micropattern name="containsLabel"/>
      <micropattern name="containsSLPlus"/>
      <micropattern>
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="containsString"/>
      <micropattern name="containsUniversal"/>
    </micropatterngroup>
    <micropatterngroup name="CONCRETE">
      <micropattern name="modifiers"/>
      <micropattern name="keywords"/>
      <micropattern name="words"/>
      <micropattern name="keyword"/>
      <micropattern name="operator"/>
      <micropattern name="literalSimple"/>
      <micropattern name="preterminal">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="literalNumeric"/>
      <micropattern name="range"/>
      <micropattern name="simpleStatement"/>
      <micropattern name="tokens"/>
      <micropattern name="literalFirstRest"/>
      <micropattern name="operators"/>
      <micropattern name="operatorsMixed"/>
    </micropatterngroup>
    <micropatterngroup name="NAMING">
      <micropattern name="mixedCaseLax"/>
      <micropattern name="mixedCase"/>
      <micropattern name="camelCase">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
        <result key="Wheel" value="&quot;Wheel&quot; ID &quot;{&quot; &quot;}&quot;"/>
      </micropattern>
      <micropattern name="camelCaseLax">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
        <result key="Wheel" value="&quot;Wheel&quot; ID &quot;{&quot; &quot;}&quot;"/>
      </micropattern>
      <micropattern name="miltiwordLax">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="upperCase">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="lowerCaseLax"/>
      <micropattern name="lowerCase"/>
      <micropattern name="upperCaseLax">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="miltiword">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="TEMPLATE">
      <micropattern name="bracketSLStar"/>
      <micropattern name="bracket"/>
      <micropattern name="bracketOptional"/>
      <micropattern name="bracketFakeSLStar"/>
      <micropattern name="distinguished"/>
      <micropattern name="bracketPlus"/>
      <micropattern name="elementAccess"/>
      <micropattern name="bracketSLPlus"/>
      <micropattern name="bracketStar"/>
      <micropattern name="constructors"/>
      <micropattern name="pureSequence">
        <result key="Wheel" value="&quot;Wheel&quot; ID &quot;{&quot; &quot;}&quot;"/>
      </micropattern>
      <micropattern name="delimited"/>
      <micropattern name="bracketSelf"/>
      <micropattern name="bracketFakeSLPlus"/>
    </micropatterngroup>
    <micropatterngroup name="SUGAR">
      <micropattern name="fakeSL"/>
      <micropattern name="exprLowestLayer"/>
      <micropattern name="exprPrefixLayer"/>
      <micropattern name="yaccPlusLeft"/>
      <micropattern name="fakeSLPlus"/>
      <micropattern name="yaccStarRight"/>
      <micropattern name="yaccStarLeft"/>
      <micropattern name="fakeSLStar"/>
      <micropattern name="yaccPlusRight"/>
      <micropattern name="exprInfixLayer"/>
      <micropattern name="fakeOptional"/>
      <micropattern name="exprPostfixLayer"/>
    </micropatterngroup>
    <micropatterngroup name="NORMAL">
      <micropattern name="abstractNormalForm"/>
      <micropattern name="chomskyNormalForm"/>
      <micropattern name="greibachNormalForm"/>
    </micropatterngroup>
    <micropatterngroup name="GLOBAL">
      <micropattern name="bottom"/>
      <micropattern name="root">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
      </micropattern>
      <micropattern name="leaf">
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
      </micropattern>
      <micropattern name="multiroot"/>
      <micropattern name="top">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
      </micropattern>
    </micropatterngroup>
    <micropatterngroup name="STRUCTURE">
      <micropattern name="singleton">
        <result key="Car" value="&quot;Car&quot; ID &quot;{&quot; &quot;next&quot; ID? &quot;numWheels&quot; integer()? &quot;wheel&quot; Wheel* &quot;}&quot;"/>
        <result key="ID" value="(&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; ((&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot; | &quot;g&quot; | &quot;h&quot; | &quot;i&quot; | &quot;j&quot; | &quot;k&quot; | &quot;l&quot; | &quot;m&quot; | &quot;n&quot; | &quot;o&quot; | &quot;p&quot; | &quot;q&quot; | &quot;r&quot; | &quot;s&quot; | &quot;t&quot; | &quot;u&quot; | &quot;v&quot; | &quot;w&quot; | &quot;x&quot; | &quot;y&quot;) | (&quot;A&quot; | &quot;B&quot; | &quot;C&quot; | &quot;D&quot; | &quot;E&quot; | &quot;F&quot; | &quot;G&quot; | &quot;H&quot; | &quot;I&quot; | &quot;J&quot; | &quot;K&quot; | &quot;L&quot; | &quot;M&quot; | &quot;N&quot; | &quot;O&quot; | &quot;P&quot; | &quot;Q&quot; | &quot;R&quot; | &quot;S&quot; | &quot;T&quot; | &quot;U&quot; | &quot;V&quot; | &quot;W&quot; | &quot;X&quot; | &quot;Y&quot;) | &quot;_&quot; | (&quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; | &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; | &quot;8&quot;))*"/>
        <result key="Wheel" value="&quot;Wheel&quot; ID &quot;{&quot; &quot;}&quot;"/>
      </micropattern>
      <micropattern name="zigzag"/>
      <micropattern name="horizontal"/>
      <micropattern name="disallowed"/>
      <micropattern name="vertical"/>
    </micropatterngroup>
  </analysisElements>
  <parentCluster newickTree="((WML_6:1.26565,Yang:1.26565):0.14856,(Router:0.66988,SimpleCarModel:0.66988):0.74434);">
    <clusterElements name="WML_6" sourceAnalysisElement="//@analysisElements.0">
      <clusterElementInfos targetAnalysisElement="//@analysisElements.0"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.1"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.2"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.3"/>
    </clusterElements>
    <clusterElements name="Router" sourceAnalysisElement="//@analysisElements.1">
      <clusterElementInfos targetAnalysisElement="//@analysisElements.0"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.1"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.2"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.3"/>
    </clusterElements>
    <clusterElements name="Yang" sourceAnalysisElement="//@analysisElements.2">
      <clusterElementInfos targetAnalysisElement="//@analysisElements.0"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.1"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.2"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.3"/>
    </clusterElements>
    <clusterElements name="SimpleCarModel" sourceAnalysisElement="//@analysisElements.3">
      <clusterElementInfos targetAnalysisElement="//@analysisElements.0"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.1"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.2"/>
      <clusterElementInfos targetAnalysisElement="//@analysisElements.3"/>
    </clusterElements>
  </parentCluster>
</ecssal:Root>

