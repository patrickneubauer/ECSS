// automatically generated by Xtext
grammar me.ecss.xtext.defaultgrammar.Router with org.eclipse.xtext.common.Terminals

import "http://router/1.0" as Router
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Agent returns Router::Agent:
	Agent_Impl | Provider | Consumer;

Device returns Router::Device:
	Device_Impl | Server | Computer | Router0;

Cable returns Router::Cable:
	Cable_Impl | CopperCable | GlassFiberCable;

EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;

EDataType returns ecore::EDataType:
	EDataType_Impl | EEnum;

EModelElement returns ecore::EModelElement:
	EAttribute | EAnnotation | EClass | EDataType_Impl | EEnum | EEnumLiteral | EFactory | EOperation | EPackage | EParameter | EReference | ETypeParameter;

ENamedElement returns ecore::ENamedElement:
	EAttribute | EClass | EDataType_Impl | EEnum | EEnumLiteral | EOperation | EPackage | EParameter | EReference | ETypeParameter;

EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;

ETypedElement returns ecore::ETypedElement:
	EAttribute | EOperation | EParameter | EReference;

Provider returns Router::Provider:
	'Provider'
	name=EString
	'{'
		'speed' speed=EBigInteger
		'rightserv' rightserv=[Router::Server|EString]
	'}';

Agent_Impl returns Router::Agent:
	'Agent'
	name=EString
	'{'
		'speed' speed=EBigInteger
	'}';

Consumer returns Router::Consumer:
	'Consumer'
	name=EString
	'{'
		'speed' speed=EBigInteger
		'rightcomp' rightcomp=[Router::Computer|EString]
	'}';

Device_Impl returns Router::Device:
	{Router::Device}
	'Device'
	name=EString
	'{'
		('incoming' '(' incoming+=[Router::Cable|EString] ( "," incoming+=[Router::Cable|EString])* ')' )?
		('outgoing' '{' outgoing+=Cable ( "," outgoing+=Cable)* '}' )?
	'}';

Cable_Impl returns Router::Cable:
	'Cable'
	name=EString
	'{'
		'speed' speed=EBigInteger
		'target' target=[Router::Device|EString]
	'}';

Server returns Router::Server:
	{Router::Server}
	'Server'
	name=EString
	'{'
		('incoming' '(' incoming+=[Router::Cable|EString] ( "," incoming+=[Router::Cable|EString])* ')' )?
		('provider' provider=[Router::Provider|EString])?
		('outgoing' '{' outgoing+=Cable ( "," outgoing+=Cable)* '}' )?
	'}';

Computer returns Router::Computer:
	'Computer'
	name=EString
	'{'
		('incoming' '(' incoming+=[Router::Cable|EString] ( "," incoming+=[Router::Cable|EString])* ')' )?
		'consumer' consumer=[Router::Consumer|EString]
		('outgoing' '{' outgoing+=Cable ( "," outgoing+=Cable)* '}' )?
	'}';

Router0 returns Router::Router:
	'Router'
	name=EString
	'{'
		'maxSpeed' maxSpeed=EBigInteger
		('incoming' '(' incoming+=[Router::Cable|EString] ( "," incoming+=[Router::Cable|EString])* ')' )?
		('outgoing' '{' outgoing+=Cable ( "," outgoing+=Cable)* '}' )?
	'}';

CopperCable returns Router::CopperCable:
	'CopperCable'
	name=EString
	'{'
		'speed' speed=EBigInteger
		'target' target=[Router::Device|EString]
	'}';

GlassFiberCable returns Router::GlassFiberCable:
	'GlassFiberCable'
	name=EString
	'{'
		'speed' speed=EBigInteger
		'target' target=[Router::Device|EString]
	'}';

Container returns Router::Container:
	{Router::Container}
	'Container'
	'{'
		('agents' '{' agents+=Agent ( "," agents+=Agent)* '}' )?
		('devices' '{' devices+=Device ( "," devices+=Device)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EFactory returns ecore::EFactory:
	{ecore::EFactory}
	'EFactory'
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';

EPackage returns ecore::EPackage:
	{ecore::EPackage}
	'EPackage'
	name=EString
	'{'
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eClassifiers' '{' eClassifiers+=EClassifier ( "," eClassifiers+=EClassifier)* '}' )?
		('eSubpackages' '{' eSubpackages+=EPackage ( "," eSubpackages+=EPackage)* '}' )?
	'}';

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

EByte returns ecore::EByte:
	'-'? INT;

EByteArray returns ecore::EByteArray:
	'EByteArray' /* TODO: implement this rule and an appropriate IValueConverter */;

EByteObject returns ecore::EByteObject:
	'-'? INT;

EChar returns ecore::EChar:
	'-'? INT;

ECharacterObject returns ecore::ECharacterObject:
	'ECharacterObject' /* TODO: implement this rule and an appropriate IValueConverter */;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;


EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;





EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EFloatObject returns ecore::EFloatObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

EJavaClass returns ecore::EJavaClass:
	'EJavaClass' /* TODO: implement this rule and an appropriate IValueConverter */;

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

ELong returns ecore::ELong:
	'-'? INT;

ELongObject returns ecore::ELongObject:
	'-'? INT;




EShort returns ecore::EShort:
	'-'? INT;

EShortObject returns ecore::EShortObject:
	'-'? INT;