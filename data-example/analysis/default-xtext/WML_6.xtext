// automatically generated by Xtext
grammar me.ecss.xtext.defaultgrammar.wml with org.eclipse.xtext.common.Terminals

import "http://www.wesnoth.org/WML" as wml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


WMLGrammarElement returns wml::WMLGrammarElement:
	WMLGrammarElement_Impl | WMLRoot | WMLTag | WMLKey | WMLKeyValue_Impl | WMLMacroCall | WMLMacroCallParameter_Impl | WMLArrayCall | WMLMacroDefine | WMLPreprocIF | WMLRootExpression_Impl | WMLExpression_Impl | WMLValuedExpression_Impl | WMLTextdomain | WMLLuaCode | WMLMacroParameter_Impl | WMLValue | MacroTokens;

WMLKeyValue returns wml::WMLKeyValue:
	WMLKeyValue_Impl | WMLMacroCall | WMLArrayCall | WMLLuaCode | WMLValue;

WMLMacroCallParameter returns wml::WMLMacroCallParameter:
	WMLMacroCallParameter_Impl | WMLMacroCall | WMLMacroParameter_Impl | WMLValue | MacroTokens;

WMLRootExpression returns wml::WMLRootExpression:
	WMLRootExpression_Impl | WMLTag | WMLMacroCall | WMLMacroDefine | WMLPreprocIF | WMLTextdomain;

WMLExpression returns wml::WMLExpression:
	WMLExpression_Impl | WMLTag | WMLKey | WMLMacroCall | WMLMacroDefine | WMLPreprocIF | WMLRootExpression_Impl | WMLTextdomain;

WMLValuedExpression returns wml::WMLValuedExpression:
	WMLValuedExpression_Impl | WMLTag | WMLKey | WMLMacroCall | WMLMacroDefine | WMLPreprocIF | WMLRootExpression_Impl | WMLExpression_Impl | WMLTextdomain | WMLValue;

WMLMacroParameter returns wml::WMLMacroParameter:
	WMLMacroParameter_Impl | WMLValue | MacroTokens;

EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;

EDataType returns ecore::EDataType:
	EDataType_Impl | EEnum;

EModelElement returns ecore::EModelElement:
	EAttribute | EAnnotation | EClass | EDataType_Impl | EEnum | EEnumLiteral | EFactory | EOperation | EPackage | EParameter | EReference | ETypeParameter;

ENamedElement returns ecore::ENamedElement:
	EAttribute | EClass | EDataType_Impl | EEnum | EEnumLiteral | EOperation | EPackage | EParameter | EReference | ETypeParameter;

EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;

ETypedElement returns ecore::ETypedElement:
	EAttribute | EOperation | EParameter | EReference;

WMLRoot returns wml::WMLRoot:
	{wml::WMLRoot}
	'WMLRoot'
	'{'
		('Expressions' '{' Expressions+=WMLRootExpression ( "," Expressions+=WMLRootExpression)* '}' )?
	'}';

WMLGrammarElement_Impl returns wml::WMLGrammarElement:
	{wml::WMLGrammarElement}
	'WMLGrammarElement'
	;

WMLTag returns wml::WMLTag:
	{wml::WMLTag}
	'WMLTag'
	name=EString
	'{'
		('plus' plus=EString)?
		('endName' endName=EString)?
		('Expressions' '{' Expressions+=WMLExpression ( "," Expressions+=WMLExpression)* '}' )?
	'}';

WMLKey returns wml::WMLKey:
	{wml::WMLKey}
	'WMLKey'
	name=EString
	'{'
		('eol' '{' eol+=EString ( "," eol+=EString)* '}' )?
		('values' '{' values+=WMLKeyValue ( "," values+=WMLKeyValue)* '}' )?
	'}';

WMLKeyValue_Impl returns wml::WMLKeyValue:
	{wml::WMLKeyValue}
	'WMLKeyValue'
	;

WMLMacroCall returns wml::WMLMacroCall:
	{wml::WMLMacroCall}
	'WMLMacroCall'
	name=EString
	'{'
		('point' point=EString)?
		('relative' relative=EString)?
		('Parameters' '{' Parameters+=WMLMacroCallParameter ( "," Parameters+=WMLMacroCallParameter)* '}' )?
	'}';

WMLMacroCallParameter_Impl returns wml::WMLMacroCallParameter:
	{wml::WMLMacroCallParameter}
	'WMLMacroCallParameter'
	;

WMLArrayCall returns wml::WMLArrayCall:
	{wml::WMLArrayCall}
	'WMLArrayCall'
	'{'
		('value' '{' value+=WMLValue ( "," value+=WMLValue)* '}' )?
	'}';

WMLMacroDefine returns wml::WMLMacroDefine:
	{wml::WMLMacroDefine}
	'WMLMacroDefine'
	name=EString
	'{'
		('endName' endName=EString)?
		('Expressions' '{' Expressions+=WMLValuedExpression ( "," Expressions+=WMLValuedExpression)* '}' )?
	'}';

WMLPreprocIF returns wml::WMLPreprocIF:
	{wml::WMLPreprocIF}
	'WMLPreprocIF'
	name=EString
	'{'
		('Elses' Elses=EString)?
		('endName' endName=EString)?
		('Expressions' '{' Expressions+=WMLValuedExpression ( "," Expressions+=WMLValuedExpression)* '}' )?
		('ElseExpressions' '{' ElseExpressions+=WMLValuedExpression ( "," ElseExpressions+=WMLValuedExpression)* '}' )?
	'}';

WMLRootExpression_Impl returns wml::WMLRootExpression:
	{wml::WMLRootExpression}
	'WMLRootExpression'
	name=EString;

WMLExpression_Impl returns wml::WMLExpression:
	{wml::WMLExpression}
	'WMLExpression'
	name=EString;

WMLValuedExpression_Impl returns wml::WMLValuedExpression:
	{wml::WMLValuedExpression}
	'WMLValuedExpression'
	;

WMLTextdomain returns wml::WMLTextdomain:
	{wml::WMLTextdomain}
	'WMLTextdomain'
	name=EString;

WMLLuaCode returns wml::WMLLuaCode:
	{wml::WMLLuaCode}
	'WMLLuaCode'
	'{'
		('value' value=EString)?
	'}';

WMLMacroParameter_Impl returns wml::WMLMacroParameter:
	{wml::WMLMacroParameter}
	'WMLMacroParameter'
	'{'
		('value' value=EString)?
	'}';

WMLValue returns wml::WMLValue:
	{wml::WMLValue}
	'WMLValue'
	'{'
		('value' value=EString)?
	'}';

MacroTokens returns wml::MacroTokens:
	{wml::MacroTokens}
	'MacroTokens'
	'{'
		('value' value=EString)?
	'}';

EString returns ecore::EString:
	STRING | ID;

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EFactory returns ecore::EFactory:
	{ecore::EFactory}
	'EFactory'
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';

EPackage returns ecore::EPackage:
	{ecore::EPackage}
	'EPackage'
	name=EString
	'{'
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eClassifiers' '{' eClassifiers+=EClassifier ( "," eClassifiers+=EClassifier)* '}' )?
		('eSubpackages' '{' eSubpackages+=EPackage ( "," eSubpackages+=EPackage)* '}' )?
	'}';

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

EByte returns ecore::EByte:
	'-'? INT;

EByteArray returns ecore::EByteArray:
	'EByteArray' /* TODO: implement this rule and an appropriate IValueConverter */;

EByteObject returns ecore::EByteObject:
	'-'? INT;

EChar returns ecore::EChar:
	'-'? INT;

ECharacterObject returns ecore::ECharacterObject:
	'ECharacterObject' /* TODO: implement this rule and an appropriate IValueConverter */;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;


EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;





EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EFloatObject returns ecore::EFloatObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

EJavaClass returns ecore::EJavaClass:
	'EJavaClass' /* TODO: implement this rule and an appropriate IValueConverter */;

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

ELong returns ecore::ELong:
	'-'? INT;

ELongObject returns ecore::ELongObject:
	'-'? INT;




EShort returns ecore::EShort:
	'-'? INT;

EShortObject returns ecore::EShortObject:
	'-'? INT;