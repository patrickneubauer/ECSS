// automatically generated by Xtext
grammar me.ecss.xtext.defaultgrammar.yang with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.xtext.org/editor/yang/Yang" as yang


EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;

EDataType returns ecore::EDataType:
	EDataType_Impl | EEnum;

EModelElement returns ecore::EModelElement:
	EAttribute | EAnnotation | EClass | EDataType_Impl | EEnum | EEnumLiteral | EFactory | EOperation | EPackage | EParameter | EReference | ETypeParameter;

ENamedElement returns ecore::ENamedElement:
	EAttribute | EClass | EDataType_Impl | EEnum | EEnumLiteral | EOperation | EPackage | EParameter | EReference | ETypeParameter;

EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;

ETypedElement returns ecore::ETypedElement:
	EAttribute | EOperation | EParameter | EReference;

YangFile returns yang::YangFile:
	Module | SubModule;

ModuleStatement returns yang::ModuleStatement:
	YangVersionStatement | OrganizationStatement | ContactStatement | DescriptionStatement | NamespaceStatement | PrefixStatement | UnknownStatement | RpcStatement | NotificationStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | AugmentStatement | DeviationStatement | ExtensionStatement | IdentityStatement | FeatureStatement | TypedefStatement | ImportStatement | IncludeStatement | RevisionStatement;

SubmoduleStatement returns yang::SubmoduleStatement:
	YangVersionStatement | OrganizationStatement | ContactStatement | DescriptionStatement | UnknownStatement | RpcStatement | NotificationStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | AugmentStatement | DeviationStatement | ExtensionStatement | IdentityStatement | FeatureStatement | BelongsToStatement | TypedefStatement | ImportStatement | IncludeStatement | RevisionStatement;

DatadefStatement returns yang::DatadefStatement:
	ContainerStatement | ListStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement;

MultipleSubstatement returns yang::MultipleSubstatement:
	DescriptionStatement | ReferenceStatement | ErrorAppTagStatement | ErrorMessageStatement | UnknownStatement;

RpcSubstatement returns yang::RpcSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | InputStatement | OutputStatement | GroupingStatement | TypedefStatement;

InputSubstatement returns yang::InputSubstatement:
	UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

OutputSubstatement returns yang::OutputSubstatement:
	UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

NotificationSubstatement returns yang::NotificationSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

ContainerSubstatement returns yang::ContainerSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | PresenceStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | MustStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement | WhenStatement;

ListSubstatement returns yang::ListSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | UniqueStatement | KeyStatement | OrderedbyStatement | ConfigStatement | IfFeatureStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement | WhenStatement;

GroupingSubstatement returns yang::GroupingSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | UnknownStatement | ContainerStatement | ListStatement | GroupingStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | TypedefStatement;

LeafSubstatement returns yang::LeafSubstatement:
	DescriptionStatement | ReferenceStatement | UnitsStatement | DefaultStatement | StatusStatement | MandatoryStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | MustStatement | TypeStatement | WhenStatement;

LeafListSubstatement returns yang::LeafListSubstatement:
	DescriptionStatement | UnitsStatement | DefaultStatement | StatusStatement | OrderedbyStatement | ConfigStatement | IfFeatureStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement | TypeStatement | WhenStatement;

ChoiceSubstatement returns yang::ChoiceSubstatement:
	DescriptionStatement | ReferenceStatement | DefaultStatement | StatusStatement | MandatoryStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | LeafStatement | LeafListStatement | CaseStatement | AnyxmlStatement | WhenStatement;

CaseSubstatement returns yang::CaseSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | LeafStatement | LeafListStatement | ChoiceStatement | AnyxmlStatement | UsesStatement | WhenStatement;

AnyxmlSubstatement returns yang::AnyxmlSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | MandatoryStatement | ConfigStatement | IfFeatureStatement | UnknownStatement | MustStatement | WhenStatement;

UsesSubstatement returns yang::UsesSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | AugmentUsesStatement | RefineStatement | WhenStatement;

AugmentSubstatement returns yang::AugmentSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement | ContainerStatement | ListStatement | LeafStatement | LeafListStatement | ChoiceStatement | CaseStatement | AnyxmlStatement | UsesStatement | WhenStatement;

RefineSubstatement returns yang::RefineSubstatement:
	DescriptionStatement | ReferenceStatement | DefaultStatement | PresenceStatement | MandatoryStatement | ConfigStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement;

DeviationSubstatement returns yang::DeviationSubstatement:
	DescriptionStatement | ReferenceStatement | UnknownStatement | DeviateStatement;

DeviateSubstatement returns yang::DeviateSubstatement:
	UnitsStatement | DefaultStatement | UniqueStatement | MandatoryStatement | ConfigStatement | MinElementsStatement | MaxElementsStatement | UnknownStatement | MustStatement;

ExtensionSubstatement returns yang::ExtensionSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | UnknownStatement | ArgumentStatement;

ArgumentSubstatement returns yang::ArgumentSubstatement:
	YinElementStatement | UnknownStatement;

IdentitySubstatement returns yang::IdentitySubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | BaseStatement | UnknownStatement;

FeatureSubstatement returns yang::FeatureSubstatement:
	DescriptionStatement | ReferenceStatement | StatusStatement | IfFeatureStatement | UnknownStatement;

BelongsToSubstatement returns yang::BelongsToSubstatement:
	PrefixStatement | UnknownStatement;

TypedefSubstatement returns yang::TypedefSubstatement:
	DescriptionStatement | ReferenceStatement | UnitsStatement | DefaultStatement | StatusStatement | UnknownStatement | TypeStatement;

TypeSubStatement returns yang::TypeSubStatement:
	RequireInstanceStatement | PathStatement | DefaultStatement | FractionDigitsStatement | BaseStatement | UnknownStatement | RangeStatement | PatternStatement | LengthStatement | TypeStatement | BitStatement | EnumStatement;

BitSubstatement returns yang::BitSubstatement:
	DescriptionStatement | ReferenceStatement | PositionStatement | StatusStatement | UnknownStatement;

EnumSubstatement returns yang::EnumSubstatement:
	DescriptionStatement | ReferenceStatement | ValueStatement | StatusStatement | UnknownStatement;

ImportSubstatements returns yang::ImportSubstatements:
	PrefixStatement | RevisionDateStatement | UnknownStatement;

IncludeSubstatements returns yang::IncludeSubstatements:
	RevisionDateStatement | UnknownStatement;

WhenSubstatements returns yang::WhenSubstatements:
	DescriptionStatement | ReferenceStatement | UnknownStatement;

RevisionSubstatements returns yang::RevisionSubstatements:
	DescriptionStatement | ReferenceStatement | UnknownStatement;

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	'}';

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
	'}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EFactory returns ecore::EFactory:
	{ecore::EFactory}
	'EFactory'
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
	'}';

EPackage returns ecore::EPackage:
	{ecore::EPackage}
	'EPackage'
	name=EString
	'{'
		('nsURI' nsURI=EString)?
		('nsPrefix' nsPrefix=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eClassifiers' '{' eClassifiers+=EClassifier ( "," eClassifiers+=EClassifier)* '}' )?
		('eSubpackages' '{' eSubpackages+=EPackage ( "," eSubpackages+=EPackage)* '}' )?
	'}';

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
	'}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
	'}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
	'}';

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

EByte returns ecore::EByte:
	'-'? INT;

EByteArray returns ecore::EByteArray:
	'EByteArray' /* TODO: implement this rule and an appropriate IValueConverter */;

EByteObject returns ecore::EByteObject:
	'-'? INT;

EChar returns ecore::EChar:
	'-'? INT;

ECharacterObject returns ecore::ECharacterObject:
	'ECharacterObject' /* TODO: implement this rule and an appropriate IValueConverter */;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;


EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;





EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EFloatObject returns ecore::EFloatObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

EJavaClass returns ecore::EJavaClass:
	'EJavaClass' /* TODO: implement this rule and an appropriate IValueConverter */;

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

ELong returns ecore::ELong:
	'-'? INT;

ELongObject returns ecore::ELongObject:
	'-'? INT;




EShort returns ecore::EShort:
	'-'? INT;

EShortObject returns ecore::EShortObject:
	'-'? INT;

EString returns ecore::EString:
	STRING | ID;



Module returns yang::Module:
	{yang::Module}
	'Module'
	name=EString
	'{'
		('statements' '{' statements+=ModuleStatement ( "," statements+=ModuleStatement)* '}' )?
	'}';

SubModule returns yang::SubModule:
	{yang::SubModule}
	'SubModule'
	name=EString
	'{'
		('statements' '{' statements+=SubmoduleStatement ( "," statements+=SubmoduleStatement)* '}' )?
	'}';

YangVersionStatement returns yang::YangVersionStatement:
	{yang::YangVersionStatement}
	'YangVersionStatement'
	'{'
		('version' version=EString)?
		('yangversionunknownstatements' '{' yangversionunknownstatements+=UnknownStatement ( "," yangversionunknownstatements+=UnknownStatement)* '}' )?
	'}';

OrganizationStatement returns yang::OrganizationStatement:
	{yang::OrganizationStatement}
	'OrganizationStatement'
	'{'
		('organization' organization=EString)?
		('organizationunknownstatements' '{' organizationunknownstatements+=UnknownStatement ( "," organizationunknownstatements+=UnknownStatement)* '}' )?
	'}';

ContactStatement returns yang::ContactStatement:
	{yang::ContactStatement}
	'ContactStatement'
	'{'
		('contact' contact=EString)?
		('contactunknownstatements' '{' contactunknownstatements+=UnknownStatement ( "," contactunknownstatements+=UnknownStatement)* '}' )?
	'}';

DescriptionStatement returns yang::DescriptionStatement:
	{yang::DescriptionStatement}
	'DescriptionStatement'
	'{'
		('description' description=EString)?
		('descriptionunknownstatements' '{' descriptionunknownstatements+=UnknownStatement ( "," descriptionunknownstatements+=UnknownStatement)* '}' )?
	'}';

ReferenceStatement returns yang::ReferenceStatement:
	{yang::ReferenceStatement}
	'ReferenceStatement'
	'{'
		('reference' reference=EString)?
		('referenceunknownstatements' '{' referenceunknownstatements+=UnknownStatement ( "," referenceunknownstatements+=UnknownStatement)* '}' )?
	'}';

NamespaceStatement returns yang::NamespaceStatement:
	{yang::NamespaceStatement}
	'NamespaceStatement'
	'{'
		('uri' uri=EString)?
		('namespaceunknownstatements' '{' namespaceunknownstatements+=UnknownStatement ( "," namespaceunknownstatements+=UnknownStatement)* '}' )?
	'}';

PrefixStatement returns yang::PrefixStatement:
	{yang::PrefixStatement}
	'PrefixStatement'
	name=EString
	'{'
		('prefixunknownstatements' '{' prefixunknownstatements+=UnknownStatement ( "," prefixunknownstatements+=UnknownStatement)* '}' )?
	'}';

RequireInstanceStatement returns yang::RequireInstanceStatement:
	{yang::RequireInstanceStatement}
	'RequireInstanceStatement'
	'{'
		('require' require=EString)?
		('requireunknownstatements' '{' requireunknownstatements+=UnknownStatement ( "," requireunknownstatements+=UnknownStatement)* '}' )?
	'}';

PathStatement returns yang::PathStatement:
	{yang::PathStatement}
	'PathStatement'
	'{'
		('path' path=EString)?
		('pathunknownstatements' '{' pathunknownstatements+=UnknownStatement ( "," pathunknownstatements+=UnknownStatement)* '}' )?
	'}';

PositionStatement returns yang::PositionStatement:
	{yang::PositionStatement}
	'PositionStatement'
	'{'
		('intarg' intarg=EString)?
		('positionunknownstatements' '{' positionunknownstatements+=UnknownStatement ( "," positionunknownstatements+=UnknownStatement)* '}' )?
	'}';

ValueStatement returns yang::ValueStatement:
	{yang::ValueStatement}
	'ValueStatement'
	'{'
		('intarg' intarg=EString)?
		('valueunknownstatements' '{' valueunknownstatements+=UnknownStatement ( "," valueunknownstatements+=UnknownStatement)* '}' )?
	'}';

ErrorAppTagStatement returns yang::ErrorAppTagStatement:
	{yang::ErrorAppTagStatement}
	'ErrorAppTagStatement'
	'{'
		('arg' arg=EString)?
		('erroraunknownstatements' '{' erroraunknownstatements+=UnknownStatement ( "," erroraunknownstatements+=UnknownStatement)* '}' )?
	'}';

ErrorMessageStatement returns yang::ErrorMessageStatement:
	{yang::ErrorMessageStatement}
	'ErrorMessageStatement'
	'{'
		('arg' arg=EString)?
		('errormunknownstatements' '{' errormunknownstatements+=UnknownStatement ( "," errormunknownstatements+=UnknownStatement)* '}' )?
	'}';

UnitsStatement returns yang::UnitsStatement:
	{yang::UnitsStatement}
	'UnitsStatement'
	'{'
		('arg' arg=EString)?
		('unitsunknownstatements' '{' unitsunknownstatements+=UnknownStatement ( "," unitsunknownstatements+=UnknownStatement)* '}' )?
	'}';

DefaultStatement returns yang::DefaultStatement:
	{yang::DefaultStatement}
	'DefaultStatement'
	'{'
		('arg' arg=EString)?
		('defaultunknownstatements' '{' defaultunknownstatements+=UnknownStatement ( "," defaultunknownstatements+=UnknownStatement)* '}' )?
	'}';

StatusStatement returns yang::StatusStatement:
	{yang::StatusStatement}
	'StatusStatement'
	'{'
		('status' status=EString)?
		('statusunknownstatements' '{' statusunknownstatements+=UnknownStatement ( "," statusunknownstatements+=UnknownStatement)* '}' )?
	'}';

RevisionDateStatement returns yang::RevisionDateStatement:
	{yang::RevisionDateStatement}
	'RevisionDateStatement'
	'{'
		('date' date=EString)?
		('revisiondateunknownstatements' '{' revisiondateunknownstatements+=UnknownStatement ( "," revisiondateunknownstatements+=UnknownStatement)* '}' )?
	'}';

UniqueStatement returns yang::UniqueStatement:
	{yang::UniqueStatement}
	'UniqueStatement'
	'{'
		('arg' arg=EString)?
		('uniqueunknownstatements' '{' uniqueunknownstatements+=UnknownStatement ( "," uniqueunknownstatements+=UnknownStatement)* '}' )?
	'}';

KeyStatement returns yang::KeyStatement:
	{yang::KeyStatement}
	'KeyStatement'
	'{'
		('arg' arg=EString)?
		('keyunknownstatements' '{' keyunknownstatements+=UnknownStatement ( "," keyunknownstatements+=UnknownStatement)* '}' )?
	'}';

OrderedbyStatement returns yang::OrderedbyStatement:
	{yang::OrderedbyStatement}
	'OrderedbyStatement'
	'{'
		('arg' arg=EString)?
		('orderedbyunknownstatements' '{' orderedbyunknownstatements+=UnknownStatement ( "," orderedbyunknownstatements+=UnknownStatement)* '}' )?
	'}';

PresenceStatement returns yang::PresenceStatement:
	{yang::PresenceStatement}
	'PresenceStatement'
	'{'
		('arg' arg=EString)?
		('presenceunknownstatements' '{' presenceunknownstatements+=UnknownStatement ( "," presenceunknownstatements+=UnknownStatement)* '}' )?
	'}';

MandatoryStatement returns yang::MandatoryStatement:
	{yang::MandatoryStatement}
	'MandatoryStatement'
	'{'
		('boolarg' boolarg=EString)?
		('mandatoryunknownstatements' '{' mandatoryunknownstatements+=UnknownStatement ( "," mandatoryunknownstatements+=UnknownStatement)* '}' )?
	'}';

ConfigStatement returns yang::ConfigStatement:
	{yang::ConfigStatement}
	'ConfigStatement'
	'{'
		('boolarg' boolarg=EString)?
		('configunknownstatements' '{' configunknownstatements+=UnknownStatement ( "," configunknownstatements+=UnknownStatement)* '}' )?
	'}';

FractionDigitsStatement returns yang::FractionDigitsStatement:
	{yang::FractionDigitsStatement}
	'FractionDigitsStatement'
	'{'
		('arg' arg=EString)?
		('fractiondigitsunknownstatements' '{' fractiondigitsunknownstatements+=UnknownStatement ( "," fractiondigitsunknownstatements+=UnknownStatement)* '}' )?
	'}';

IfFeatureStatement returns yang::IfFeatureStatement:
	{yang::IfFeatureStatement}
	'IfFeatureStatement'
	'{'
		('pref' pref=EString)?
		('ident' ident=[yang::FeatureStatement|EString])?
		('iffeatureunknownstatements' '{' iffeatureunknownstatements+=UnknownStatement ( "," iffeatureunknownstatements+=UnknownStatement)* '}' )?
	'}';

BaseStatement returns yang::BaseStatement:
	{yang::BaseStatement}
	'BaseStatement'
	'{'
		('pref' pref=EString)?
		('ident' ident=[yang::IdentityStatement|EString])?
		('baseunknownstatements' '{' baseunknownstatements+=UnknownStatement ( "," baseunknownstatements+=UnknownStatement)* '}' )?
	'}';

YinElementStatement returns yang::YinElementStatement:
	{yang::YinElementStatement}
	'YinElementStatement'
	'{'
		('boolarg' boolarg=EString)?
		('yinelementunknownstatements' '{' yinelementunknownstatements+=UnknownStatement ( "," yinelementunknownstatements+=UnknownStatement)* '}' )?
	'}';

MinElementsStatement returns yang::MinElementsStatement:
	{yang::MinElementsStatement}
	'MinElementsStatement'
	'{'
		('arg' arg=EString)?
		('minelementsunknownstatements' '{' minelementsunknownstatements+=UnknownStatement ( "," minelementsunknownstatements+=UnknownStatement)* '}' )?
	'}';

MaxElementsStatement returns yang::MaxElementsStatement:
	{yang::MaxElementsStatement}
	'MaxElementsStatement'
	'{'
		('arg' arg=EString)?
		('maxelementsunknownstatements' '{' maxelementsunknownstatements+=UnknownStatement ( "," maxelementsunknownstatements+=UnknownStatement)* '}' )?
	'}';

UnknownStatement returns yang::UnknownStatement:
	{yang::UnknownStatement}
	'UnknownStatement'
	'{'
		('pref' pref=EString)?
		('namestat' namestat=EString)?
		('argument' argument=EString)?
		('unknownsubstatements' '{' unknownsubstatements+=UnknownSubstatements ( "," unknownsubstatements+=UnknownSubstatements)* '}' )?
	'}';

UnknownSubstatements returns yang::UnknownSubstatements:
	{yang::UnknownSubstatements}
	'UnknownSubstatements'
	'{'
		('pref' pref=EString)?
		('namestat' namestat=EString)?
		('argument' argument=EString)?
		('unknownsubstatements' '{' unknownsubstatements+=UnknownSubstatements ( "," unknownsubstatements+=UnknownSubstatements)* '}' )?
	'}';

RangeStatement returns yang::RangeStatement:
	{yang::RangeStatement}
	'RangeStatement'
	'{'
		('range' range=EString)?
		('rangesubstatements' '{' rangesubstatements+=MultipleSubstatement ( "," rangesubstatements+=MultipleSubstatement)* '}' )?
	'}';

PatternStatement returns yang::PatternStatement:
	{yang::PatternStatement}
	'PatternStatement'
	name=EString
	'{'
		('patternsubstatements' '{' patternsubstatements+=MultipleSubstatement ( "," patternsubstatements+=MultipleSubstatement)* '}' )?
	'}';

LengthStatement returns yang::LengthStatement:
	{yang::LengthStatement}
	'LengthStatement'
	'{'
		('length' length=EString)?
		('lengthsubstatements' '{' lengthsubstatements+=MultipleSubstatement ( "," lengthsubstatements+=MultipleSubstatement)* '}' )?
	'}';

MustStatement returns yang::MustStatement:
	{yang::MustStatement}
	'MustStatement'
	'{'
		('arg' arg=EString)?
		('mustsubstatements' '{' mustsubstatements+=MultipleSubstatement ( "," mustsubstatements+=MultipleSubstatement)* '}' )?
	'}';

RpcStatement returns yang::RpcStatement:
	{yang::RpcStatement}
	'RpcStatement'
	name=EString
	'{'
		('rpcsubstatements' '{' rpcsubstatements+=RpcSubstatement ( "," rpcsubstatements+=RpcSubstatement)* '}' )?
	'}';

InputStatement returns yang::InputStatement:
	{yang::InputStatement}
	'InputStatement'
	'{'
		('inputsubstatements' '{' inputsubstatements+=InputSubstatement ( "," inputsubstatements+=InputSubstatement)* '}' )?
	'}';

OutputStatement returns yang::OutputStatement:
	{yang::OutputStatement}
	'OutputStatement'
	'{'
		('outputsubstatements' '{' outputsubstatements+=OutputSubstatement ( "," outputsubstatements+=OutputSubstatement)* '}' )?
	'}';

NotificationStatement returns yang::NotificationStatement:
	{yang::NotificationStatement}
	'NotificationStatement'
	name=EString
	'{'
		('notificationsubstatements' '{' notificationsubstatements+=NotificationSubstatement ( "," notificationsubstatements+=NotificationSubstatement)* '}' )?
	'}';

ContainerStatement returns yang::ContainerStatement:
	{yang::ContainerStatement}
	'ContainerStatement'
	name=EString
	'{'
		('containersubstatements' '{' containersubstatements+=ContainerSubstatement ( "," containersubstatements+=ContainerSubstatement)* '}' )?
	'}';

ListStatement returns yang::ListStatement:
	{yang::ListStatement}
	'ListStatement'
	name=EString
	'{'
		('listsubstatements' '{' listsubstatements+=ListSubstatement ( "," listsubstatements+=ListSubstatement)* '}' )?
	'}';

GroupingStatement returns yang::GroupingStatement:
	{yang::GroupingStatement}
	'GroupingStatement'
	name=EString
	'{'
		('groupingsubstatements' '{' groupingsubstatements+=GroupingSubstatement ( "," groupingsubstatements+=GroupingSubstatement)* '}' )?
	'}';

LeafStatement returns yang::LeafStatement:
	{yang::LeafStatement}
	'LeafStatement'
	name=EString
	'{'
		('leafsubstatements' '{' leafsubstatements+=LeafSubstatement ( "," leafsubstatements+=LeafSubstatement)* '}' )?
	'}';

LeafListStatement returns yang::LeafListStatement:
	{yang::LeafListStatement}
	'LeafListStatement'
	'{'
		('arg' arg=EString)?
		('leaflistsubstatements' '{' leaflistsubstatements+=LeafListSubstatement ( "," leaflistsubstatements+=LeafListSubstatement)* '}' )?
	'}';

ChoiceStatement returns yang::ChoiceStatement:
	{yang::ChoiceStatement}
	'ChoiceStatement'
	name=EString
	'{'
		('choicesubstatements' '{' choicesubstatements+=ChoiceSubstatement ( "," choicesubstatements+=ChoiceSubstatement)* '}' )?
	'}';

CaseStatement returns yang::CaseStatement:
	{yang::CaseStatement}
	'CaseStatement'
	name=EString
	'{'
		('casesubstatements' '{' casesubstatements+=CaseSubstatement ( "," casesubstatements+=CaseSubstatement)* '}' )?
	'}';

AnyxmlStatement returns yang::AnyxmlStatement:
	{yang::AnyxmlStatement}
	'AnyxmlStatement'
	'{'
		('arg' arg=EString)?
		('anyxmlsubstatements' '{' anyxmlsubstatements+=AnyxmlSubstatement ( "," anyxmlsubstatements+=AnyxmlSubstatement)* '}' )?
	'}';

UsesStatement returns yang::UsesStatement:
	{yang::UsesStatement}
	'UsesStatement'
	'{'
		('pre' pre=EString)?
		('arg' arg=[yang::GroupingStatement|EString])?
		('usessubstatements' '{' usessubstatements+=UsesSubstatement ( "," usessubstatements+=UsesSubstatement)* '}' )?
	'}';

AugmentUsesStatement returns yang::AugmentUsesStatement:
	{yang::AugmentUsesStatement}
	'AugmentUsesStatement'
	'{'
		('arg' arg=EString)?
		('augmentsubstatements' '{' augmentsubstatements+=AugmentSubstatement ( "," augmentsubstatements+=AugmentSubstatement)* '}' )?
	'}';

AugmentStatement returns yang::AugmentStatement:
	{yang::AugmentStatement}
	'AugmentStatement'
	'{'
		('arg' arg=EString)?
		('augmentsubstatements' '{' augmentsubstatements+=AugmentSubstatement ( "," augmentsubstatements+=AugmentSubstatement)* '}' )?
	'}';

RefineStatement returns yang::RefineStatement:
	{yang::RefineStatement}
	'RefineStatement'
	'{'
		('arg' arg=EString)?
		('refinesubstatements' '{' refinesubstatements+=RefineSubstatement ( "," refinesubstatements+=RefineSubstatement)* '}' )?
	'}';

DeviationStatement returns yang::DeviationStatement:
	{yang::DeviationStatement}
	'DeviationStatement'
	'{'
		('arg' arg=EString)?
		('deviationsubstatements' '{' deviationsubstatements+=DeviationSubstatement ( "," deviationsubstatements+=DeviationSubstatement)* '}' )?
	'}';

DeviateStatement returns yang::DeviateStatement:
	{yang::DeviateStatement}
	'DeviateStatement'
	'{'
		('arg' arg=EString)?
		('deviatesubstatements' '{' deviatesubstatements+=DeviateSubstatement ( "," deviatesubstatements+=DeviateSubstatement)* '}' )?
	'}';

ExtensionStatement returns yang::ExtensionStatement:
	{yang::ExtensionStatement}
	'ExtensionStatement'
	'{'
		('arg' arg=EString)?
		('extensionsubstatements' '{' extensionsubstatements+=ExtensionSubstatement ( "," extensionsubstatements+=ExtensionSubstatement)* '}' )?
	'}';

ArgumentStatement returns yang::ArgumentStatement:
	{yang::ArgumentStatement}
	'ArgumentStatement'
	'{'
		('arg' arg=EString)?
		('argumentsubstatements' '{' argumentsubstatements+=ArgumentSubstatement ( "," argumentsubstatements+=ArgumentSubstatement)* '}' )?
	'}';

IdentityStatement returns yang::IdentityStatement:
	{yang::IdentityStatement}
	'IdentityStatement'
	name=EString
	'{'
		('identitysubstatements' '{' identitysubstatements+=IdentitySubstatement ( "," identitysubstatements+=IdentitySubstatement)* '}' )?
	'}';

FeatureStatement returns yang::FeatureStatement:
	{yang::FeatureStatement}
	'FeatureStatement'
	name=EString
	'{'
		('featuresubstatements' '{' featuresubstatements+=FeatureSubstatement ( "," featuresubstatements+=FeatureSubstatement)* '}' )?
	'}';

BelongsToStatement returns yang::BelongsToStatement:
	{yang::BelongsToStatement}
	'BelongsToStatement'
	name=EString
	'{'
		('belongstosubstatement' '{' belongstosubstatement+=BelongsToSubstatement ( "," belongstosubstatement+=BelongsToSubstatement)* '}' )?
	'}';

TypedefStatement returns yang::TypedefStatement:
	{yang::TypedefStatement}
	'TypedefStatement'
	name=EString
	'{'
		('typedefsubstatemnet' '{' typedefsubstatemnet+=TypedefSubstatement ( "," typedefsubstatemnet+=TypedefSubstatement)* '}' )?
	'}';

TypeStatement returns yang::TypeStatement:
	{yang::TypeStatement}
	'TypeStatement'
	'{'
		('pre' pre=EString)?
		('importtype' importtype=[yang::TypedefStatement|EString])?
		('type' type=BuiltInType)?
		('typesubstatements' '{' typesubstatements+=TypeSubStatement ( "," typesubstatements+=TypeSubStatement)* '}' )?
	'}';

BitStatement returns yang::BitStatement:
	{yang::BitStatement}
	'BitStatement'
	name=EString
	'{'
		('bitsubstatements' '{' bitsubstatements+=BitSubstatement ( "," bitsubstatements+=BitSubstatement)* '}' )?
	'}';

EnumStatement returns yang::EnumStatement:
	{yang::EnumStatement}
	'EnumStatement'
	name=EString
	'{'
		('enumsubstatements' '{' enumsubstatements+=EnumSubstatement ( "," enumsubstatements+=EnumSubstatement)* '}' )?
	'}';

ImportStatement returns yang::ImportStatement:
	{yang::ImportStatement}
	'ImportStatement'
	'{'
		('importURI' importURI=EString)?
		('importsubstatements' '{' importsubstatements+=ImportSubstatements ( "," importsubstatements+=ImportSubstatements)* '}' )?
	'}';

IncludeStatement returns yang::IncludeStatement:
	{yang::IncludeStatement}
	'IncludeStatement'
	'{'
		('importURI' importURI=EString)?
		('includesubstatements' '{' includesubstatements+=IncludeSubstatements ( "," includesubstatements+=IncludeSubstatements)* '}' )?
	'}';

WhenStatement returns yang::WhenStatement:
	{yang::WhenStatement}
	'WhenStatement'
	'{'
		('arg' arg=EString)?
		('whensubstatements' '{' whensubstatements+=WhenSubstatements ( "," whensubstatements+=WhenSubstatements)* '}' )?
	'}';

RevisionStatement returns yang::RevisionStatement:
	{yang::RevisionStatement}
	'RevisionStatement'
	'{'
		('date' date=EString)?
		('revisionsubstatements' '{' revisionsubstatements+=RevisionSubstatements ( "," revisionsubstatements+=RevisionSubstatements)* '}' )?
	'}';

BuiltInType returns yang::BuiltInType:
	{yang::BuiltInType}
	'BuiltInType'
	'{'
		('btype' btype=EString)?
	'}';